// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DesktopWindowXamlSource(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DesktopWindowXamlSource,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(DesktopWindowXamlSource, windows::Foundation::IClosable);
impl DesktopWindowXamlSource {
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Content(&self) -> windows_core::Result<super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Content)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetContent<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetContent)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn HasFocus(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasFocus)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SystemBackdrop(&self) -> windows_core::Result<super::Media::SystemBackdrop> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SystemBackdrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetSystemBackdrop<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::SystemBackdrop>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetSystemBackdrop)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Content")]
    pub fn SiteBridge(
        &self,
    ) -> windows_core::Result<super::super::Content::DesktopChildSiteBridge> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SiteBridge)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TakeFocusRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                DesktopWindowXamlSource,
                DesktopWindowXamlSourceTakeFocusRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TakeFocusRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveTakeFocusRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTakeFocusRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                DesktopWindowXamlSource,
                DesktopWindowXamlSourceGotFocusEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn NavigateFocus<P0>(
        &self,
        request: P0,
    ) -> windows_core::Result<XamlSourceFocusNavigationResult>
    where
        P0: windows_core::Param<XamlSourceFocusNavigationRequest>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigateFocus)(
                windows_core::Interface::as_raw(this),
                request.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Initialize(&self, parentwindowid: super::super::WindowId) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Initialize)(
                windows_core::Interface::as_raw(this),
                parentwindowid,
            )
            .ok()
        }
    }
    pub fn ShouldConstrainPopupsToWorkArea(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IDesktopWindowXamlSource2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldConstrainPopupsToWorkArea)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetShouldConstrainPopupsToWorkArea(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDesktopWindowXamlSource2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetShouldConstrainPopupsToWorkArea)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<DesktopWindowXamlSource> {
        Self::IDesktopWindowXamlSourceFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IDesktopWindowXamlSourceFactory<
        R,
        F: FnOnce(&IDesktopWindowXamlSourceFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DesktopWindowXamlSource,
            IDesktopWindowXamlSourceFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DesktopWindowXamlSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDesktopWindowXamlSource>();
}
unsafe impl windows_core::Interface for DesktopWindowXamlSource {
    type Vtable = <IDesktopWindowXamlSource as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDesktopWindowXamlSource as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DesktopWindowXamlSource {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource";
}
unsafe impl Send for DesktopWindowXamlSource {}
unsafe impl Sync for DesktopWindowXamlSource {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DesktopWindowXamlSourceGotFocusEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DesktopWindowXamlSourceGotFocusEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl DesktopWindowXamlSourceGotFocusEventArgs {
    pub fn Request(&self) -> windows_core::Result<XamlSourceFocusNavigationRequest> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Request)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for DesktopWindowXamlSourceGotFocusEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IDesktopWindowXamlSourceGotFocusEventArgs,
    >();
}
unsafe impl windows_core::Interface for DesktopWindowXamlSourceGotFocusEventArgs {
    type Vtable = <IDesktopWindowXamlSourceGotFocusEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IDesktopWindowXamlSourceGotFocusEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DesktopWindowXamlSourceGotFocusEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs";
}
unsafe impl Send for DesktopWindowXamlSourceGotFocusEventArgs {}
unsafe impl Sync for DesktopWindowXamlSourceGotFocusEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DesktopWindowXamlSourceTakeFocusRequestedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DesktopWindowXamlSourceTakeFocusRequestedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl DesktopWindowXamlSourceTakeFocusRequestedEventArgs {
    pub fn Request(&self) -> windows_core::Result<XamlSourceFocusNavigationRequest> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Request)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for DesktopWindowXamlSourceTakeFocusRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IDesktopWindowXamlSourceTakeFocusRequestedEventArgs,
    >();
}
unsafe impl windows_core::Interface for DesktopWindowXamlSourceTakeFocusRequestedEventArgs {
    type Vtable =
        <IDesktopWindowXamlSourceTakeFocusRequestedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IDesktopWindowXamlSourceTakeFocusRequestedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DesktopWindowXamlSourceTakeFocusRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs";
}
unsafe impl Send for DesktopWindowXamlSourceTakeFocusRequestedEventArgs {}
unsafe impl Sync for DesktopWindowXamlSourceTakeFocusRequestedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ElementCompositionPreview(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ElementCompositionPreview,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ElementCompositionPreview {
    #[cfg(feature = "UI_Composition")]
    pub fn GetElementVisual<P0>(
        element: P0,
    ) -> windows_core::Result<super::super::Composition::Visual>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::IElementCompositionPreviewStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetElementVisual)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn GetElementChildVisual<P0>(
        element: P0,
    ) -> windows_core::Result<super::super::Composition::Visual>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::IElementCompositionPreviewStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetElementChildVisual)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetElementChildVisual<P0, P1>(element: P0, visual: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
        P1: windows_core::Param<super::super::Composition::Visual>,
    {
        Self::IElementCompositionPreviewStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetElementChildVisual)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                visual.param().abi(),
            )
            .ok()
        })
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls"))]
    pub fn GetScrollViewerManipulationPropertySet<P0>(
        scrollviewer: P0,
    ) -> windows_core::Result<super::super::Composition::CompositionPropertySet>
    where
        P0: windows_core::Param<super::Controls::ScrollViewer>,
    {
        Self::IElementCompositionPreviewStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetScrollViewerManipulationPropertySet)(
                windows_core::Interface::as_raw(this),
                scrollviewer.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetImplicitShowAnimation<P0, P1>(element: P0, animation: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
        P1: windows_core::Param<super::super::Composition::ICompositionAnimationBase>,
    {
        Self::IElementCompositionPreviewStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetImplicitShowAnimation)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                animation.param().abi(),
            )
            .ok()
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetImplicitHideAnimation<P0, P1>(element: P0, animation: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
        P1: windows_core::Param<super::super::Composition::ICompositionAnimationBase>,
    {
        Self::IElementCompositionPreviewStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetImplicitHideAnimation)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                animation.param().abi(),
            )
            .ok()
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetIsTranslationEnabled<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::IElementCompositionPreviewStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsTranslationEnabled)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn GetPointerPositionPropertySet<P0>(
        targetelement: P0,
    ) -> windows_core::Result<super::super::Composition::CompositionPropertySet>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::IElementCompositionPreviewStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetPointerPositionPropertySet)(
                windows_core::Interface::as_raw(this),
                targetelement.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IElementCompositionPreviewStatics<
        R,
        F: FnOnce(&IElementCompositionPreviewStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ElementCompositionPreview,
            IElementCompositionPreviewStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ElementCompositionPreview {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IElementCompositionPreview>();
}
unsafe impl windows_core::Interface for ElementCompositionPreview {
    type Vtable = <IElementCompositionPreview as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IElementCompositionPreview as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ElementCompositionPreview {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.ElementCompositionPreview";
}
unsafe impl Send for ElementCompositionPreview {}
unsafe impl Sync for ElementCompositionPreview {}
windows_core::imp::define_interface!(
    IDesktopWindowXamlSource,
    IDesktopWindowXamlSource_Vtbl,
    0x553af92c_1381_51d6_bee0_f34beb042ea8
);
impl windows_core::RuntimeType for IDesktopWindowXamlSource {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(
    feature = "UI_Composition",
    feature = "UI_Content",
    feature = "UI_Xaml_Media"
))]
impl windows_core::RuntimeName for IDesktopWindowXamlSource {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSource";
}
#[cfg(all(
    feature = "UI_Composition",
    feature = "UI_Content",
    feature = "UI_Xaml_Media"
))]
pub trait IDesktopWindowXamlSource_Impl: windows_core::IUnknownImpl {
    fn Content(&self) -> windows_core::Result<super::UIElement>;
    fn SetContent(
        &self,
        value: windows_core::Ref<'_, super::UIElement>,
    ) -> windows_core::Result<()>;
    fn HasFocus(&self) -> windows_core::Result<bool>;
    fn SystemBackdrop(&self) -> windows_core::Result<super::Media::SystemBackdrop>;
    fn SetSystemBackdrop(
        &self,
        value: windows_core::Ref<'_, super::Media::SystemBackdrop>,
    ) -> windows_core::Result<()>;
    fn SiteBridge(&self) -> windows_core::Result<super::super::Content::DesktopChildSiteBridge>;
    fn TakeFocusRequested(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                DesktopWindowXamlSource,
                DesktopWindowXamlSourceTakeFocusRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveTakeFocusRequested(&self, token: i64) -> windows_core::Result<()>;
    fn GotFocus(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                DesktopWindowXamlSource,
                DesktopWindowXamlSourceGotFocusEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()>;
    fn NavigateFocus(
        &self,
        request: windows_core::Ref<'_, XamlSourceFocusNavigationRequest>,
    ) -> windows_core::Result<XamlSourceFocusNavigationResult>;
    fn Initialize(&self, parentWindowId: &super::super::WindowId) -> windows_core::Result<()>;
}
#[cfg(all(
    feature = "UI_Composition",
    feature = "UI_Content",
    feature = "UI_Xaml_Media"
))]
impl IDesktopWindowXamlSource_Vtbl {
    pub const fn new<Identity: IDesktopWindowXamlSource_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Content<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopWindowXamlSource_Impl::Content(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContent<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopWindowXamlSource_Impl::SetContent(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn HasFocus<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopWindowXamlSource_Impl::HasFocus(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SystemBackdrop<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopWindowXamlSource_Impl::SystemBackdrop(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSystemBackdrop<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopWindowXamlSource_Impl::SetSystemBackdrop(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn SiteBridge<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopWindowXamlSource_Impl::SiteBridge(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TakeFocusRequested<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopWindowXamlSource_Impl::TakeFocusRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveTakeFocusRequested<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopWindowXamlSource_Impl::RemoveTakeFocusRequested(this, token).into()
            }
        }
        unsafe extern "system" fn GotFocus<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopWindowXamlSource_Impl::GotFocus(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveGotFocus<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopWindowXamlSource_Impl::RemoveGotFocus(this, token).into()
            }
        }
        unsafe extern "system" fn NavigateFocus<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            request: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopWindowXamlSource_Impl::NavigateFocus(
                    this,
                    core::mem::transmute_copy(&request),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Initialize<
            Identity: IDesktopWindowXamlSource_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            parentwindowid: super::super::WindowId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopWindowXamlSource_Impl::Initialize(
                    this,
                    core::mem::transmute(&parentwindowid),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopWindowXamlSource,
                OFFSET,
            >(),
            Content: Content::<Identity, OFFSET>,
            SetContent: SetContent::<Identity, OFFSET>,
            HasFocus: HasFocus::<Identity, OFFSET>,
            SystemBackdrop: SystemBackdrop::<Identity, OFFSET>,
            SetSystemBackdrop: SetSystemBackdrop::<Identity, OFFSET>,
            SiteBridge: SiteBridge::<Identity, OFFSET>,
            TakeFocusRequested: TakeFocusRequested::<Identity, OFFSET>,
            RemoveTakeFocusRequested: RemoveTakeFocusRequested::<Identity, OFFSET>,
            GotFocus: GotFocus::<Identity, OFFSET>,
            RemoveGotFocus: RemoveGotFocus::<Identity, OFFSET>,
            NavigateFocus: NavigateFocus::<Identity, OFFSET>,
            Initialize: Initialize::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopWindowXamlSource as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopWindowXamlSource_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub Content: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Content: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetContent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetContent: usize,
    pub HasFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SystemBackdrop: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SystemBackdrop: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetSystemBackdrop: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetSystemBackdrop: usize,
    #[cfg(feature = "UI_Content")]
    pub SiteBridge: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Content"))]
    SiteBridge: usize,
    pub TakeFocusRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveTakeFocusRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub GotFocus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveGotFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub NavigateFocus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Initialize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::super::WindowId,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDesktopWindowXamlSource2,
    IDesktopWindowXamlSource2_Vtbl,
    0xfb02b9f1_8588_5bd3_8951_4664a675d872
);
impl windows_core::RuntimeType for IDesktopWindowXamlSource2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDesktopWindowXamlSource2 {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSource2";
}
pub trait IDesktopWindowXamlSource2_Impl: windows_core::IUnknownImpl {
    fn ShouldConstrainPopupsToWorkArea(&self) -> windows_core::Result<bool>;
    fn SetShouldConstrainPopupsToWorkArea(&self, value: bool) -> windows_core::Result<()>;
}
impl IDesktopWindowXamlSource2_Vtbl {
    pub const fn new<Identity: IDesktopWindowXamlSource2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ShouldConstrainPopupsToWorkArea<
            Identity: IDesktopWindowXamlSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopWindowXamlSource2_Impl::ShouldConstrainPopupsToWorkArea(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetShouldConstrainPopupsToWorkArea<
            Identity: IDesktopWindowXamlSource2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopWindowXamlSource2_Impl::SetShouldConstrainPopupsToWorkArea(this, value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopWindowXamlSource2,
                OFFSET,
            >(),
            ShouldConstrainPopupsToWorkArea: ShouldConstrainPopupsToWorkArea::<Identity, OFFSET>,
            SetShouldConstrainPopupsToWorkArea: SetShouldConstrainPopupsToWorkArea::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopWindowXamlSource2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopWindowXamlSource2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ShouldConstrainPopupsToWorkArea:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetShouldConstrainPopupsToWorkArea:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDesktopWindowXamlSourceFactory,
    IDesktopWindowXamlSourceFactory_Vtbl,
    0x7d2db617_14e7_5d49_aeec_ae10887e595d
);
impl windows_core::RuntimeType for IDesktopWindowXamlSourceFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDesktopWindowXamlSourceFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceFactory";
}
pub trait IDesktopWindowXamlSourceFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<DesktopWindowXamlSource>;
}
impl IDesktopWindowXamlSourceFactory_Vtbl {
    pub const fn new<Identity: IDesktopWindowXamlSourceFactory_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CreateInstance<
            Identity: IDesktopWindowXamlSourceFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopWindowXamlSourceFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopWindowXamlSourceFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopWindowXamlSourceFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopWindowXamlSourceFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDesktopWindowXamlSourceGotFocusEventArgs,
    IDesktopWindowXamlSourceGotFocusEventArgs_Vtbl,
    0xcc63d863_2071_5f6b_aef9_c0ba35f3b8df
);
impl windows_core::RuntimeType for IDesktopWindowXamlSourceGotFocusEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDesktopWindowXamlSourceGotFocusEventArgs {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceGotFocusEventArgs";
}
pub trait IDesktopWindowXamlSourceGotFocusEventArgs_Impl: windows_core::IUnknownImpl {
    fn Request(&self) -> windows_core::Result<XamlSourceFocusNavigationRequest>;
}
impl IDesktopWindowXamlSourceGotFocusEventArgs_Vtbl {
    pub const fn new<
        Identity: IDesktopWindowXamlSourceGotFocusEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Request<
            Identity: IDesktopWindowXamlSourceGotFocusEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopWindowXamlSourceGotFocusEventArgs_Impl::Request(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopWindowXamlSourceGotFocusEventArgs,
                OFFSET,
            >(),
            Request: Request::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopWindowXamlSourceGotFocusEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopWindowXamlSourceGotFocusEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Request: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDesktopWindowXamlSourceTakeFocusRequestedEventArgs,
    IDesktopWindowXamlSourceTakeFocusRequestedEventArgs_Vtbl,
    0x4f5a0e2c_4ddc_5c03_939f_6f3bda560363
);
impl windows_core::RuntimeType for IDesktopWindowXamlSourceTakeFocusRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDesktopWindowXamlSourceTakeFocusRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceTakeFocusRequestedEventArgs";
}
pub trait IDesktopWindowXamlSourceTakeFocusRequestedEventArgs_Impl:
    windows_core::IUnknownImpl
{
    fn Request(&self) -> windows_core::Result<XamlSourceFocusNavigationRequest>;
}
impl IDesktopWindowXamlSourceTakeFocusRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: IDesktopWindowXamlSourceTakeFocusRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn Request<
            Identity: IDesktopWindowXamlSourceTakeFocusRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopWindowXamlSourceTakeFocusRequestedEventArgs_Impl::Request(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopWindowXamlSourceTakeFocusRequestedEventArgs,
                OFFSET,
            >(),
            Request: Request::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == & < IDesktopWindowXamlSourceTakeFocusRequestedEventArgs as windows_core::Interface >::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopWindowXamlSourceTakeFocusRequestedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Request: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IElementCompositionPreview,
    IElementCompositionPreview_Vtbl,
    0xc8ad1ef4_a93f_5a25_85bd_7c498d9856d3
);
impl windows_core::RuntimeType for IElementCompositionPreview {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IElementCompositionPreview {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IElementCompositionPreview";
}
pub trait IElementCompositionPreview_Impl: windows_core::IUnknownImpl {}
impl IElementCompositionPreview_Vtbl {
    pub const fn new<Identity: IElementCompositionPreview_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IElementCompositionPreview,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IElementCompositionPreview as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IElementCompositionPreview_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IElementCompositionPreviewStatics,
    IElementCompositionPreviewStatics_Vtbl,
    0x84da5a6c_0cfa_532b_9b15_ccd986374342
);
impl windows_core::RuntimeType for IElementCompositionPreviewStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls"))]
impl windows_core::RuntimeName for IElementCompositionPreviewStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStatics";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls"))]
pub trait IElementCompositionPreviewStatics_Impl: windows_core::IUnknownImpl {
    fn GetElementVisual(
        &self,
        element: windows_core::Ref<'_, super::UIElement>,
    ) -> windows_core::Result<super::super::Composition::Visual>;
    fn GetElementChildVisual(
        &self,
        element: windows_core::Ref<'_, super::UIElement>,
    ) -> windows_core::Result<super::super::Composition::Visual>;
    fn SetElementChildVisual(
        &self,
        element: windows_core::Ref<'_, super::UIElement>,
        visual: windows_core::Ref<'_, super::super::Composition::Visual>,
    ) -> windows_core::Result<()>;
    fn GetScrollViewerManipulationPropertySet(
        &self,
        scrollViewer: windows_core::Ref<'_, super::Controls::ScrollViewer>,
    ) -> windows_core::Result<super::super::Composition::CompositionPropertySet>;
    fn SetImplicitShowAnimation(
        &self,
        element: windows_core::Ref<'_, super::UIElement>,
        animation: windows_core::Ref<'_, super::super::Composition::ICompositionAnimationBase>,
    ) -> windows_core::Result<()>;
    fn SetImplicitHideAnimation(
        &self,
        element: windows_core::Ref<'_, super::UIElement>,
        animation: windows_core::Ref<'_, super::super::Composition::ICompositionAnimationBase>,
    ) -> windows_core::Result<()>;
    fn SetIsTranslationEnabled(
        &self,
        element: windows_core::Ref<'_, super::UIElement>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn GetPointerPositionPropertySet(
        &self,
        targetElement: windows_core::Ref<'_, super::UIElement>,
    ) -> windows_core::Result<super::super::Composition::CompositionPropertySet>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls"))]
impl IElementCompositionPreviewStatics_Vtbl {
    pub const fn new<Identity: IElementCompositionPreviewStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn GetElementVisual<
            Identity: IElementCompositionPreviewStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IElementCompositionPreviewStatics_Impl::GetElementVisual(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetElementChildVisual<
            Identity: IElementCompositionPreviewStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IElementCompositionPreviewStatics_Impl::GetElementChildVisual(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetElementChildVisual<
            Identity: IElementCompositionPreviewStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            visual: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IElementCompositionPreviewStatics_Impl::SetElementChildVisual(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute_copy(&visual),
                )
                .into()
            }
        }
        unsafe extern "system" fn GetScrollViewerManipulationPropertySet<
            Identity: IElementCompositionPreviewStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            scrollviewer: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IElementCompositionPreviewStatics_Impl::GetScrollViewerManipulationPropertySet(
                    this,
                    core::mem::transmute_copy(&scrollviewer),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetImplicitShowAnimation<
            Identity: IElementCompositionPreviewStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            animation: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IElementCompositionPreviewStatics_Impl::SetImplicitShowAnimation(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute_copy(&animation),
                )
                .into()
            }
        }
        unsafe extern "system" fn SetImplicitHideAnimation<
            Identity: IElementCompositionPreviewStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            animation: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IElementCompositionPreviewStatics_Impl::SetImplicitHideAnimation(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute_copy(&animation),
                )
                .into()
            }
        }
        unsafe extern "system" fn SetIsTranslationEnabled<
            Identity: IElementCompositionPreviewStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IElementCompositionPreviewStatics_Impl::SetIsTranslationEnabled(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn GetPointerPositionPropertySet<
            Identity: IElementCompositionPreviewStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            targetelement: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IElementCompositionPreviewStatics_Impl::GetPointerPositionPropertySet(
                    this,
                    core::mem::transmute_copy(&targetelement),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IElementCompositionPreviewStatics,
                OFFSET,
            >(),
            GetElementVisual: GetElementVisual::<Identity, OFFSET>,
            GetElementChildVisual: GetElementChildVisual::<Identity, OFFSET>,
            SetElementChildVisual: SetElementChildVisual::<Identity, OFFSET>,
            GetScrollViewerManipulationPropertySet: GetScrollViewerManipulationPropertySet::<
                Identity,
                OFFSET,
            >,
            SetImplicitShowAnimation: SetImplicitShowAnimation::<Identity, OFFSET>,
            SetImplicitHideAnimation: SetImplicitHideAnimation::<Identity, OFFSET>,
            SetIsTranslationEnabled: SetIsTranslationEnabled::<Identity, OFFSET>,
            GetPointerPositionPropertySet: GetPointerPositionPropertySet::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IElementCompositionPreviewStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IElementCompositionPreviewStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub GetElementVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetElementVisual: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetElementChildVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetElementChildVisual: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetElementChildVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetElementChildVisual: usize,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Controls"))]
    pub GetScrollViewerManipulationPropertySet: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Controls")))]
    GetScrollViewerManipulationPropertySet: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetImplicitShowAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetImplicitShowAnimation: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetImplicitHideAnimation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetImplicitHideAnimation: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetIsTranslationEnabled: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetIsTranslationEnabled: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetPointerPositionPropertySet: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetPointerPositionPropertySet: usize,
}
windows_core::imp::define_interface!(
    IWindowsXamlManager,
    IWindowsXamlManager_Vtbl,
    0x85a2e562_7e8f_5333_a104_a3e672a2ffee
);
impl windows_core::RuntimeType for IWindowsXamlManager {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IWindowsXamlManager {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IWindowsXamlManager";
}
pub trait IWindowsXamlManager_Impl: windows_core::IUnknownImpl {}
impl IWindowsXamlManager_Vtbl {
    pub const fn new<Identity: IWindowsXamlManager_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IWindowsXamlManager, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IWindowsXamlManager as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowsXamlManager_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IWindowsXamlManager2,
    IWindowsXamlManager2_Vtbl,
    0xbd67cff5_b887_56da_b0a2_dad10a6520e9
);
impl windows_core::RuntimeType for IWindowsXamlManager2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IWindowsXamlManager2 {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IWindowsXamlManager2";
}
pub trait IWindowsXamlManager2_Impl: windows_core::IUnknownImpl {
    fn XamlShutdownCompletedOnThread(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                WindowsXamlManager,
                XamlShutdownCompletedOnThreadEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveXamlShutdownCompletedOnThread(&self, token: i64) -> windows_core::Result<()>;
}
impl IWindowsXamlManager2_Vtbl {
    pub const fn new<Identity: IWindowsXamlManager2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn XamlShutdownCompletedOnThread<
            Identity: IWindowsXamlManager2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowsXamlManager2_Impl::XamlShutdownCompletedOnThread(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveXamlShutdownCompletedOnThread<
            Identity: IWindowsXamlManager2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWindowsXamlManager2_Impl::RemoveXamlShutdownCompletedOnThread(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IWindowsXamlManager2, OFFSET>(
            ),
            XamlShutdownCompletedOnThread: XamlShutdownCompletedOnThread::<Identity, OFFSET>,
            RemoveXamlShutdownCompletedOnThread: RemoveXamlShutdownCompletedOnThread::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IWindowsXamlManager2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowsXamlManager2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub XamlShutdownCompletedOnThread: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveXamlShutdownCompletedOnThread:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IWindowsXamlManagerStatics,
    IWindowsXamlManagerStatics_Vtbl,
    0x56cb591d_de97_539f_881d_8ccdc44fa6c4
);
impl windows_core::RuntimeType for IWindowsXamlManagerStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IWindowsXamlManagerStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerStatics";
}
pub trait IWindowsXamlManagerStatics_Impl: windows_core::IUnknownImpl {
    fn InitializeForCurrentThread(&self) -> windows_core::Result<WindowsXamlManager>;
}
impl IWindowsXamlManagerStatics_Vtbl {
    pub const fn new<Identity: IWindowsXamlManagerStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn InitializeForCurrentThread<
            Identity: IWindowsXamlManagerStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowsXamlManagerStatics_Impl::InitializeForCurrentThread(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IWindowsXamlManagerStatics,
                OFFSET,
            >(),
            InitializeForCurrentThread: InitializeForCurrentThread::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IWindowsXamlManagerStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowsXamlManagerStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub InitializeForCurrentThread: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IWindowsXamlManagerStatics2,
    IWindowsXamlManagerStatics2_Vtbl,
    0x1062430e_0898_5240_ba52_89d9225e7e58
);
impl windows_core::RuntimeType for IWindowsXamlManagerStatics2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IWindowsXamlManagerStatics2 {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerStatics2";
}
pub trait IWindowsXamlManagerStatics2_Impl: windows_core::IUnknownImpl {
    fn GetForCurrentThread(&self) -> windows_core::Result<WindowsXamlManager>;
}
impl IWindowsXamlManagerStatics2_Vtbl {
    pub const fn new<Identity: IWindowsXamlManagerStatics2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetForCurrentThread<
            Identity: IWindowsXamlManagerStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowsXamlManagerStatics2_Impl::GetForCurrentThread(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IWindowsXamlManagerStatics2,
                OFFSET,
            >(),
            GetForCurrentThread: GetForCurrentThread::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IWindowsXamlManagerStatics2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowsXamlManagerStatics2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetForCurrentThread: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IXamlShutdownCompletedOnThreadEventArgs,
    IXamlShutdownCompletedOnThreadEventArgs_Vtbl,
    0xaccd20e5_3576_5262_a3dd_990657681f1f
);
impl windows_core::RuntimeType for IXamlShutdownCompletedOnThreadEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IXamlShutdownCompletedOnThreadEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IXamlShutdownCompletedOnThreadEventArgs";
}
pub trait IXamlShutdownCompletedOnThreadEventArgs_Impl: windows_core::IUnknownImpl {
    fn GetDispatcherQueueDeferral(&self) -> windows_core::Result<windows::Foundation::Deferral>;
}
impl IXamlShutdownCompletedOnThreadEventArgs_Vtbl {
    pub const fn new<
        Identity: IXamlShutdownCompletedOnThreadEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn GetDispatcherQueueDeferral<
            Identity: IXamlShutdownCompletedOnThreadEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IXamlShutdownCompletedOnThreadEventArgs_Impl::GetDispatcherQueueDeferral(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IXamlShutdownCompletedOnThreadEventArgs,
                OFFSET,
            >(),
            GetDispatcherQueueDeferral: GetDispatcherQueueDeferral::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IXamlShutdownCompletedOnThreadEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlShutdownCompletedOnThreadEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetDispatcherQueueDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IXamlSourceFocusNavigationRequest,
    IXamlSourceFocusNavigationRequest_Vtbl,
    0xc883ea8b_4ce2_58be_b547_66dedf620312
);
impl windows_core::RuntimeType for IXamlSourceFocusNavigationRequest {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IXamlSourceFocusNavigationRequest {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest";
}
pub trait IXamlSourceFocusNavigationRequest_Impl: windows_core::IUnknownImpl {
    fn Reason(&self) -> windows_core::Result<XamlSourceFocusNavigationReason>;
    fn HintRect(&self) -> windows_core::Result<windows::Foundation::Rect>;
    fn CorrelationId(&self) -> windows_core::Result<windows_core::GUID>;
}
impl IXamlSourceFocusNavigationRequest_Vtbl {
    pub const fn new<Identity: IXamlSourceFocusNavigationRequest_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn Reason<
            Identity: IXamlSourceFocusNavigationRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut XamlSourceFocusNavigationReason,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IXamlSourceFocusNavigationRequest_Impl::Reason(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HintRect<
            Identity: IXamlSourceFocusNavigationRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IXamlSourceFocusNavigationRequest_Impl::HintRect(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CorrelationId<
            Identity: IXamlSourceFocusNavigationRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_core::GUID,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IXamlSourceFocusNavigationRequest_Impl::CorrelationId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IXamlSourceFocusNavigationRequest,
                OFFSET,
            >(),
            Reason: Reason::<Identity, OFFSET>,
            HintRect: HintRect::<Identity, OFFSET>,
            CorrelationId: CorrelationId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IXamlSourceFocusNavigationRequest as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlSourceFocusNavigationRequest_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Reason: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut XamlSourceFocusNavigationReason,
    ) -> windows_core::HRESULT,
    pub HintRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub CorrelationId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_core::GUID,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IXamlSourceFocusNavigationRequestFactory,
    IXamlSourceFocusNavigationRequestFactory_Vtbl,
    0x7a5124dd_2876_5ed8_b564_5867731d7f1e
);
impl windows_core::RuntimeType for IXamlSourceFocusNavigationRequestFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IXamlSourceFocusNavigationRequestFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestFactory";
}
pub trait IXamlSourceFocusNavigationRequestFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        reason: XamlSourceFocusNavigationReason,
    ) -> windows_core::Result<XamlSourceFocusNavigationRequest>;
    fn CreateInstanceWithHintRect(
        &self,
        reason: XamlSourceFocusNavigationReason,
        hintRect: &windows::Foundation::Rect,
    ) -> windows_core::Result<XamlSourceFocusNavigationRequest>;
    fn CreateInstanceWithHintRectAndCorrelationId(
        &self,
        reason: XamlSourceFocusNavigationReason,
        hintRect: &windows::Foundation::Rect,
        correlationId: &windows_core::GUID,
    ) -> windows_core::Result<XamlSourceFocusNavigationRequest>;
}
impl IXamlSourceFocusNavigationRequestFactory_Vtbl {
    pub const fn new<
        Identity: IXamlSourceFocusNavigationRequestFactory_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IXamlSourceFocusNavigationRequestFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            reason: XamlSourceFocusNavigationReason,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IXamlSourceFocusNavigationRequestFactory_Impl::CreateInstance(this, reason) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateInstanceWithHintRect<
            Identity: IXamlSourceFocusNavigationRequestFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            reason: XamlSourceFocusNavigationReason,
            hintrect: windows::Foundation::Rect,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IXamlSourceFocusNavigationRequestFactory_Impl::CreateInstanceWithHintRect(
                    this,
                    reason,
                    core::mem::transmute(&hintrect),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateInstanceWithHintRectAndCorrelationId<
            Identity: IXamlSourceFocusNavigationRequestFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            reason: XamlSourceFocusNavigationReason,
            hintrect: windows::Foundation::Rect,
            correlationid: windows_core::GUID,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IXamlSourceFocusNavigationRequestFactory_Impl:: CreateInstanceWithHintRectAndCorrelationId ( this , reason , core::mem::transmute ( & hintrect ) , core::mem::transmute ( & correlationid ) , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ; core::mem::forget ( ok__ ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IXamlSourceFocusNavigationRequestFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
            CreateInstanceWithHintRect: CreateInstanceWithHintRect::<Identity, OFFSET>,
            CreateInstanceWithHintRectAndCorrelationId: CreateInstanceWithHintRectAndCorrelationId::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IXamlSourceFocusNavigationRequestFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlSourceFocusNavigationRequestFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        XamlSourceFocusNavigationReason,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateInstanceWithHintRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        XamlSourceFocusNavigationReason,
        windows::Foundation::Rect,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateInstanceWithHintRectAndCorrelationId:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            XamlSourceFocusNavigationReason,
            windows::Foundation::Rect,
            windows_core::GUID,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IXamlSourceFocusNavigationResult,
    IXamlSourceFocusNavigationResult_Vtbl,
    0xd6bf378e_2aac_5e5b_ac8a_6c5d9a4c1cb8
);
impl windows_core::RuntimeType for IXamlSourceFocusNavigationResult {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IXamlSourceFocusNavigationResult {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResult";
}
pub trait IXamlSourceFocusNavigationResult_Impl: windows_core::IUnknownImpl {
    fn WasFocusMoved(&self) -> windows_core::Result<bool>;
}
impl IXamlSourceFocusNavigationResult_Vtbl {
    pub const fn new<Identity: IXamlSourceFocusNavigationResult_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn WasFocusMoved<
            Identity: IXamlSourceFocusNavigationResult_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IXamlSourceFocusNavigationResult_Impl::WasFocusMoved(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IXamlSourceFocusNavigationResult,
                OFFSET,
            >(),
            WasFocusMoved: WasFocusMoved::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IXamlSourceFocusNavigationResult as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlSourceFocusNavigationResult_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub WasFocusMoved:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IXamlSourceFocusNavigationResultFactory,
    IXamlSourceFocusNavigationResultFactory_Vtbl,
    0xf533f53b_5c00_5c88_9a41_3888cb86e495
);
impl windows_core::RuntimeType for IXamlSourceFocusNavigationResultFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IXamlSourceFocusNavigationResultFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResultFactory";
}
pub trait IXamlSourceFocusNavigationResultFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        focusMoved: bool,
    ) -> windows_core::Result<XamlSourceFocusNavigationResult>;
}
impl IXamlSourceFocusNavigationResultFactory_Vtbl {
    pub const fn new<
        Identity: IXamlSourceFocusNavigationResultFactory_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IXamlSourceFocusNavigationResultFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            focusmoved: bool,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IXamlSourceFocusNavigationResultFactory_Impl::CreateInstance(this, focusmoved)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IXamlSourceFocusNavigationResultFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IXamlSourceFocusNavigationResultFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlSourceFocusNavigationResultFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        bool,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct WindowsXamlManager(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    WindowsXamlManager,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(WindowsXamlManager, windows::Foundation::IClosable);
impl WindowsXamlManager {
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn XamlShutdownCompletedOnThread<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                WindowsXamlManager,
                XamlShutdownCompletedOnThreadEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<IWindowsXamlManager2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlShutdownCompletedOnThread)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveXamlShutdownCompletedOnThread(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IWindowsXamlManager2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveXamlShutdownCompletedOnThread)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn InitializeForCurrentThread() -> windows_core::Result<WindowsXamlManager> {
        Self::IWindowsXamlManagerStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InitializeForCurrentThread)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetForCurrentThread() -> windows_core::Result<WindowsXamlManager> {
        Self::IWindowsXamlManagerStatics2(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetForCurrentThread)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IWindowsXamlManagerStatics<
        R,
        F: FnOnce(&IWindowsXamlManagerStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            WindowsXamlManager,
            IWindowsXamlManagerStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IWindowsXamlManagerStatics2<
        R,
        F: FnOnce(&IWindowsXamlManagerStatics2) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            WindowsXamlManager,
            IWindowsXamlManagerStatics2,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for WindowsXamlManager {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IWindowsXamlManager>();
}
unsafe impl windows_core::Interface for WindowsXamlManager {
    type Vtable = <IWindowsXamlManager as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IWindowsXamlManager as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for WindowsXamlManager {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.WindowsXamlManager";
}
unsafe impl Send for WindowsXamlManager {}
unsafe impl Sync for WindowsXamlManager {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct XamlShutdownCompletedOnThreadEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    XamlShutdownCompletedOnThreadEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl XamlShutdownCompletedOnThreadEventArgs {
    pub fn GetDispatcherQueueDeferral(
        &self,
    ) -> windows_core::Result<windows::Foundation::Deferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDispatcherQueueDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for XamlShutdownCompletedOnThreadEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IXamlShutdownCompletedOnThreadEventArgs>(
        );
}
unsafe impl windows_core::Interface for XamlShutdownCompletedOnThreadEventArgs {
    type Vtable = <IXamlShutdownCompletedOnThreadEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IXamlShutdownCompletedOnThreadEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for XamlShutdownCompletedOnThreadEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs";
}
unsafe impl Send for XamlShutdownCompletedOnThreadEventArgs {}
unsafe impl Sync for XamlShutdownCompletedOnThreadEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct XamlSourceFocusNavigationReason(pub i32);
impl XamlSourceFocusNavigationReason {
    pub const Programmatic: Self = Self(0i32);
    pub const Restore: Self = Self(1i32);
    pub const First: Self = Self(3i32);
    pub const Last: Self = Self(4i32);
    pub const Left: Self = Self(7i32);
    pub const Up: Self = Self(8i32);
    pub const Right: Self = Self(9i32);
    pub const Down: Self = Self(10i32);
}
impl windows_core::TypeKind for XamlSourceFocusNavigationReason {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for XamlSourceFocusNavigationReason {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct XamlSourceFocusNavigationRequest(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    XamlSourceFocusNavigationRequest,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl XamlSourceFocusNavigationRequest {
    pub fn Reason(&self) -> windows_core::Result<XamlSourceFocusNavigationReason> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Reason)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn HintRect(&self) -> windows_core::Result<windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HintRect)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CorrelationId(&self) -> windows_core::Result<windows_core::GUID> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CorrelationId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CreateInstance(
        reason: XamlSourceFocusNavigationReason,
    ) -> windows_core::Result<XamlSourceFocusNavigationRequest> {
        Self::IXamlSourceFocusNavigationRequestFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                reason,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateInstanceWithHintRect(
        reason: XamlSourceFocusNavigationReason,
        hintrect: windows::Foundation::Rect,
    ) -> windows_core::Result<XamlSourceFocusNavigationRequest> {
        Self::IXamlSourceFocusNavigationRequestFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstanceWithHintRect)(
                windows_core::Interface::as_raw(this),
                reason,
                hintrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateInstanceWithHintRectAndCorrelationId(
        reason: XamlSourceFocusNavigationReason,
        hintrect: windows::Foundation::Rect,
        correlationid: windows_core::GUID,
    ) -> windows_core::Result<XamlSourceFocusNavigationRequest> {
        Self::IXamlSourceFocusNavigationRequestFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstanceWithHintRectAndCorrelationId)(
                windows_core::Interface::as_raw(this),
                reason,
                hintrect,
                correlationid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IXamlSourceFocusNavigationRequestFactory<
        R,
        F: FnOnce(&IXamlSourceFocusNavigationRequestFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            XamlSourceFocusNavigationRequest,
            IXamlSourceFocusNavigationRequestFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for XamlSourceFocusNavigationRequest {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IXamlSourceFocusNavigationRequest>();
}
unsafe impl windows_core::Interface for XamlSourceFocusNavigationRequest {
    type Vtable = <IXamlSourceFocusNavigationRequest as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IXamlSourceFocusNavigationRequest as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for XamlSourceFocusNavigationRequest {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest";
}
unsafe impl Send for XamlSourceFocusNavigationRequest {}
unsafe impl Sync for XamlSourceFocusNavigationRequest {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct XamlSourceFocusNavigationResult(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    XamlSourceFocusNavigationResult,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl XamlSourceFocusNavigationResult {
    pub fn WasFocusMoved(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WasFocusMoved)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CreateInstance(
        focusmoved: bool,
    ) -> windows_core::Result<XamlSourceFocusNavigationResult> {
        Self::IXamlSourceFocusNavigationResultFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                focusmoved,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IXamlSourceFocusNavigationResultFactory<
        R,
        F: FnOnce(&IXamlSourceFocusNavigationResultFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            XamlSourceFocusNavigationResult,
            IXamlSourceFocusNavigationResultFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for XamlSourceFocusNavigationResult {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IXamlSourceFocusNavigationResult>();
}
unsafe impl windows_core::Interface for XamlSourceFocusNavigationResult {
    type Vtable = <IXamlSourceFocusNavigationResult as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IXamlSourceFocusNavigationResult as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for XamlSourceFocusNavigationResult {
    const NAME: &'static str = "Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult";
}
unsafe impl Send for XamlSourceFocusNavigationResult {}
unsafe impl Sync for XamlSourceFocusNavigationResult {}
