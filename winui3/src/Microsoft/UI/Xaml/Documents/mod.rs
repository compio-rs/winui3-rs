// Bindings generated by `windows-bindgen` 0.61.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Block(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(Block, windows_core::IUnknown, windows_core::IInspectable);
windows_core::imp::required_hierarchy!(Block, TextElement, super::DependencyObject);
impl Block {
    pub fn TextAlignment(&self) -> windows_core::Result<super::TextAlignment> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextAlignment(&self, value: super::TextAlignment) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalTextAlignment(&self) -> windows_core::Result<super::TextAlignment> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalTextAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalTextAlignment(
        &self,
        value: super::TextAlignment,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalTextAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LineHeight(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LineHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLineHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLineHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LineStackingStrategy(&self) -> windows_core::Result<super::LineStackingStrategy> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LineStackingStrategy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLineStackingStrategy(
        &self,
        value: super::LineStackingStrategy,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLineStackingStrategy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Margin(&self) -> windows_core::Result<super::Thickness> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Margin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMargin(&self, value: super::Thickness) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetMargin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<Block> {
        Self::IBlockFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn TextAlignmentProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IBlockStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextAlignmentProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn HorizontalTextAlignmentProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IBlockStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalTextAlignmentProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn LineHeightProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IBlockStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LineHeightProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn LineStackingStrategyProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IBlockStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LineStackingStrategyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn MarginProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IBlockStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MarginProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    fn IBlockFactory<R, F: FnOnce(&IBlockFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Block, IBlockFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IBlockStatics<R, F: FnOnce(&IBlockStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Block, IBlockStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Block {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBlock>();
}
unsafe impl windows_core::Interface for Block {
    type Vtable = <IBlock as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBlock as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Block {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.Block";
}
unsafe impl Send for Block {}
unsafe impl Sync for Block {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BlockCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BlockCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<Block>
);
windows_core::imp::required_hierarchy!(BlockCollection, windows_collections::IIterable<Block>);
impl BlockCollection {
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<Block>> {
        let this = &windows_core::Interface::cast::<windows_collections::IIterable<Block>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<Block> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(&self) -> windows_core::Result<windows_collections::IVectorView<Block>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<Block>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<Block>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<Block>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Block>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<Block>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<Block>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for BlockCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, windows_collections::IVector<Block>>();
}
unsafe impl windows_core::Interface for BlockCollection {
    type Vtable = <windows_collections::IVector<Block> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<Block> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BlockCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.BlockCollection";
}
unsafe impl Send for BlockCollection {}
unsafe impl Sync for BlockCollection {}
impl IntoIterator for BlockCollection {
    type Item = Block;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &BlockCollection {
    type Item = Block;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Bold(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(Bold, windows_core::IUnknown, windows_core::IInspectable);
windows_core::imp::required_hierarchy!(Bold, Span, Inline, TextElement, super::DependencyObject);
impl Bold {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Bold, windows_core::imp::IGenericFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Inlines(&self) -> windows_core::Result<InlineCollection> {
        let this = &windows_core::Interface::cast::<ISpan>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Inlines)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInlines<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InlineCollection>,
    {
        let this = &windows_core::Interface::cast::<ISpan>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInlines)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for Bold {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBold>();
}
unsafe impl windows_core::Interface for Bold {
    type Vtable = <IBold as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBold as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Bold {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.Bold";
}
unsafe impl Send for Bold {}
unsafe impl Sync for Bold {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Glyphs(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(Glyphs, windows_core::IUnknown, windows_core::IInspectable);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    Glyphs,
    super::super::Composition::IAnimationObject,
    super::super::Composition::IVisualElement,
    super::super::Composition::IVisualElement2,
    super::FrameworkElement,
    super::UIElement,
    super::DependencyObject
);
#[cfg(feature = "UI_Composition")]
impl Glyphs {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Glyphs, windows_core::imp::IGenericFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn PopulatePropertyInfo<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        propertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::super::Composition::AnimationPropertyInfo>,
    {
        let this =
            &windows_core::Interface::cast::<super::super::Composition::IAnimationObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                propertyinfo.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Triggers(&self) -> windows_core::Result<super::TriggerCollection> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Triggers)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Resources(&self) -> windows_core::Result<super::ResourceDictionary> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Resources)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ResourceDictionary>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetResources)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTag)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Width(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Width)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Height)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxWidth)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxWidth)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMinHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMaxHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> windows_core::Result<super::HorizontalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> windows_core::Result<super::VerticalAlignment> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerticalAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Margin(&self) -> windows_core::Result<super::Thickness> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Margin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMargin(&self, value: super::Thickness) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMargin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetName(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn BaseUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BaseUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DataContext(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDataContext)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FocusVisualMargin(&self) -> windows_core::Result<super::Thickness> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FocusVisualMargin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFocusVisualMargin(&self, value: super::Thickness) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFocusVisualMargin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FocusVisualSecondaryThickness(&self) -> windows_core::Result<super::Thickness> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FocusVisualSecondaryThickness)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFocusVisualSecondaryThickness(
        &self,
        value: super::Thickness,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFocusVisualSecondaryThickness)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FocusVisualPrimaryThickness(&self) -> windows_core::Result<super::Thickness> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FocusVisualPrimaryThickness)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFocusVisualPrimaryThickness(
        &self,
        value: super::Thickness,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFocusVisualPrimaryThickness)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualSecondaryBrush(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FocusVisualSecondaryBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualSecondaryBrush<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFocusVisualSecondaryBrush)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualPrimaryBrush(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FocusVisualPrimaryBrush)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualPrimaryBrush<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFocusVisualPrimaryBrush)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Style(&self) -> windows_core::Result<super::Style> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Style)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetStyle<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Style>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetStyle)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FlowDirection(&self) -> windows_core::Result<super::FlowDirection> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FlowDirection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFlowDirection(&self, value: super::FlowDirection) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFlowDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RequestedTheme(&self) -> windows_core::Result<super::ElementTheme> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestedTheme)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRequestedTheme(&self, value: super::ElementTheme) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRequestedTheme)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsLoaded(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsLoaded)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualTheme(&self) -> windows_core::Result<super::ElementTheme> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualTheme)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Loaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Unloaded<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Unloaded)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveUnloaded(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveUnloaded)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DataContextChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DataContextChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDataContextChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn SizeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::SizeChangedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SizeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveSizeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSizeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LayoutUpdated<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<windows::Foundation::EventHandler<windows_core::IInspectable>>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutUpdated)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLayoutUpdated(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Loading<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Loading)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLoading(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLoading)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualThemeChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                windows_core::IInspectable,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveActualThemeChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn EffectiveViewportChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveEffectiveViewportChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn SetBinding<P0, P1>(&self, dp: P0, binding: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::Data::BindingBase>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetBinding)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                binding.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn GetBindingExpression<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<super::Data::BindingExpression>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetBindingExpression)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn MeasureOverride(
        &self,
        availablesize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MeasureOverride)(
                windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ArrangeOverride(
        &self,
        finalsize: windows::Foundation::Size,
    ) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ArrangeOverride)(
                windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnApplyTemplate)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &windows_core::HSTRING,
        usetransitions: bool,
    ) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GoToElementStateCore)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InvalidateViewport(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateViewport)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UnicodeString(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UnicodeString)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetUnicodeString(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetUnicodeString)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Indices(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Indices)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetIndices(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIndices)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn FontUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetFontUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StyleSimulations(&self) -> windows_core::Result<super::Media::StyleSimulations> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StyleSimulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStyleSimulations(
        &self,
        value: super::Media::StyleSimulations,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetStyleSimulations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontRenderingEmSize(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontRenderingEmSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontRenderingEmSize(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontRenderingEmSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OriginX(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OriginX)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOriginX(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOriginX)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OriginY(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OriginY)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOriginY(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOriginY)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Fill(&self) -> windows_core::Result<super::Media::Brush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Fill)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFill<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFill)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsColorFontEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsColorFontEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsColorFontEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsColorFontEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ColorFontPaletteIndex(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColorFontPaletteIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetColorFontPaletteIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetColorFontPaletteIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn UnicodeStringProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IGlyphsStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UnicodeStringProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IndicesProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IGlyphsStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndicesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FontUriProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IGlyphsStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontUriProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn StyleSimulationsProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IGlyphsStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StyleSimulationsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FontRenderingEmSizeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IGlyphsStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontRenderingEmSizeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OriginXProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IGlyphsStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OriginXProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OriginYProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IGlyphsStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OriginYProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FillProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IGlyphsStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsColorFontEnabledProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IGlyphsStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsColorFontEnabledProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ColorFontPaletteIndexProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IGlyphsStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColorFontPaletteIndexProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DesiredSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DesiredSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AllowDrop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowDrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowDrop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Opacity)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacity)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Clip(&self) -> windows_core::Result<super::Media::RectangleGeometry> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Clip)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetClip<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::RectangleGeometry>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetClip)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn RenderTransform(&self) -> windows_core::Result<super::Media::Transform> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransform)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetRenderTransform<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Transform>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransform)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Projection(&self) -> windows_core::Result<super::Media::Projection> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Projection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetProjection<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Projection>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetProjection)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn Transform3D(&self) -> windows_core::Result<super::Media::Media3D::Transform3D> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Transform3D)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn SetTransform3D<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Media3D::Transform3D>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransform3D)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RenderTransformOrigin(&self) -> windows_core::Result<windows::Foundation::Point> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRenderTransformOrigin(
        &self,
        value: windows::Foundation::Point,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> windows_core::Result<super::Visibility> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Visibility)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetVisibility(&self, value: super::Visibility) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisibility)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RenderSize(&self) -> windows_core::Result<windows::Foundation::Size> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RenderSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn Transitions(
        &self,
    ) -> windows_core::Result<super::Media::Animation::TransitionCollection> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Transitions)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn SetTransitions<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Animation::TransitionCollection>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransitions)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CacheMode(&self) -> windows_core::Result<super::Media::CacheMode> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CacheMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCacheMode<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::CacheMode>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCacheMode)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanDrag)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanDrag)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationMode(&self) -> windows_core::Result<super::Input::ManipulationModes> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ManipulationMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetManipulationMode(
        &self,
        value: super::Input::ManipulationModes,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetManipulationMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> windows_core::Result<windows_collections::IVectorView<super::Input::Pointer>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptures)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContextFlyout(&self) -> windows_core::Result<super::Controls::Primitives::FlyoutBase> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextFlyout)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContextFlyout<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Controls::Primitives::FlyoutBase>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetContextFlyout)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CompositeMode(&self) -> windows_core::Result<super::Media::ElementCompositeMode> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompositeMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCompositeMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Lights(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<super::Media::XamlLight>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Lights)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CanBeScrollAnchor(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusKeyboardNavigation(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusKeyboardNavigationMode> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusKeyboardNavigation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusKeyboardNavigation(
        &self,
        value: super::Input::XYFocusKeyboardNavigationMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusKeyboardNavigation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusUpNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUpNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusUpNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUpNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusDownNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDownNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusDownNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDownNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeftNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeftNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusRightNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRightNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusRightNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRightNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAccelerators(
        &self,
    ) -> windows_core::Result<windows_collections::IVector<super::Input::KeyboardAccelerator>> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAcceleratorPlacementMode(
        &self,
    ) -> windows_core::Result<super::Input::KeyboardAcceleratorPlacementMode> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyboardAcceleratorPlacementMode(
        &self,
        value: super::Input::KeyboardAcceleratorPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HighContrastAdjustment(
        &self,
    ) -> windows_core::Result<super::ElementHighContrastAdjustment> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HighContrastAdjustment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHighContrastAdjustment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TabFocusNavigation(&self) -> windows_core::Result<super::Input::KeyboardNavigationMode> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabFocusNavigation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetTabFocusNavigation(
        &self,
        value: super::Input::KeyboardNavigationMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabFocusNavigation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OpacityTransition(&self) -> windows_core::Result<super::ScalarTransition> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OpacityTransition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetOpacityTransition<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ScalarTransition>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOpacityTransition)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Translation(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Translation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTranslation(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TranslationTransition(&self) -> windows_core::Result<super::Vector3Transition> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TranslationTransition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetTranslationTransition<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Vector3Transition>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTranslationTransition)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Rotation)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotation)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationTransition(&self) -> windows_core::Result<super::ScalarTransition> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationTransition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetRotationTransition<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::ScalarTransition>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationTransition)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetScale(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScaleTransition(&self) -> windows_core::Result<super::Vector3Transition> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ScaleTransition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetScaleTransition<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Vector3Transition>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetScaleTransition)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn TransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CenterPoint)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCenterPoint(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCenterPoint)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RotationAxis)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRotationAxis(&self, value: windows_numerics::Vector3) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRotationAxis)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ActualOffset(&self) -> windows_core::Result<windows_numerics::Vector3> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Shadow(&self) -> windows_core::Result<super::Media::Shadow> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Shadow)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetShadow<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Shadow>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetShadow)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FocusState(&self) -> windows_core::Result<super::FocusState> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FocusState)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyUp<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::KeyEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyUp)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyDown<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::KeyEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyDown)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DragStarting<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::DragStartingEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DragStarting)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDragStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DropCompleted<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::DropCompletedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DropCompleted)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDropCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDropCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CharacterReceived<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::CharacterReceivedRoutedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterReceived)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveCharacterReceived(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DragEnter<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DragEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DragEnter)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDragEnter(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragEnter)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DragLeave<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DragEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DragLeave)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDragLeave(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragLeave)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DragOver<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DragEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DragOver)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDragOver(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDragOver)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Drop<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DragEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Drop)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDrop(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDrop)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerPressed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerPressed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerPressed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerMoved)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerMoved(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerMoved)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerReleased)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerReleased(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerReleased)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerEntered)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerEntered(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerEntered)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerExited)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerExited(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerExited)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCaptureLost(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::PointerEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePointerWheelChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Tapped<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::TappedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Tapped)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn DoubleTapped<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::DoubleTappedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DoubleTapped)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveDoubleTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Holding<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::HoldingEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Holding)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveHolding(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHolding)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ContextRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ContextRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ContextCanceled<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextCanceled)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveContextCanceled(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveContextCanceled)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn RightTapped<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::RightTappedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RightTapped)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveRightTapped(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRightTapped)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarting<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::ManipulationStartingEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ManipulationStarting)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveManipulationStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationInertiaStarting<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::ManipulationInertiaStartingEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveManipulationInertiaStarting(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarted<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::ManipulationStartedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ManipulationStarted)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveManipulationStarted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationDelta<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::ManipulationDeltaEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ManipulationDelta)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveManipulationDelta(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationCompleted<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::ManipulationCompletedEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveManipulationCompleted(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ProcessKeyboardAccelerators<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ProcessKeyboardAcceleratorEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveProcessKeyboardAccelerators(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn GettingFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::GettingFocusEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GettingFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGettingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGettingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn LosingFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::LosingFocusEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LosingFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLosingFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLosingFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn NoFocusCandidateFound<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::NoFocusCandidateFoundEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNoFocusCandidateFound(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyDown<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::KeyEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePreviewKeyDown(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyUp<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::Input::KeyEventHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePreviewKeyUp(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn BringIntoViewRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveBringIntoViewRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Measure(&self, availablesize: windows::Foundation::Size) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Measure)(
                windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    pub fn Arrange(&self, finalrect: windows::Foundation::Rect) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Arrange)(
                windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapturePointer)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::Pointer>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCapture)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn AddHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
        handledeventstoo: bool,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEvent>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).AddHandler)(
                windows_core::Interface::as_raw(this),
                routedevent.param().abi(),
                handler.param().abi(),
                handledeventstoo,
            )
            .ok()
        }
    }
    pub fn RemoveHandler<P0, P1>(&self, routedevent: P0, handler: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::RoutedEvent>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveHandler)(
                windows_core::Interface::as_raw(this),
                routedevent.param().abi(),
                handler.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn TransformToVisual<P0>(
        &self,
        visual: P0,
    ) -> windows_core::Result<super::Media::GeneralTransform>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TransformToVisual)(
                windows_core::Interface::as_raw(this),
                visual.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn InvalidateMeasure(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateMeasure)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).InvalidateArrange)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UpdateLayout)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CancelDirectManipulations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> windows_core::Result<
        windows_future::IAsyncOperation<
            windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: windows_core::Param<super::super::Input::PointerPoint>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StartDragAsync)(
                windows_core::Interface::as_raw(this),
                pointerpoint.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn StartBringIntoView(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoView)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn StartBringIntoViewWithOptions<P0>(&self, options: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::BringIntoViewOptions>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartBringIntoViewWithOptions)(
                windows_core::Interface::as_raw(this),
                options.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TryInvokeKeyboardAccelerator<P0>(&self, args: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::ProcessKeyboardAcceleratorEventArgs>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).TryInvokeKeyboardAccelerator)(
                windows_core::Interface::as_raw(this),
                args.param().abi(),
            )
            .ok()
        }
    }
    pub fn Focus(&self, value: super::FocusState) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Focus)(
                windows_core::Interface::as_raw(this),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn StartAnimation<P0>(&self, animation: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::Composition::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StartAnimation)(
                windows_core::Interface::as_raw(this),
                animation.param().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation<P0>(&self, animation: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::Composition::ICompositionAnimationBase>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).StopAnimation)(
                windows_core::Interface::as_raw(this),
                animation.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub fn OnCreateAutomationPeer(
        &self,
    ) -> windows_core::Result<super::Automation::Peers::AutomationPeer> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OnCreateAutomationPeer)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: windows::Foundation::Point,
        boundingrect: windows::Foundation::Rect,
    ) -> windows_core::Result<
        windows_collections::IIterable<windows_collections::IIterable<windows::Foundation::Point>>,
    > {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<super::DependencyObject>> {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnKeyboardAcceleratorInvoked<P0>(&self, args: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::KeyboardAcceleratorInvokedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnKeyboardAcceleratorInvoked)(
                windows_core::Interface::as_raw(this),
                args.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn OnProcessKeyboardAccelerators<P0>(&self, args: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Input::ProcessKeyboardAcceleratorEventArgs>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnProcessKeyboardAccelerators)(
                windows_core::Interface::as_raw(this),
                args.param().abi(),
            )
            .ok()
        }
    }
    pub fn OnBringIntoViewRequested<P0>(&self, e: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::BringIntoViewRequestedEventArgs>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnBringIntoViewRequested)(
                windows_core::Interface::as_raw(this),
                e.param().abi(),
            )
            .ok()
        }
    }
    pub fn PopulatePropertyInfoOverride<P1>(
        &self,
        propertyname: &windows_core::HSTRING,
        animationpropertyinfo: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<super::super::Composition::AnimationPropertyInfo>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).PopulatePropertyInfoOverride)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(propertyname),
                animationpropertyinfo.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn ProtectedCursor(&self) -> windows_core::Result<super::super::Input::InputCursor> {
        let this = &windows_core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProtectedCursor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Input")]
    pub fn SetProtectedCursor<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::Input::InputCursor>,
    {
        let this = &windows_core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetProtectedCursor)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn GetVisualInternal(&self) -> windows_core::Result<super::super::Composition::Visual> {
        let this =
            &windows_core::Interface::cast::<super::super::Composition::IVisualElement2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetVisualInternal)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IGlyphsStatics<R, F: FnOnce(&IGlyphsStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Glyphs, IGlyphsStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for Glyphs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IGlyphs>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for Glyphs {
    type Vtable = <IGlyphs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IGlyphs as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for Glyphs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.Glyphs";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for Glyphs {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for Glyphs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Hyperlink(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Hyperlink,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    Hyperlink,
    Span,
    Inline,
    TextElement,
    super::DependencyObject
);
impl Hyperlink {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            Hyperlink,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn NavigateUri(&self) -> windows_core::Result<windows::Foundation::Uri> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigateUri)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetNavigateUri<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetNavigateUri)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn UnderlineStyle(&self) -> windows_core::Result<UnderlineStyle> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UnderlineStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetUnderlineStyle(&self, value: UnderlineStyle) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetUnderlineStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeft)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeft)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRight)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUp)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUp)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDown)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDown)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ElementSoundMode(&self) -> windows_core::Result<super::ElementSoundMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementSoundMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetElementSoundMode(&self, value: super::ElementSoundMode) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetElementSoundMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FocusState(&self) -> windows_core::Result<super::FocusState> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FocusState)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusUpNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUpNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusUpNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusUpNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusDownNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDownNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusDownNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusDownNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeftNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusLeftNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusRightNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRightNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusRightNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetXYFocusRightNavigationStrategy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTabStop)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndex)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTabIndex)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Click<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<Hyperlink, HyperlinkClickEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Click)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClick(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClick)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn GotFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GotFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveGotFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LostFocus<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LostFocus)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveLostFocus)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Focus(&self, value: super::FocusState) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Focus)(
                windows_core::Interface::as_raw(this),
                value,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn NavigateUriProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigateUriProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn UnderlineStyleProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).UnderlineStyleProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn XYFocusLeftProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeftProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn XYFocusRightProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRightProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn XYFocusUpProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUpProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn XYFocusDownProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDownProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ElementSoundModeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementSoundModeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FocusStateProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FocusStateProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn XYFocusUpNavigationStrategyProperty() -> windows_core::Result<super::DependencyProperty>
    {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusUpNavigationStrategyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn XYFocusDownNavigationStrategyProperty() -> windows_core::Result<super::DependencyProperty>
    {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusDownNavigationStrategyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn XYFocusLeftNavigationStrategyProperty() -> windows_core::Result<super::DependencyProperty>
    {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusLeftNavigationStrategyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn XYFocusRightNavigationStrategyProperty(
    ) -> windows_core::Result<super::DependencyProperty> {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XYFocusRightNavigationStrategyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsTabStopProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTabStopProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn TabIndexProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IHyperlinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TabIndexProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Inlines(&self) -> windows_core::Result<InlineCollection> {
        let this = &windows_core::Interface::cast::<ISpan>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Inlines)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInlines<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InlineCollection>,
    {
        let this = &windows_core::Interface::cast::<ISpan>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInlines)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    fn IHyperlinkStatics<R, F: FnOnce(&IHyperlinkStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Hyperlink, IHyperlinkStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Hyperlink {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IHyperlink>();
}
unsafe impl windows_core::Interface for Hyperlink {
    type Vtable = <IHyperlink as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IHyperlink as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Hyperlink {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.Hyperlink";
}
unsafe impl Send for Hyperlink {}
unsafe impl Sync for Hyperlink {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct HyperlinkClickEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    HyperlinkClickEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(HyperlinkClickEventArgs, super::RoutedEventArgs);
impl HyperlinkClickEventArgs {
    pub fn OriginalSource(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<super::IRoutedEventArgs>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OriginalSource)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for HyperlinkClickEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IHyperlinkClickEventArgs>();
}
unsafe impl windows_core::Interface for HyperlinkClickEventArgs {
    type Vtable = <IHyperlinkClickEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IHyperlinkClickEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for HyperlinkClickEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.HyperlinkClickEventArgs";
}
unsafe impl Send for HyperlinkClickEventArgs {}
unsafe impl Sync for HyperlinkClickEventArgs {}
windows_core::imp::define_interface!(IBlock, IBlock_Vtbl, 0x8149d507_672f_5fd5_a10a_351389ba9659);
impl windows_core::RuntimeType for IBlock {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBlock {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IBlock";
}
pub trait IBlock_Impl: windows_core::IUnknownImpl {
    fn TextAlignment(&self) -> windows_core::Result<super::TextAlignment>;
    fn SetTextAlignment(&self, value: super::TextAlignment) -> windows_core::Result<()>;
    fn HorizontalTextAlignment(&self) -> windows_core::Result<super::TextAlignment>;
    fn SetHorizontalTextAlignment(&self, value: super::TextAlignment) -> windows_core::Result<()>;
    fn LineHeight(&self) -> windows_core::Result<f64>;
    fn SetLineHeight(&self, value: f64) -> windows_core::Result<()>;
    fn LineStackingStrategy(&self) -> windows_core::Result<super::LineStackingStrategy>;
    fn SetLineStackingStrategy(
        &self,
        value: super::LineStackingStrategy,
    ) -> windows_core::Result<()>;
    fn Margin(&self) -> windows_core::Result<super::Thickness>;
    fn SetMargin(&self, value: &super::Thickness) -> windows_core::Result<()>;
}
impl IBlock_Vtbl {
    pub const fn new<Identity: IBlock_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TextAlignment<Identity: IBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlock_Impl::TextAlignment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTextAlignment<Identity: IBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBlock_Impl::SetTextAlignment(this, value).into()
            }
        }
        unsafe extern "system" fn HorizontalTextAlignment<
            Identity: IBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlock_Impl::HorizontalTextAlignment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHorizontalTextAlignment<
            Identity: IBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::TextAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBlock_Impl::SetHorizontalTextAlignment(this, value).into()
            }
        }
        unsafe extern "system" fn LineHeight<Identity: IBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlock_Impl::LineHeight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLineHeight<Identity: IBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBlock_Impl::SetLineHeight(this, value).into()
            }
        }
        unsafe extern "system" fn LineStackingStrategy<
            Identity: IBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::LineStackingStrategy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlock_Impl::LineStackingStrategy(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLineStackingStrategy<
            Identity: IBlock_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::LineStackingStrategy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBlock_Impl::SetLineStackingStrategy(this, value).into()
            }
        }
        unsafe extern "system" fn Margin<Identity: IBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut super::Thickness,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlock_Impl::Margin(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMargin<Identity: IBlock_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: super::Thickness,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBlock_Impl::SetMargin(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBlock, OFFSET>(),
            TextAlignment: TextAlignment::<Identity, OFFSET>,
            SetTextAlignment: SetTextAlignment::<Identity, OFFSET>,
            HorizontalTextAlignment: HorizontalTextAlignment::<Identity, OFFSET>,
            SetHorizontalTextAlignment: SetHorizontalTextAlignment::<Identity, OFFSET>,
            LineHeight: LineHeight::<Identity, OFFSET>,
            SetLineHeight: SetLineHeight::<Identity, OFFSET>,
            LineStackingStrategy: LineStackingStrategy::<Identity, OFFSET>,
            SetLineStackingStrategy: SetLineStackingStrategy::<Identity, OFFSET>,
            Margin: Margin::<Identity, OFFSET>,
            SetMargin: SetMargin::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBlock as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBlock_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::TextAlignment,
    ) -> windows_core::HRESULT,
    pub SetTextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::TextAlignment,
    ) -> windows_core::HRESULT,
    pub HorizontalTextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::TextAlignment,
    ) -> windows_core::HRESULT,
    pub SetHorizontalTextAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::TextAlignment,
    ) -> windows_core::HRESULT,
    pub LineHeight:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetLineHeight:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub LineStackingStrategy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::LineStackingStrategy,
    ) -> windows_core::HRESULT,
    pub SetLineStackingStrategy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::LineStackingStrategy,
    ) -> windows_core::HRESULT,
    pub Margin: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::Thickness,
    ) -> windows_core::HRESULT,
    pub SetMargin: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Thickness,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBlockFactory,
    IBlockFactory_Vtbl,
    0x21bd671c_33e2_56ef_be37_a128e898452c
);
impl windows_core::RuntimeType for IBlockFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBlockFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IBlockFactory";
}
pub trait IBlockFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<Block>;
}
impl IBlockFactory_Vtbl {
    pub const fn new<Identity: IBlockFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IBlockFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlockFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBlockFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBlockFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBlockFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBlockStatics,
    IBlockStatics_Vtbl,
    0x830feedf_9aa6_56cd_983e_055500171b45
);
impl windows_core::RuntimeType for IBlockStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBlockStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IBlockStatics";
}
pub trait IBlockStatics_Impl: windows_core::IUnknownImpl {
    fn TextAlignmentProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn HorizontalTextAlignmentProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn LineHeightProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn LineStackingStrategyProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn MarginProperty(&self) -> windows_core::Result<super::DependencyProperty>;
}
impl IBlockStatics_Vtbl {
    pub const fn new<Identity: IBlockStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TextAlignmentProperty<
            Identity: IBlockStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlockStatics_Impl::TextAlignmentProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HorizontalTextAlignmentProperty<
            Identity: IBlockStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlockStatics_Impl::HorizontalTextAlignmentProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LineHeightProperty<
            Identity: IBlockStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlockStatics_Impl::LineHeightProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LineStackingStrategyProperty<
            Identity: IBlockStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlockStatics_Impl::LineStackingStrategyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MarginProperty<
            Identity: IBlockStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlockStatics_Impl::MarginProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBlockStatics, OFFSET>(),
            TextAlignmentProperty: TextAlignmentProperty::<Identity, OFFSET>,
            HorizontalTextAlignmentProperty: HorizontalTextAlignmentProperty::<Identity, OFFSET>,
            LineHeightProperty: LineHeightProperty::<Identity, OFFSET>,
            LineStackingStrategyProperty: LineStackingStrategyProperty::<Identity, OFFSET>,
            MarginProperty: MarginProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBlockStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBlockStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TextAlignmentProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HorizontalTextAlignmentProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LineHeightProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LineStackingStrategyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub MarginProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(IBold, IBold_Vtbl, 0x241a5f5a_c164_597f_b0db_fac7431297f2);
impl windows_core::RuntimeType for IBold {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBold {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IBold";
}
pub trait IBold_Impl: windows_core::IUnknownImpl {}
impl IBold_Vtbl {
    pub const fn new<Identity: IBold_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBold, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBold as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBold_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IGlyphs,
    IGlyphs_Vtbl,
    0x0fbf8cfe_18e7_5e45_9fa3_d2d0927958f4
);
impl windows_core::RuntimeType for IGlyphs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
impl windows_core::RuntimeName for IGlyphs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IGlyphs";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
pub trait IGlyphs_Impl: windows_core::IUnknownImpl {
    fn UnicodeString(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetUnicodeString(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn Indices(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetIndices(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn FontUri(&self) -> windows_core::Result<windows::Foundation::Uri>;
    fn SetFontUri(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::Uri>,
    ) -> windows_core::Result<()>;
    fn StyleSimulations(&self) -> windows_core::Result<super::Media::StyleSimulations>;
    fn SetStyleSimulations(
        &self,
        value: super::Media::StyleSimulations,
    ) -> windows_core::Result<()>;
    fn FontRenderingEmSize(&self) -> windows_core::Result<f64>;
    fn SetFontRenderingEmSize(&self, value: f64) -> windows_core::Result<()>;
    fn OriginX(&self) -> windows_core::Result<f64>;
    fn SetOriginX(&self, value: f64) -> windows_core::Result<()>;
    fn OriginY(&self) -> windows_core::Result<f64>;
    fn SetOriginY(&self, value: f64) -> windows_core::Result<()>;
    fn Fill(&self) -> windows_core::Result<super::Media::Brush>;
    fn SetFill(
        &self,
        value: windows_core::Ref<'_, super::Media::Brush>,
    ) -> windows_core::Result<()>;
    fn IsColorFontEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsColorFontEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn ColorFontPaletteIndex(&self) -> windows_core::Result<i32>;
    fn SetColorFontPaletteIndex(&self, value: i32) -> windows_core::Result<()>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
impl IGlyphs_Vtbl {
    pub const fn new<Identity: IGlyphs_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn UnicodeString<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphs_Impl::UnicodeString(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetUnicodeString<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGlyphs_Impl::SetUnicodeString(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn Indices<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphs_Impl::Indices(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIndices<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGlyphs_Impl::SetIndices(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn FontUri<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphs_Impl::FontUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontUri<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGlyphs_Impl::SetFontUri(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn StyleSimulations<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut super::Media::StyleSimulations,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphs_Impl::StyleSimulations(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStyleSimulations<
            Identity: IGlyphs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::Media::StyleSimulations,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGlyphs_Impl::SetStyleSimulations(this, value).into()
            }
        }
        unsafe extern "system" fn FontRenderingEmSize<
            Identity: IGlyphs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphs_Impl::FontRenderingEmSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontRenderingEmSize<
            Identity: IGlyphs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGlyphs_Impl::SetFontRenderingEmSize(this, value).into()
            }
        }
        unsafe extern "system" fn OriginX<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphs_Impl::OriginX(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOriginX<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGlyphs_Impl::SetOriginX(this, value).into()
            }
        }
        unsafe extern "system" fn OriginY<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphs_Impl::OriginY(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOriginY<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGlyphs_Impl::SetOriginY(this, value).into()
            }
        }
        unsafe extern "system" fn Fill<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphs_Impl::Fill(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFill<Identity: IGlyphs_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGlyphs_Impl::SetFill(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn IsColorFontEnabled<
            Identity: IGlyphs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphs_Impl::IsColorFontEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsColorFontEnabled<
            Identity: IGlyphs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGlyphs_Impl::SetIsColorFontEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn ColorFontPaletteIndex<
            Identity: IGlyphs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphs_Impl::ColorFontPaletteIndex(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetColorFontPaletteIndex<
            Identity: IGlyphs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IGlyphs_Impl::SetColorFontPaletteIndex(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IGlyphs, OFFSET>(),
            UnicodeString: UnicodeString::<Identity, OFFSET>,
            SetUnicodeString: SetUnicodeString::<Identity, OFFSET>,
            Indices: Indices::<Identity, OFFSET>,
            SetIndices: SetIndices::<Identity, OFFSET>,
            FontUri: FontUri::<Identity, OFFSET>,
            SetFontUri: SetFontUri::<Identity, OFFSET>,
            StyleSimulations: StyleSimulations::<Identity, OFFSET>,
            SetStyleSimulations: SetStyleSimulations::<Identity, OFFSET>,
            FontRenderingEmSize: FontRenderingEmSize::<Identity, OFFSET>,
            SetFontRenderingEmSize: SetFontRenderingEmSize::<Identity, OFFSET>,
            OriginX: OriginX::<Identity, OFFSET>,
            SetOriginX: SetOriginX::<Identity, OFFSET>,
            OriginY: OriginY::<Identity, OFFSET>,
            SetOriginY: SetOriginY::<Identity, OFFSET>,
            Fill: Fill::<Identity, OFFSET>,
            SetFill: SetFill::<Identity, OFFSET>,
            IsColorFontEnabled: IsColorFontEnabled::<Identity, OFFSET>,
            SetIsColorFontEnabled: SetIsColorFontEnabled::<Identity, OFFSET>,
            ColorFontPaletteIndex: ColorFontPaletteIndex::<Identity, OFFSET>,
            SetColorFontPaletteIndex: SetColorFontPaletteIndex::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGlyphs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGlyphs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub UnicodeString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetUnicodeString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Indices: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetIndices: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FontUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetFontUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Media")]
    pub StyleSimulations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::Media::StyleSimulations,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    StyleSimulations: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetStyleSimulations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Media::StyleSimulations,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetStyleSimulations: usize,
    pub FontRenderingEmSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFontRenderingEmSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub OriginX:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetOriginX: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub OriginY:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetOriginY: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub Fill: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Media")))]
    Fill: usize,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub SetFill: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Media")))]
    SetFill: usize,
    pub IsColorFontEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsColorFontEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub ColorFontPaletteIndex:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetColorFontPaletteIndex:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IGlyphsStatics,
    IGlyphsStatics_Vtbl,
    0x8d9e241a_3e0e_5100_8ede_e008034ff8ae
);
impl windows_core::RuntimeType for IGlyphsStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IGlyphsStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IGlyphsStatics";
}
pub trait IGlyphsStatics_Impl: windows_core::IUnknownImpl {
    fn UnicodeStringProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn IndicesProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn FontUriProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn StyleSimulationsProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn FontRenderingEmSizeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn OriginXProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn OriginYProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn FillProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn IsColorFontEnabledProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn ColorFontPaletteIndexProperty(&self) -> windows_core::Result<super::DependencyProperty>;
}
impl IGlyphsStatics_Vtbl {
    pub const fn new<Identity: IGlyphsStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn UnicodeStringProperty<
            Identity: IGlyphsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphsStatics_Impl::UnicodeStringProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IndicesProperty<
            Identity: IGlyphsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphsStatics_Impl::IndicesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FontUriProperty<
            Identity: IGlyphsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphsStatics_Impl::FontUriProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn StyleSimulationsProperty<
            Identity: IGlyphsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphsStatics_Impl::StyleSimulationsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FontRenderingEmSizeProperty<
            Identity: IGlyphsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphsStatics_Impl::FontRenderingEmSizeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OriginXProperty<
            Identity: IGlyphsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphsStatics_Impl::OriginXProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OriginYProperty<
            Identity: IGlyphsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphsStatics_Impl::OriginYProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FillProperty<
            Identity: IGlyphsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphsStatics_Impl::FillProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsColorFontEnabledProperty<
            Identity: IGlyphsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphsStatics_Impl::IsColorFontEnabledProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ColorFontPaletteIndexProperty<
            Identity: IGlyphsStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGlyphsStatics_Impl::ColorFontPaletteIndexProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IGlyphsStatics, OFFSET>(),
            UnicodeStringProperty: UnicodeStringProperty::<Identity, OFFSET>,
            IndicesProperty: IndicesProperty::<Identity, OFFSET>,
            FontUriProperty: FontUriProperty::<Identity, OFFSET>,
            StyleSimulationsProperty: StyleSimulationsProperty::<Identity, OFFSET>,
            FontRenderingEmSizeProperty: FontRenderingEmSizeProperty::<Identity, OFFSET>,
            OriginXProperty: OriginXProperty::<Identity, OFFSET>,
            OriginYProperty: OriginYProperty::<Identity, OFFSET>,
            FillProperty: FillProperty::<Identity, OFFSET>,
            IsColorFontEnabledProperty: IsColorFontEnabledProperty::<Identity, OFFSET>,
            ColorFontPaletteIndexProperty: ColorFontPaletteIndexProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGlyphsStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGlyphsStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub UnicodeStringProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IndicesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FontUriProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StyleSimulationsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FontRenderingEmSizeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OriginXProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OriginYProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FillProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsColorFontEnabledProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ColorFontPaletteIndexProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IHyperlink,
    IHyperlink_Vtbl,
    0xac09bd16_cdfa_54c2_8d03_a474181545b1
);
impl windows_core::RuntimeType for IHyperlink {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Xaml_Input")]
impl windows_core::RuntimeName for IHyperlink {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IHyperlink";
}
#[cfg(feature = "UI_Xaml_Input")]
pub trait IHyperlink_Impl: windows_core::IUnknownImpl {
    fn NavigateUri(&self) -> windows_core::Result<windows::Foundation::Uri>;
    fn SetNavigateUri(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::Uri>,
    ) -> windows_core::Result<()>;
    fn UnderlineStyle(&self) -> windows_core::Result<UnderlineStyle>;
    fn SetUnderlineStyle(&self, value: UnderlineStyle) -> windows_core::Result<()>;
    fn XYFocusLeft(&self) -> windows_core::Result<super::DependencyObject>;
    fn SetXYFocusLeft(
        &self,
        value: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn XYFocusRight(&self) -> windows_core::Result<super::DependencyObject>;
    fn SetXYFocusRight(
        &self,
        value: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn XYFocusUp(&self) -> windows_core::Result<super::DependencyObject>;
    fn SetXYFocusUp(
        &self,
        value: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn XYFocusDown(&self) -> windows_core::Result<super::DependencyObject>;
    fn SetXYFocusDown(
        &self,
        value: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn ElementSoundMode(&self) -> windows_core::Result<super::ElementSoundMode>;
    fn SetElementSoundMode(&self, value: super::ElementSoundMode) -> windows_core::Result<()>;
    fn FocusState(&self) -> windows_core::Result<super::FocusState>;
    fn XYFocusUpNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy>;
    fn SetXYFocusUpNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()>;
    fn XYFocusDownNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy>;
    fn SetXYFocusDownNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()>;
    fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy>;
    fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()>;
    fn XYFocusRightNavigationStrategy(
        &self,
    ) -> windows_core::Result<super::Input::XYFocusNavigationStrategy>;
    fn SetXYFocusRightNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::Result<()>;
    fn IsTabStop(&self) -> windows_core::Result<bool>;
    fn SetIsTabStop(&self, value: bool) -> windows_core::Result<()>;
    fn TabIndex(&self) -> windows_core::Result<i32>;
    fn SetTabIndex(&self, value: i32) -> windows_core::Result<()>;
    fn Click(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<Hyperlink, HyperlinkClickEventArgs>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveClick(&self, token: i64) -> windows_core::Result<()>;
    fn GotFocus(
        &self,
        handler: windows_core::Ref<'_, super::RoutedEventHandler>,
    ) -> windows_core::Result<i64>;
    fn RemoveGotFocus(&self, token: i64) -> windows_core::Result<()>;
    fn LostFocus(
        &self,
        handler: windows_core::Ref<'_, super::RoutedEventHandler>,
    ) -> windows_core::Result<i64>;
    fn RemoveLostFocus(&self, token: i64) -> windows_core::Result<()>;
    fn Focus(&self, value: super::FocusState) -> windows_core::Result<bool>;
}
#[cfg(feature = "UI_Xaml_Input")]
impl IHyperlink_Vtbl {
    pub const fn new<Identity: IHyperlink_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn NavigateUri<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::NavigateUri(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetNavigateUri<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetNavigateUri(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn UnderlineStyle<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut UnderlineStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::UnderlineStyle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetUnderlineStyle<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: UnderlineStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetUnderlineStyle(this, value).into()
            }
        }
        unsafe extern "system" fn XYFocusLeft<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::XYFocusLeft(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetXYFocusLeft<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetXYFocusLeft(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn XYFocusRight<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::XYFocusRight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetXYFocusRight<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetXYFocusRight(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn XYFocusUp<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::XYFocusUp(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetXYFocusUp<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetXYFocusUp(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn XYFocusDown<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::XYFocusDown(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetXYFocusDown<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetXYFocusDown(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn ElementSoundMode<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::ElementSoundMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::ElementSoundMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetElementSoundMode<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::ElementSoundMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetElementSoundMode(this, value).into()
            }
        }
        unsafe extern "system" fn FocusState<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut super::FocusState,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::FocusState(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn XYFocusUpNavigationStrategy<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::Input::XYFocusNavigationStrategy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::XYFocusUpNavigationStrategy(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetXYFocusUpNavigationStrategy<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::Input::XYFocusNavigationStrategy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetXYFocusUpNavigationStrategy(this, value).into()
            }
        }
        unsafe extern "system" fn XYFocusDownNavigationStrategy<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::Input::XYFocusNavigationStrategy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::XYFocusDownNavigationStrategy(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetXYFocusDownNavigationStrategy<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::Input::XYFocusNavigationStrategy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetXYFocusDownNavigationStrategy(this, value).into()
            }
        }
        unsafe extern "system" fn XYFocusLeftNavigationStrategy<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::Input::XYFocusNavigationStrategy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::XYFocusLeftNavigationStrategy(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetXYFocusLeftNavigationStrategy<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::Input::XYFocusNavigationStrategy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetXYFocusLeftNavigationStrategy(this, value).into()
            }
        }
        unsafe extern "system" fn XYFocusRightNavigationStrategy<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::Input::XYFocusNavigationStrategy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::XYFocusRightNavigationStrategy(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetXYFocusRightNavigationStrategy<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::Input::XYFocusNavigationStrategy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetXYFocusRightNavigationStrategy(this, value).into()
            }
        }
        unsafe extern "system" fn IsTabStop<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::IsTabStop(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsTabStop<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetIsTabStop(this, value).into()
            }
        }
        unsafe extern "system" fn TabIndex<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::TabIndex(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTabIndex<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::SetTabIndex(this, value).into()
            }
        }
        unsafe extern "system" fn Click<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::Click(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveClick<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::RemoveClick(this, token).into()
            }
        }
        unsafe extern "system" fn GotFocus<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::GotFocus(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveGotFocus<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::RemoveGotFocus(this, token).into()
            }
        }
        unsafe extern "system" fn LostFocus<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::LostFocus(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveLostFocus<
            Identity: IHyperlink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHyperlink_Impl::RemoveLostFocus(this, token).into()
            }
        }
        unsafe extern "system" fn Focus<Identity: IHyperlink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: super::FocusState,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlink_Impl::Focus(this, value) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IHyperlink, OFFSET>(),
            NavigateUri: NavigateUri::<Identity, OFFSET>,
            SetNavigateUri: SetNavigateUri::<Identity, OFFSET>,
            UnderlineStyle: UnderlineStyle::<Identity, OFFSET>,
            SetUnderlineStyle: SetUnderlineStyle::<Identity, OFFSET>,
            XYFocusLeft: XYFocusLeft::<Identity, OFFSET>,
            SetXYFocusLeft: SetXYFocusLeft::<Identity, OFFSET>,
            XYFocusRight: XYFocusRight::<Identity, OFFSET>,
            SetXYFocusRight: SetXYFocusRight::<Identity, OFFSET>,
            XYFocusUp: XYFocusUp::<Identity, OFFSET>,
            SetXYFocusUp: SetXYFocusUp::<Identity, OFFSET>,
            XYFocusDown: XYFocusDown::<Identity, OFFSET>,
            SetXYFocusDown: SetXYFocusDown::<Identity, OFFSET>,
            ElementSoundMode: ElementSoundMode::<Identity, OFFSET>,
            SetElementSoundMode: SetElementSoundMode::<Identity, OFFSET>,
            FocusState: FocusState::<Identity, OFFSET>,
            XYFocusUpNavigationStrategy: XYFocusUpNavigationStrategy::<Identity, OFFSET>,
            SetXYFocusUpNavigationStrategy: SetXYFocusUpNavigationStrategy::<Identity, OFFSET>,
            XYFocusDownNavigationStrategy: XYFocusDownNavigationStrategy::<Identity, OFFSET>,
            SetXYFocusDownNavigationStrategy: SetXYFocusDownNavigationStrategy::<Identity, OFFSET>,
            XYFocusLeftNavigationStrategy: XYFocusLeftNavigationStrategy::<Identity, OFFSET>,
            SetXYFocusLeftNavigationStrategy: SetXYFocusLeftNavigationStrategy::<Identity, OFFSET>,
            XYFocusRightNavigationStrategy: XYFocusRightNavigationStrategy::<Identity, OFFSET>,
            SetXYFocusRightNavigationStrategy: SetXYFocusRightNavigationStrategy::<Identity, OFFSET>,
            IsTabStop: IsTabStop::<Identity, OFFSET>,
            SetIsTabStop: SetIsTabStop::<Identity, OFFSET>,
            TabIndex: TabIndex::<Identity, OFFSET>,
            SetTabIndex: SetTabIndex::<Identity, OFFSET>,
            Click: Click::<Identity, OFFSET>,
            RemoveClick: RemoveClick::<Identity, OFFSET>,
            GotFocus: GotFocus::<Identity, OFFSET>,
            RemoveGotFocus: RemoveGotFocus::<Identity, OFFSET>,
            LostFocus: LostFocus::<Identity, OFFSET>,
            RemoveLostFocus: RemoveLostFocus::<Identity, OFFSET>,
            Focus: Focus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IHyperlink as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IHyperlink_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub NavigateUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetNavigateUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub UnderlineStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut UnderlineStyle,
    ) -> windows_core::HRESULT,
    pub SetUnderlineStyle:
        unsafe extern "system" fn(*mut core::ffi::c_void, UnderlineStyle) -> windows_core::HRESULT,
    pub XYFocusLeft: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetXYFocusLeft: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub XYFocusRight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetXYFocusRight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub XYFocusUp: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetXYFocusUp: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub XYFocusDown: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetXYFocusDown: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ElementSoundMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::ElementSoundMode,
    ) -> windows_core::HRESULT,
    pub SetElementSoundMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::ElementSoundMode,
    ) -> windows_core::HRESULT,
    pub FocusState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::FocusState,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Input")]
    pub XYFocusUpNavigationStrategy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    XYFocusUpNavigationStrategy: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub SetXYFocusUpNavigationStrategy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    SetXYFocusUpNavigationStrategy: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub XYFocusDownNavigationStrategy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    XYFocusDownNavigationStrategy: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub SetXYFocusDownNavigationStrategy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    SetXYFocusDownNavigationStrategy: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub XYFocusLeftNavigationStrategy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    XYFocusLeftNavigationStrategy: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub SetXYFocusLeftNavigationStrategy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    SetXYFocusLeftNavigationStrategy: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub XYFocusRightNavigationStrategy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    XYFocusRightNavigationStrategy: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub SetXYFocusRightNavigationStrategy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Input::XYFocusNavigationStrategy,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    SetXYFocusRightNavigationStrategy: usize,
    pub IsTabStop:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsTabStop:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub TabIndex:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetTabIndex:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    pub Click: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveClick:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub GotFocus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveGotFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub LostFocus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveLostFocus:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub Focus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FocusState,
        *mut bool,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IHyperlinkClickEventArgs,
    IHyperlinkClickEventArgs_Vtbl,
    0xf8f89552_873d_5ef5_82bf_c79a9509b07c
);
impl windows_core::RuntimeType for IHyperlinkClickEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IHyperlinkClickEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IHyperlinkClickEventArgs";
}
pub trait IHyperlinkClickEventArgs_Impl: windows_core::IUnknownImpl {}
impl IHyperlinkClickEventArgs_Vtbl {
    pub const fn new<Identity: IHyperlinkClickEventArgs_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IHyperlinkClickEventArgs,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IHyperlinkClickEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IHyperlinkClickEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IHyperlinkStatics,
    IHyperlinkStatics_Vtbl,
    0xe13598f4_7bc7_5ab9_885b_70f32f8c9531
);
impl windows_core::RuntimeType for IHyperlinkStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IHyperlinkStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IHyperlinkStatics";
}
pub trait IHyperlinkStatics_Impl: windows_core::IUnknownImpl {
    fn NavigateUriProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn UnderlineStyleProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn XYFocusLeftProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn XYFocusRightProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn XYFocusUpProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn XYFocusDownProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn ElementSoundModeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn FocusStateProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn XYFocusUpNavigationStrategyProperty(
        &self,
    ) -> windows_core::Result<super::DependencyProperty>;
    fn XYFocusDownNavigationStrategyProperty(
        &self,
    ) -> windows_core::Result<super::DependencyProperty>;
    fn XYFocusLeftNavigationStrategyProperty(
        &self,
    ) -> windows_core::Result<super::DependencyProperty>;
    fn XYFocusRightNavigationStrategyProperty(
        &self,
    ) -> windows_core::Result<super::DependencyProperty>;
    fn IsTabStopProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn TabIndexProperty(&self) -> windows_core::Result<super::DependencyProperty>;
}
impl IHyperlinkStatics_Vtbl {
    pub const fn new<Identity: IHyperlinkStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn NavigateUriProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::NavigateUriProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn UnderlineStyleProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::UnderlineStyleProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn XYFocusLeftProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::XYFocusLeftProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn XYFocusRightProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::XYFocusRightProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn XYFocusUpProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::XYFocusUpProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn XYFocusDownProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::XYFocusDownProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ElementSoundModeProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::ElementSoundModeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FocusStateProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::FocusStateProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn XYFocusUpNavigationStrategyProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::XYFocusUpNavigationStrategyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn XYFocusDownNavigationStrategyProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::XYFocusDownNavigationStrategyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn XYFocusLeftNavigationStrategyProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::XYFocusLeftNavigationStrategyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn XYFocusRightNavigationStrategyProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::XYFocusRightNavigationStrategyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsTabStopProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::IsTabStopProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TabIndexProperty<
            Identity: IHyperlinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHyperlinkStatics_Impl::TabIndexProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IHyperlinkStatics, OFFSET>(),
            NavigateUriProperty: NavigateUriProperty::<Identity, OFFSET>,
            UnderlineStyleProperty: UnderlineStyleProperty::<Identity, OFFSET>,
            XYFocusLeftProperty: XYFocusLeftProperty::<Identity, OFFSET>,
            XYFocusRightProperty: XYFocusRightProperty::<Identity, OFFSET>,
            XYFocusUpProperty: XYFocusUpProperty::<Identity, OFFSET>,
            XYFocusDownProperty: XYFocusDownProperty::<Identity, OFFSET>,
            ElementSoundModeProperty: ElementSoundModeProperty::<Identity, OFFSET>,
            FocusStateProperty: FocusStateProperty::<Identity, OFFSET>,
            XYFocusUpNavigationStrategyProperty: XYFocusUpNavigationStrategyProperty::<
                Identity,
                OFFSET,
            >,
            XYFocusDownNavigationStrategyProperty: XYFocusDownNavigationStrategyProperty::<
                Identity,
                OFFSET,
            >,
            XYFocusLeftNavigationStrategyProperty: XYFocusLeftNavigationStrategyProperty::<
                Identity,
                OFFSET,
            >,
            XYFocusRightNavigationStrategyProperty: XYFocusRightNavigationStrategyProperty::<
                Identity,
                OFFSET,
            >,
            IsTabStopProperty: IsTabStopProperty::<Identity, OFFSET>,
            TabIndexProperty: TabIndexProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IHyperlinkStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IHyperlinkStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub NavigateUriProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub UnderlineStyleProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub XYFocusLeftProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub XYFocusRightProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub XYFocusUpProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub XYFocusDownProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ElementSoundModeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FocusStateProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub XYFocusUpNavigationStrategyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub XYFocusDownNavigationStrategyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub XYFocusLeftNavigationStrategyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub XYFocusRightNavigationStrategyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub IsTabStopProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TabIndexProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInline,
    IInline_Vtbl,
    0x813d427a_8980_5a79_a8fa_f27919cfb24f
);
impl windows_core::RuntimeType for IInline {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInline {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IInline";
}
pub trait IInline_Impl: windows_core::IUnknownImpl {}
impl IInline_Vtbl {
    pub const fn new<Identity: IInline_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IInline, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInline as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInline_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IInlineFactory,
    IInlineFactory_Vtbl,
    0xfd253a36_fa2b_5b30_89a8_9f577871ec07
);
impl windows_core::RuntimeType for IInlineFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IInlineFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IInlineFactory";
}
pub trait IInlineFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<Inline>;
}
impl IInlineFactory_Vtbl {
    pub const fn new<Identity: IInlineFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IInlineFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInlineFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IInlineFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInlineFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInlineFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IInlineUIContainer,
    IInlineUIContainer_Vtbl,
    0xd529bef6_c05a_5bad_85e8_640127cf86f5
);
impl windows_core::RuntimeType for IInlineUIContainer {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IInlineUIContainer {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IInlineUIContainer";
}
#[cfg(feature = "UI_Composition")]
pub trait IInlineUIContainer_Impl: windows_core::IUnknownImpl {
    fn Child(&self) -> windows_core::Result<super::UIElement>;
    fn SetChild(&self, value: windows_core::Ref<'_, super::UIElement>) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IInlineUIContainer_Vtbl {
    pub const fn new<Identity: IInlineUIContainer_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Child<Identity: IInlineUIContainer_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IInlineUIContainer_Impl::Child(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetChild<
            Identity: IInlineUIContainer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInlineUIContainer_Impl::SetChild(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IInlineUIContainer, OFFSET>(),
            Child: Child::<Identity, OFFSET>,
            SetChild: SetChild::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInlineUIContainer as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInlineUIContainer_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub Child: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Child: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetChild: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetChild: usize,
}
windows_core::imp::define_interface!(
    IItalic,
    IItalic_Vtbl,
    0xca3cbebd_7a8d_5d7a_8fdf_538e8a680f6c
);
impl windows_core::RuntimeType for IItalic {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IItalic {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IItalic";
}
pub trait IItalic_Impl: windows_core::IUnknownImpl {}
impl IItalic_Vtbl {
    pub const fn new<Identity: IItalic_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IItalic, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IItalic as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IItalic_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ILineBreak,
    ILineBreak_Vtbl,
    0x09307599_7cc2_5f54_b106_728620c16f76
);
impl windows_core::RuntimeType for ILineBreak {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ILineBreak {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ILineBreak";
}
pub trait ILineBreak_Impl: windows_core::IUnknownImpl {}
impl ILineBreak_Vtbl {
    pub const fn new<Identity: ILineBreak_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ILineBreak, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ILineBreak as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ILineBreak_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IParagraph,
    IParagraph_Vtbl,
    0x9ed64c77_329d_502f_a257_f58398edab51
);
impl windows_core::RuntimeType for IParagraph {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IParagraph {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IParagraph";
}
pub trait IParagraph_Impl: windows_core::IUnknownImpl {
    fn Inlines(&self) -> windows_core::Result<InlineCollection>;
    fn TextIndent(&self) -> windows_core::Result<f64>;
    fn SetTextIndent(&self, value: f64) -> windows_core::Result<()>;
}
impl IParagraph_Vtbl {
    pub const fn new<Identity: IParagraph_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Inlines<Identity: IParagraph_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IParagraph_Impl::Inlines(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TextIndent<Identity: IParagraph_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IParagraph_Impl::TextIndent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTextIndent<Identity: IParagraph_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IParagraph_Impl::SetTextIndent(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IParagraph, OFFSET>(),
            Inlines: Inlines::<Identity, OFFSET>,
            TextIndent: TextIndent::<Identity, OFFSET>,
            SetTextIndent: SetTextIndent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IParagraph as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IParagraph_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Inlines: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TextIndent:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetTextIndent:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IParagraphStatics,
    IParagraphStatics_Vtbl,
    0x4eb89ab1_66c8_5fc0_aa5f_48c8092ceb5f
);
impl windows_core::RuntimeType for IParagraphStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IParagraphStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IParagraphStatics";
}
pub trait IParagraphStatics_Impl: windows_core::IUnknownImpl {
    fn TextIndentProperty(&self) -> windows_core::Result<super::DependencyProperty>;
}
impl IParagraphStatics_Vtbl {
    pub const fn new<Identity: IParagraphStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TextIndentProperty<
            Identity: IParagraphStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IParagraphStatics_Impl::TextIndentProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IParagraphStatics, OFFSET>(),
            TextIndentProperty: TextIndentProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IParagraphStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IParagraphStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TextIndentProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(IRun, IRun_Vtbl, 0x1f905239_37cb_590b_9132_3ffb7741906e);
impl windows_core::RuntimeType for IRun {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRun {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IRun";
}
pub trait IRun_Impl: windows_core::IUnknownImpl {
    fn Text(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn FlowDirection(&self) -> windows_core::Result<super::FlowDirection>;
    fn SetFlowDirection(&self, value: super::FlowDirection) -> windows_core::Result<()>;
}
impl IRun_Vtbl {
    pub const fn new<Identity: IRun_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Text<Identity: IRun_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRun_Impl::Text(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetText<Identity: IRun_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRun_Impl::SetText(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn FlowDirection<Identity: IRun_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut super::FlowDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRun_Impl::FlowDirection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFlowDirection<Identity: IRun_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: super::FlowDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRun_Impl::SetFlowDirection(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IRun, OFFSET>(),
            Text: Text::<Identity, OFFSET>,
            SetText: SetText::<Identity, OFFSET>,
            FlowDirection: FlowDirection::<Identity, OFFSET>,
            SetFlowDirection: SetFlowDirection::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRun as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRun_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Text: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FlowDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::FlowDirection,
    ) -> windows_core::HRESULT,
    pub SetFlowDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FlowDirection,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRunStatics,
    IRunStatics_Vtbl,
    0x051b3c5b_7600_51a5_80c5_93eb50fd684f
);
impl windows_core::RuntimeType for IRunStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRunStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IRunStatics";
}
pub trait IRunStatics_Impl: windows_core::IUnknownImpl {
    fn FlowDirectionProperty(&self) -> windows_core::Result<super::DependencyProperty>;
}
impl IRunStatics_Vtbl {
    pub const fn new<Identity: IRunStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FlowDirectionProperty<
            Identity: IRunStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRunStatics_Impl::FlowDirectionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IRunStatics, OFFSET>(),
            FlowDirectionProperty: FlowDirectionProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRunStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRunStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FlowDirectionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(ISpan, ISpan_Vtbl, 0x91b93d4d_4e28_57b9_bffb_3566c2a3c2a1);
impl windows_core::RuntimeType for ISpan {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpan {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ISpan";
}
pub trait ISpan_Impl: windows_core::IUnknownImpl {
    fn Inlines(&self) -> windows_core::Result<InlineCollection>;
    fn SetInlines(
        &self,
        value: windows_core::Ref<'_, InlineCollection>,
    ) -> windows_core::Result<()>;
}
impl ISpan_Vtbl {
    pub const fn new<Identity: ISpan_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Inlines<Identity: ISpan_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpan_Impl::Inlines(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetInlines<Identity: ISpan_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISpan_Impl::SetInlines(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISpan, OFFSET>(),
            Inlines: Inlines::<Identity, OFFSET>,
            SetInlines: SetInlines::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpan as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpan_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Inlines: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetInlines: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpanFactory,
    ISpanFactory_Vtbl,
    0xa6e87c16_c175_55c8_bbd3_ce40f9d0a680
);
impl windows_core::RuntimeType for ISpanFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpanFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ISpanFactory";
}
pub trait ISpanFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<Span>;
}
impl ISpanFactory_Vtbl {
    pub const fn new<Identity: ISpanFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: ISpanFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpanFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISpanFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpanFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpanFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextElement,
    ITextElement_Vtbl,
    0xa122ba22_833f_5220_a47e_6cd507531abe
);
impl windows_core::RuntimeType for ITextElement {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(
    feature = "UI_Composition",
    feature = "UI_Xaml_Input",
    feature = "UI_Xaml_Media"
))]
impl windows_core::RuntimeName for ITextElement {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITextElement";
}
#[cfg(all(
    feature = "UI_Composition",
    feature = "UI_Xaml_Input",
    feature = "UI_Xaml_Media"
))]
pub trait ITextElement_Impl: windows_core::IUnknownImpl {
    fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn FontSize(&self) -> windows_core::Result<f64>;
    fn SetFontSize(&self, value: f64) -> windows_core::Result<()>;
    fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily>;
    fn SetFontFamily(
        &self,
        value: windows_core::Ref<'_, super::Media::FontFamily>,
    ) -> windows_core::Result<()>;
    fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight>;
    fn SetFontWeight(&self, value: &windows::UI::Text::FontWeight) -> windows_core::Result<()>;
    fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle>;
    fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()>;
    fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch>;
    fn SetFontStretch(&self, value: windows::UI::Text::FontStretch) -> windows_core::Result<()>;
    fn CharacterSpacing(&self) -> windows_core::Result<i32>;
    fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()>;
    fn Foreground(&self) -> windows_core::Result<super::Media::Brush>;
    fn SetForeground(
        &self,
        value: windows_core::Ref<'_, super::Media::Brush>,
    ) -> windows_core::Result<()>;
    fn Language(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations>;
    fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()>;
    fn ContentStart(&self) -> windows_core::Result<TextPointer>;
    fn ContentEnd(&self) -> windows_core::Result<TextPointer>;
    fn ElementStart(&self) -> windows_core::Result<TextPointer>;
    fn ElementEnd(&self) -> windows_core::Result<TextPointer>;
    fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool>;
    fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()>;
    fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool>;
    fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()>;
    fn IsAccessKeyScope(&self) -> windows_core::Result<bool>;
    fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()>;
    fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject>;
    fn SetAccessKeyScopeOwner(
        &self,
        value: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<()>;
    fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode>;
    fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()>;
    fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64>;
    fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64>;
    fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()>;
    fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot>;
    fn SetXamlRoot(
        &self,
        value: windows_core::Ref<'_, super::XamlRoot>,
    ) -> windows_core::Result<()>;
    fn AccessKeyDisplayRequested(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()>;
    fn AccessKeyDisplayDismissed(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()>;
    fn AccessKeyInvoked(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()>;
    fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable>;
}
#[cfg(all(
    feature = "UI_Composition",
    feature = "UI_Xaml_Input",
    feature = "UI_Xaml_Media"
))]
impl ITextElement_Vtbl {
    pub const fn new<Identity: ITextElement_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Name<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::Name(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FontSize<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::FontSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontSize<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetFontSize(this, value).into()
            }
        }
        unsafe extern "system" fn FontFamily<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::FontFamily(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontFamily<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetFontFamily(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn FontWeight<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Text::FontWeight,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::FontWeight(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontWeight<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::UI::Text::FontWeight,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetFontWeight(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn FontStyle<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Text::FontStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::FontStyle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontStyle<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: windows::UI::Text::FontStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetFontStyle(this, value).into()
            }
        }
        unsafe extern "system" fn FontStretch<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Text::FontStretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::FontStretch(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFontStretch<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::UI::Text::FontStretch,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetFontStretch(this, value).into()
            }
        }
        unsafe extern "system" fn CharacterSpacing<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::CharacterSpacing(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCharacterSpacing<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetCharacterSpacing(this, value).into()
            }
        }
        unsafe extern "system" fn Foreground<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::Foreground(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetForeground<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetForeground(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn Language<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::Language(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLanguage<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetLanguage(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn IsTextScaleFactorEnabled<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::IsTextScaleFactorEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsTextScaleFactorEnabled<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetIsTextScaleFactorEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn TextDecorations<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Text::TextDecorations,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::TextDecorations(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetTextDecorations<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::UI::Text::TextDecorations,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetTextDecorations(this, value).into()
            }
        }
        unsafe extern "system" fn ContentStart<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::ContentStart(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContentEnd<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::ContentEnd(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ElementStart<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::ElementStart(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ElementEnd<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::ElementEnd(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AllowFocusOnInteraction<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::AllowFocusOnInteraction(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAllowFocusOnInteraction<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetAllowFocusOnInteraction(this, value).into()
            }
        }
        unsafe extern "system" fn AccessKey<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::AccessKey(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAccessKey<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetAccessKey(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn ExitDisplayModeOnAccessKeyInvoked<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::ExitDisplayModeOnAccessKeyInvoked(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetExitDisplayModeOnAccessKeyInvoked<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetExitDisplayModeOnAccessKeyInvoked(this, value).into()
            }
        }
        unsafe extern "system" fn IsAccessKeyScope<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::IsAccessKeyScope(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsAccessKeyScope<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetIsAccessKeyScope(this, value).into()
            }
        }
        unsafe extern "system" fn AccessKeyScopeOwner<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::AccessKeyScopeOwner(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAccessKeyScopeOwner<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetAccessKeyScopeOwner(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        unsafe extern "system" fn KeyTipPlacementMode<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::Input::KeyTipPlacementMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::KeyTipPlacementMode(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKeyTipPlacementMode<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::Input::KeyTipPlacementMode,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetKeyTipPlacementMode(this, value).into()
            }
        }
        unsafe extern "system" fn KeyTipHorizontalOffset<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::KeyTipHorizontalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKeyTipHorizontalOffset<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetKeyTipHorizontalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn KeyTipVerticalOffset<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::KeyTipVerticalOffset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKeyTipVerticalOffset<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetKeyTipVerticalOffset(this, value).into()
            }
        }
        unsafe extern "system" fn XamlRoot<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::XamlRoot(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetXamlRoot<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::SetXamlRoot(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn AccessKeyDisplayRequested<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::AccessKeyDisplayRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveAccessKeyDisplayRequested<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::RemoveAccessKeyDisplayRequested(this, token).into()
            }
        }
        unsafe extern "system" fn AccessKeyDisplayDismissed<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::AccessKeyDisplayDismissed(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveAccessKeyDisplayDismissed<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::RemoveAccessKeyDisplayDismissed(this, token).into()
            }
        }
        unsafe extern "system" fn AccessKeyInvoked<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::AccessKeyInvoked(this, core::mem::transmute_copy(&handler))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveAccessKeyInvoked<
            Identity: ITextElement_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElement_Impl::RemoveAccessKeyInvoked(this, token).into()
            }
        }
        unsafe extern "system" fn FindName<Identity: ITextElement_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElement_Impl::FindName(this, core::mem::transmute(&name)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextElement, OFFSET>(),
            Name: Name::<Identity, OFFSET>,
            FontSize: FontSize::<Identity, OFFSET>,
            SetFontSize: SetFontSize::<Identity, OFFSET>,
            FontFamily: FontFamily::<Identity, OFFSET>,
            SetFontFamily: SetFontFamily::<Identity, OFFSET>,
            FontWeight: FontWeight::<Identity, OFFSET>,
            SetFontWeight: SetFontWeight::<Identity, OFFSET>,
            FontStyle: FontStyle::<Identity, OFFSET>,
            SetFontStyle: SetFontStyle::<Identity, OFFSET>,
            FontStretch: FontStretch::<Identity, OFFSET>,
            SetFontStretch: SetFontStretch::<Identity, OFFSET>,
            CharacterSpacing: CharacterSpacing::<Identity, OFFSET>,
            SetCharacterSpacing: SetCharacterSpacing::<Identity, OFFSET>,
            Foreground: Foreground::<Identity, OFFSET>,
            SetForeground: SetForeground::<Identity, OFFSET>,
            Language: Language::<Identity, OFFSET>,
            SetLanguage: SetLanguage::<Identity, OFFSET>,
            IsTextScaleFactorEnabled: IsTextScaleFactorEnabled::<Identity, OFFSET>,
            SetIsTextScaleFactorEnabled: SetIsTextScaleFactorEnabled::<Identity, OFFSET>,
            TextDecorations: TextDecorations::<Identity, OFFSET>,
            SetTextDecorations: SetTextDecorations::<Identity, OFFSET>,
            ContentStart: ContentStart::<Identity, OFFSET>,
            ContentEnd: ContentEnd::<Identity, OFFSET>,
            ElementStart: ElementStart::<Identity, OFFSET>,
            ElementEnd: ElementEnd::<Identity, OFFSET>,
            AllowFocusOnInteraction: AllowFocusOnInteraction::<Identity, OFFSET>,
            SetAllowFocusOnInteraction: SetAllowFocusOnInteraction::<Identity, OFFSET>,
            AccessKey: AccessKey::<Identity, OFFSET>,
            SetAccessKey: SetAccessKey::<Identity, OFFSET>,
            ExitDisplayModeOnAccessKeyInvoked: ExitDisplayModeOnAccessKeyInvoked::<Identity, OFFSET>,
            SetExitDisplayModeOnAccessKeyInvoked: SetExitDisplayModeOnAccessKeyInvoked::<
                Identity,
                OFFSET,
            >,
            IsAccessKeyScope: IsAccessKeyScope::<Identity, OFFSET>,
            SetIsAccessKeyScope: SetIsAccessKeyScope::<Identity, OFFSET>,
            AccessKeyScopeOwner: AccessKeyScopeOwner::<Identity, OFFSET>,
            SetAccessKeyScopeOwner: SetAccessKeyScopeOwner::<Identity, OFFSET>,
            KeyTipPlacementMode: KeyTipPlacementMode::<Identity, OFFSET>,
            SetKeyTipPlacementMode: SetKeyTipPlacementMode::<Identity, OFFSET>,
            KeyTipHorizontalOffset: KeyTipHorizontalOffset::<Identity, OFFSET>,
            SetKeyTipHorizontalOffset: SetKeyTipHorizontalOffset::<Identity, OFFSET>,
            KeyTipVerticalOffset: KeyTipVerticalOffset::<Identity, OFFSET>,
            SetKeyTipVerticalOffset: SetKeyTipVerticalOffset::<Identity, OFFSET>,
            XamlRoot: XamlRoot::<Identity, OFFSET>,
            SetXamlRoot: SetXamlRoot::<Identity, OFFSET>,
            AccessKeyDisplayRequested: AccessKeyDisplayRequested::<Identity, OFFSET>,
            RemoveAccessKeyDisplayRequested: RemoveAccessKeyDisplayRequested::<Identity, OFFSET>,
            AccessKeyDisplayDismissed: AccessKeyDisplayDismissed::<Identity, OFFSET>,
            RemoveAccessKeyDisplayDismissed: RemoveAccessKeyDisplayDismissed::<Identity, OFFSET>,
            AccessKeyInvoked: AccessKeyInvoked::<Identity, OFFSET>,
            RemoveAccessKeyInvoked: RemoveAccessKeyInvoked::<Identity, OFFSET>,
            FindName: FindName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextElement as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextElement_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Name: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FontSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetFontSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Media")]
    pub FontFamily: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    FontFamily: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetFontFamily: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetFontFamily: usize,
    pub FontWeight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Text::FontWeight,
    ) -> windows_core::HRESULT,
    pub SetFontWeight: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Text::FontWeight,
    ) -> windows_core::HRESULT,
    pub FontStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Text::FontStyle,
    ) -> windows_core::HRESULT,
    pub SetFontStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Text::FontStyle,
    ) -> windows_core::HRESULT,
    pub FontStretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Text::FontStretch,
    ) -> windows_core::HRESULT,
    pub SetFontStretch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Text::FontStretch,
    ) -> windows_core::HRESULT,
    pub CharacterSpacing:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub SetCharacterSpacing:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub Foreground: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Media")))]
    Foreground: usize,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub SetForeground: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Media")))]
    SetForeground: usize,
    pub Language: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetLanguage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsTextScaleFactorEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsTextScaleFactorEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub TextDecorations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Text::TextDecorations,
    ) -> windows_core::HRESULT,
    pub SetTextDecorations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::UI::Text::TextDecorations,
    ) -> windows_core::HRESULT,
    pub ContentStart: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContentEnd: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ElementStart: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ElementEnd: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AllowFocusOnInteraction:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetAllowFocusOnInteraction:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub AccessKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetAccessKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExitDisplayModeOnAccessKeyInvoked:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetExitDisplayModeOnAccessKeyInvoked:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsAccessKeyScope:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsAccessKeyScope:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub AccessKeyScopeOwner: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetAccessKeyScopeOwner: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Input")]
    pub KeyTipPlacementMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::Input::KeyTipPlacementMode,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    KeyTipPlacementMode: usize,
    #[cfg(feature = "UI_Xaml_Input")]
    pub SetKeyTipPlacementMode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Input::KeyTipPlacementMode,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    SetKeyTipPlacementMode: usize,
    pub KeyTipHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetKeyTipHorizontalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub KeyTipVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetKeyTipVerticalOffset:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub XamlRoot: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetXamlRoot: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Input")]
    pub AccessKeyDisplayRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    AccessKeyDisplayRequested: usize,
    pub RemoveAccessKeyDisplayRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Input")]
    pub AccessKeyDisplayDismissed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    AccessKeyDisplayDismissed: usize,
    pub RemoveAccessKeyDisplayDismissed:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Input")]
    pub AccessKeyInvoked: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Input"))]
    AccessKeyInvoked: usize,
    pub RemoveAccessKeyInvoked:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub FindName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextElementFactory,
    ITextElementFactory_Vtbl,
    0xdf51fb95_a5e6_5b16_8e88_9f7cbfa234b1
);
impl windows_core::RuntimeType for ITextElementFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextElementFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITextElementFactory";
}
pub trait ITextElementFactory_Impl: windows_core::IUnknownImpl {}
impl ITextElementFactory_Vtbl {
    pub const fn new<Identity: ITextElementFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextElementFactory, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextElementFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextElementFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ITextElementOverrides,
    ITextElementOverrides_Vtbl,
    0x41b01380_e49f_5fda_8c72_acc1ac1e91df
);
impl windows_core::RuntimeType for ITextElementOverrides {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextElementOverrides {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITextElementOverrides";
}
pub trait ITextElementOverrides_Impl: windows_core::IUnknownImpl {
    fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()>;
}
impl ITextElementOverrides_Vtbl {
    pub const fn new<Identity: ITextElementOverrides_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn OnDisconnectVisualChildren<
            Identity: ITextElementOverrides_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextElementOverrides_Impl::OnDisconnectVisualChildren(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextElementOverrides, OFFSET>(
            ),
            OnDisconnectVisualChildren: OnDisconnectVisualChildren::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextElementOverrides as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextElementOverrides_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub OnDisconnectVisualChildren:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextElementStatics,
    ITextElementStatics_Vtbl,
    0xc9b55919_e1fe_5acd_bac7_c9d7f413b35c
);
impl windows_core::RuntimeType for ITextElementStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextElementStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITextElementStatics";
}
pub trait ITextElementStatics_Impl: windows_core::IUnknownImpl {
    fn FontSizeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn FontFamilyProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn FontWeightProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn FontStyleProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn FontStretchProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn CharacterSpacingProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn ForegroundProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn LanguageProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn IsTextScaleFactorEnabledProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn TextDecorationsProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn AllowFocusOnInteractionProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn AccessKeyProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn ExitDisplayModeOnAccessKeyInvokedProperty(
        &self,
    ) -> windows_core::Result<super::DependencyProperty>;
    fn IsAccessKeyScopeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn AccessKeyScopeOwnerProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn KeyTipPlacementModeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn KeyTipHorizontalOffsetProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn KeyTipVerticalOffsetProperty(&self) -> windows_core::Result<super::DependencyProperty>;
}
impl ITextElementStatics_Vtbl {
    pub const fn new<Identity: ITextElementStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FontSizeProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::FontSizeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FontFamilyProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::FontFamilyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FontWeightProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::FontWeightProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FontStyleProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::FontStyleProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FontStretchProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::FontStretchProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CharacterSpacingProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::CharacterSpacingProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ForegroundProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::ForegroundProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LanguageProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::LanguageProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsTextScaleFactorEnabledProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::IsTextScaleFactorEnabledProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TextDecorationsProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::TextDecorationsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AllowFocusOnInteractionProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::AllowFocusOnInteractionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AccessKeyProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::AccessKeyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExitDisplayModeOnAccessKeyInvokedProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::ExitDisplayModeOnAccessKeyInvokedProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsAccessKeyScopeProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::IsAccessKeyScopeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AccessKeyScopeOwnerProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::AccessKeyScopeOwnerProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn KeyTipPlacementModeProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::KeyTipPlacementModeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn KeyTipHorizontalOffsetProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::KeyTipHorizontalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn KeyTipVerticalOffsetProperty<
            Identity: ITextElementStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextElementStatics_Impl::KeyTipVerticalOffsetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextElementStatics, OFFSET>(),
            FontSizeProperty: FontSizeProperty::<Identity, OFFSET>,
            FontFamilyProperty: FontFamilyProperty::<Identity, OFFSET>,
            FontWeightProperty: FontWeightProperty::<Identity, OFFSET>,
            FontStyleProperty: FontStyleProperty::<Identity, OFFSET>,
            FontStretchProperty: FontStretchProperty::<Identity, OFFSET>,
            CharacterSpacingProperty: CharacterSpacingProperty::<Identity, OFFSET>,
            ForegroundProperty: ForegroundProperty::<Identity, OFFSET>,
            LanguageProperty: LanguageProperty::<Identity, OFFSET>,
            IsTextScaleFactorEnabledProperty: IsTextScaleFactorEnabledProperty::<Identity, OFFSET>,
            TextDecorationsProperty: TextDecorationsProperty::<Identity, OFFSET>,
            AllowFocusOnInteractionProperty: AllowFocusOnInteractionProperty::<Identity, OFFSET>,
            AccessKeyProperty: AccessKeyProperty::<Identity, OFFSET>,
            ExitDisplayModeOnAccessKeyInvokedProperty: ExitDisplayModeOnAccessKeyInvokedProperty::<
                Identity,
                OFFSET,
            >,
            IsAccessKeyScopeProperty: IsAccessKeyScopeProperty::<Identity, OFFSET>,
            AccessKeyScopeOwnerProperty: AccessKeyScopeOwnerProperty::<Identity, OFFSET>,
            KeyTipPlacementModeProperty: KeyTipPlacementModeProperty::<Identity, OFFSET>,
            KeyTipHorizontalOffsetProperty: KeyTipHorizontalOffsetProperty::<Identity, OFFSET>,
            KeyTipVerticalOffsetProperty: KeyTipVerticalOffsetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextElementStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextElementStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FontSizeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FontFamilyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FontWeightProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FontStyleProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FontStretchProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CharacterSpacingProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ForegroundProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LanguageProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsTextScaleFactorEnabledProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TextDecorationsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AllowFocusOnInteractionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AccessKeyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ExitDisplayModeOnAccessKeyInvokedProperty:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    pub IsAccessKeyScopeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AccessKeyScopeOwnerProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub KeyTipPlacementModeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub KeyTipHorizontalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub KeyTipVerticalOffsetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextHighlighter,
    ITextHighlighter_Vtbl,
    0xb756e861_1d2b_5f6f_81fd_c51a5bc068ff
);
impl windows_core::RuntimeType for ITextHighlighter {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
impl windows_core::RuntimeName for ITextHighlighter {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITextHighlighter";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
pub trait ITextHighlighter_Impl: windows_core::IUnknownImpl {
    fn Ranges(&self) -> windows_core::Result<windows_collections::IVector<TextRange>>;
    fn Foreground(&self) -> windows_core::Result<super::Media::Brush>;
    fn SetForeground(
        &self,
        value: windows_core::Ref<'_, super::Media::Brush>,
    ) -> windows_core::Result<()>;
    fn Background(&self) -> windows_core::Result<super::Media::Brush>;
    fn SetBackground(
        &self,
        value: windows_core::Ref<'_, super::Media::Brush>,
    ) -> windows_core::Result<()>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
impl ITextHighlighter_Vtbl {
    pub const fn new<Identity: ITextHighlighter_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Ranges<Identity: ITextHighlighter_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextHighlighter_Impl::Ranges(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Foreground<
            Identity: ITextHighlighter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextHighlighter_Impl::Foreground(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetForeground<
            Identity: ITextHighlighter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextHighlighter_Impl::SetForeground(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn Background<
            Identity: ITextHighlighter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextHighlighter_Impl::Background(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetBackground<
            Identity: ITextHighlighter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextHighlighter_Impl::SetBackground(this, core::mem::transmute_copy(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextHighlighter, OFFSET>(),
            Ranges: Ranges::<Identity, OFFSET>,
            Foreground: Foreground::<Identity, OFFSET>,
            SetForeground: SetForeground::<Identity, OFFSET>,
            Background: Background::<Identity, OFFSET>,
            SetBackground: SetBackground::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextHighlighter as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextHighlighter_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Ranges: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub Foreground: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Media")))]
    Foreground: usize,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub SetForeground: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Media")))]
    SetForeground: usize,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub Background: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Media")))]
    Background: usize,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub SetBackground: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Media")))]
    SetBackground: usize,
}
windows_core::imp::define_interface!(
    ITextHighlighterBase,
    ITextHighlighterBase_Vtbl,
    0x5c21aaf0_3a17_5468_8aac_be14db0ed8c1
);
impl windows_core::RuntimeType for ITextHighlighterBase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextHighlighterBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITextHighlighterBase";
}
pub trait ITextHighlighterBase_Impl: windows_core::IUnknownImpl {}
impl ITextHighlighterBase_Vtbl {
    pub const fn new<Identity: ITextHighlighterBase_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextHighlighterBase, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextHighlighterBase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextHighlighterBase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ITextHighlighterBaseFactory,
    ITextHighlighterBaseFactory_Vtbl,
    0xe091e461_53ab_599e_aaea_800adc72da4f
);
impl windows_core::RuntimeType for ITextHighlighterBaseFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextHighlighterBaseFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITextHighlighterBaseFactory";
}
pub trait ITextHighlighterBaseFactory_Impl: windows_core::IUnknownImpl {}
impl ITextHighlighterBaseFactory_Vtbl {
    pub const fn new<Identity: ITextHighlighterBaseFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ITextHighlighterBaseFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextHighlighterBaseFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextHighlighterBaseFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ITextHighlighterFactory,
    ITextHighlighterFactory_Vtbl,
    0x69c7311f_c019_5b93_b511_81418543bab7
);
impl windows_core::RuntimeType for ITextHighlighterFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextHighlighterFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITextHighlighterFactory";
}
pub trait ITextHighlighterFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        baseInterface: windows_core::Ref<'_, windows_core::IInspectable>,
        innerInterface: windows_core::OutRef<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<TextHighlighter>;
}
impl ITextHighlighterFactory_Vtbl {
    pub const fn new<Identity: ITextHighlighterFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: ITextHighlighterFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextHighlighterFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&baseinterface),
                    core::mem::transmute_copy(&innerinterface),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextHighlighterFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextHighlighterFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextHighlighterFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextHighlighterStatics,
    ITextHighlighterStatics_Vtbl,
    0x4975047a_87ad_51a2_977c_e771de4f4035
);
impl windows_core::RuntimeType for ITextHighlighterStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITextHighlighterStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITextHighlighterStatics";
}
pub trait ITextHighlighterStatics_Impl: windows_core::IUnknownImpl {
    fn ForegroundProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn BackgroundProperty(&self) -> windows_core::Result<super::DependencyProperty>;
}
impl ITextHighlighterStatics_Vtbl {
    pub const fn new<Identity: ITextHighlighterStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ForegroundProperty<
            Identity: ITextHighlighterStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextHighlighterStatics_Impl::ForegroundProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn BackgroundProperty<
            Identity: ITextHighlighterStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextHighlighterStatics_Impl::BackgroundProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextHighlighterStatics, OFFSET>(
            ),
            ForegroundProperty: ForegroundProperty::<Identity, OFFSET>,
            BackgroundProperty: BackgroundProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextHighlighterStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextHighlighterStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ForegroundProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BackgroundProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextPointer,
    ITextPointer_Vtbl,
    0x842eb385_ee41_5930_979b_438fa7525a51
);
impl windows_core::RuntimeType for ITextPointer {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ITextPointer {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITextPointer";
}
#[cfg(feature = "UI_Composition")]
pub trait ITextPointer_Impl: windows_core::IUnknownImpl {
    fn Parent(&self) -> windows_core::Result<super::DependencyObject>;
    fn VisualParent(&self) -> windows_core::Result<super::FrameworkElement>;
    fn LogicalDirection(&self) -> windows_core::Result<LogicalDirection>;
    fn Offset(&self) -> windows_core::Result<i32>;
    fn GetCharacterRect(
        &self,
        direction: LogicalDirection,
    ) -> windows_core::Result<windows::Foundation::Rect>;
    fn GetPositionAtOffset(
        &self,
        offset: i32,
        direction: LogicalDirection,
    ) -> windows_core::Result<TextPointer>;
}
#[cfg(feature = "UI_Composition")]
impl ITextPointer_Vtbl {
    pub const fn new<Identity: ITextPointer_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Parent<Identity: ITextPointer_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextPointer_Impl::Parent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn VisualParent<Identity: ITextPointer_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextPointer_Impl::VisualParent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LogicalDirection<
            Identity: ITextPointer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut LogicalDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextPointer_Impl::LogicalDirection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Offset<Identity: ITextPointer_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextPointer_Impl::Offset(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetCharacterRect<
            Identity: ITextPointer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            direction: LogicalDirection,
            result__: *mut windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextPointer_Impl::GetCharacterRect(this, direction) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetPositionAtOffset<
            Identity: ITextPointer_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            offset: i32,
            direction: LogicalDirection,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextPointer_Impl::GetPositionAtOffset(this, offset, direction) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextPointer, OFFSET>(),
            Parent: Parent::<Identity, OFFSET>,
            VisualParent: VisualParent::<Identity, OFFSET>,
            LogicalDirection: LogicalDirection::<Identity, OFFSET>,
            Offset: Offset::<Identity, OFFSET>,
            GetCharacterRect: GetCharacterRect::<Identity, OFFSET>,
            GetPositionAtOffset: GetPositionAtOffset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextPointer as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextPointer_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Parent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub VisualParent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    VisualParent: usize,
    pub LogicalDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut LogicalDirection,
    ) -> windows_core::HRESULT,
    pub Offset:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub GetCharacterRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        LogicalDirection,
        *mut windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
    pub GetPositionAtOffset: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        LogicalDirection,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITypography,
    ITypography_Vtbl,
    0xfa27e2e3_be5e_5d21_9a5e_90cf102af828
);
impl windows_core::RuntimeType for ITypography {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITypography {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITypography";
}
pub trait ITypography_Impl: windows_core::IUnknownImpl {}
impl ITypography_Vtbl {
    pub const fn new<Identity: ITypography_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITypography, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITypography as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITypography_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ITypographyStatics,
    ITypographyStatics_Vtbl,
    0x55fe4535_2125_533a_ada8_27be2b9e1193
);
impl windows_core::RuntimeType for ITypographyStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITypographyStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.ITypographyStatics";
}
pub trait ITypographyStatics_Impl: windows_core::IUnknownImpl {
    fn AnnotationAlternatesProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetAnnotationAlternates(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<i32>;
    fn SetAnnotationAlternates(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: i32,
    ) -> windows_core::Result<()>;
    fn EastAsianExpertFormsProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetEastAsianExpertForms(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetEastAsianExpertForms(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn EastAsianLanguageProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetEastAsianLanguage(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<super::FontEastAsianLanguage>;
    fn SetEastAsianLanguage(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: super::FontEastAsianLanguage,
    ) -> windows_core::Result<()>;
    fn EastAsianWidthsProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetEastAsianWidths(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<super::FontEastAsianWidths>;
    fn SetEastAsianWidths(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: super::FontEastAsianWidths,
    ) -> windows_core::Result<()>;
    fn StandardLigaturesProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStandardLigatures(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStandardLigatures(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn ContextualLigaturesProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetContextualLigatures(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetContextualLigatures(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn DiscretionaryLigaturesProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetDiscretionaryLigatures(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetDiscretionaryLigatures(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn HistoricalLigaturesProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetHistoricalLigatures(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetHistoricalLigatures(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StandardSwashesProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStandardSwashes(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<i32>;
    fn SetStandardSwashes(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: i32,
    ) -> windows_core::Result<()>;
    fn ContextualSwashesProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetContextualSwashes(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<i32>;
    fn SetContextualSwashes(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: i32,
    ) -> windows_core::Result<()>;
    fn ContextualAlternatesProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetContextualAlternates(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetContextualAlternates(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticAlternatesProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticAlternates(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<i32>;
    fn SetStylisticAlternates(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: i32,
    ) -> windows_core::Result<()>;
    fn StylisticSet1Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet1(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet1(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet2Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet2(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet2(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet3Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet3(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet3(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet4Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet4(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet4(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet5Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet5(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet5(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet6Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet6(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet6(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet7Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet7(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet7(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet8Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet8(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet8(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet9Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet9(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet9(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet10Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet10(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet10(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet11Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet11(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet11(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet12Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet12(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet12(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet13Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet13(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet13(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet14Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet14(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet14(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet15Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet15(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet15(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet16Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet16(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet16(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet17Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet17(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet17(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet18Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet18(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet18(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet19Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet19(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet19(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn StylisticSet20Property(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetStylisticSet20(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetStylisticSet20(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn CapitalsProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetCapitals(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<super::FontCapitals>;
    fn SetCapitals(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: super::FontCapitals,
    ) -> windows_core::Result<()>;
    fn CapitalSpacingProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetCapitalSpacing(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetCapitalSpacing(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn KerningProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetKerning(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetKerning(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn CaseSensitiveFormsProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetCaseSensitiveForms(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetCaseSensitiveForms(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn HistoricalFormsProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetHistoricalForms(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetHistoricalForms(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn FractionProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetFraction(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<super::FontFraction>;
    fn SetFraction(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: super::FontFraction,
    ) -> windows_core::Result<()>;
    fn NumeralStyleProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetNumeralStyle(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<super::FontNumeralStyle>;
    fn SetNumeralStyle(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: super::FontNumeralStyle,
    ) -> windows_core::Result<()>;
    fn NumeralAlignmentProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetNumeralAlignment(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<super::FontNumeralAlignment>;
    fn SetNumeralAlignment(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: super::FontNumeralAlignment,
    ) -> windows_core::Result<()>;
    fn SlashedZeroProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetSlashedZero(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetSlashedZero(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn MathematicalGreekProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetMathematicalGreek(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetMathematicalGreek(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn VariantsProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetVariants(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<super::FontVariants>;
    fn SetVariants(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: super::FontVariants,
    ) -> windows_core::Result<()>;
}
impl ITypographyStatics_Vtbl {
    pub const fn new<Identity: ITypographyStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AnnotationAlternatesProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::AnnotationAlternatesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAnnotationAlternates<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetAnnotationAlternates(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAnnotationAlternates<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetAnnotationAlternates(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn EastAsianExpertFormsProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::EastAsianExpertFormsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetEastAsianExpertForms<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetEastAsianExpertForms(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEastAsianExpertForms<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetEastAsianExpertForms(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn EastAsianLanguageProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::EastAsianLanguageProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetEastAsianLanguage<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut super::FontEastAsianLanguage,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetEastAsianLanguage(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEastAsianLanguage<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: super::FontEastAsianLanguage,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetEastAsianLanguage(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn EastAsianWidthsProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::EastAsianWidthsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetEastAsianWidths<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut super::FontEastAsianWidths,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetEastAsianWidths(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetEastAsianWidths<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: super::FontEastAsianWidths,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetEastAsianWidths(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StandardLigaturesProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StandardLigaturesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStandardLigatures<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStandardLigatures(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStandardLigatures<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStandardLigatures(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn ContextualLigaturesProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::ContextualLigaturesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetContextualLigatures<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetContextualLigatures(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContextualLigatures<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetContextualLigatures(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn DiscretionaryLigaturesProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::DiscretionaryLigaturesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetDiscretionaryLigatures<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetDiscretionaryLigatures(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDiscretionaryLigatures<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetDiscretionaryLigatures(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn HistoricalLigaturesProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::HistoricalLigaturesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetHistoricalLigatures<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetHistoricalLigatures(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHistoricalLigatures<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetHistoricalLigatures(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StandardSwashesProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StandardSwashesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStandardSwashes<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStandardSwashes(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStandardSwashes<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStandardSwashes(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn ContextualSwashesProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::ContextualSwashesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetContextualSwashes<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetContextualSwashes(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContextualSwashes<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetContextualSwashes(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn ContextualAlternatesProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::ContextualAlternatesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetContextualAlternates<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetContextualAlternates(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetContextualAlternates<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetContextualAlternates(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticAlternatesProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticAlternatesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticAlternates<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticAlternates(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticAlternates<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticAlternates(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet1Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet1Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet1<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet1(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet1<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet1(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet2Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet2Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet2<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet2(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet2<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet2(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet3Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet3Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet3<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet3(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet3<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet3(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet4Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet4Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet4<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet4(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet4<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet4(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet5Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet5Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet5<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet5(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet5<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet5(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet6Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet6Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet6<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet6(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet6<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet6(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet7Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet7Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet7<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet7(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet7<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet7(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet8Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet8Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet8<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet8(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet8<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet8(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet9Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet9Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet9<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet9(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet9<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet9(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet10Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet10Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet10<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet10(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet10<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet10(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet11Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet11Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet11<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet11(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet11<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet11(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet12Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet12Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet12<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet12(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet12<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet12(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet13Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet13Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet13<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet13(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet13<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet13(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet14Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet14Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet14<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet14(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet14<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet14(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet15Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet15Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet15<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet15(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet15<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet15(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet16Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet16Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet16<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet16(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet16<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet16(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet17Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet17Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet17<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet17(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet17<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet17(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet18Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet18Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet18<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet18(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet18<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet18(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet19Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet19Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet19<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet19(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet19<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet19(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn StylisticSet20Property<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::StylisticSet20Property(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStylisticSet20<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetStylisticSet20(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetStylisticSet20<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetStylisticSet20(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn CapitalsProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::CapitalsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetCapitals<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut super::FontCapitals,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetCapitals(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCapitals<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: super::FontCapitals,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetCapitals(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn CapitalSpacingProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::CapitalSpacingProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetCapitalSpacing<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetCapitalSpacing(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCapitalSpacing<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetCapitalSpacing(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn KerningProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::KerningProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetKerning<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetKerning(this, core::mem::transmute_copy(&element))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetKerning<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetKerning(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn CaseSensitiveFormsProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::CaseSensitiveFormsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetCaseSensitiveForms<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetCaseSensitiveForms(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCaseSensitiveForms<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetCaseSensitiveForms(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn HistoricalFormsProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::HistoricalFormsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetHistoricalForms<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetHistoricalForms(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHistoricalForms<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetHistoricalForms(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn FractionProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::FractionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetFraction<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut super::FontFraction,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetFraction(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFraction<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: super::FontFraction,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetFraction(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn NumeralStyleProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::NumeralStyleProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetNumeralStyle<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut super::FontNumeralStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetNumeralStyle(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetNumeralStyle<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: super::FontNumeralStyle,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetNumeralStyle(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn NumeralAlignmentProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::NumeralAlignmentProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetNumeralAlignment<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut super::FontNumeralAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetNumeralAlignment(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetNumeralAlignment<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: super::FontNumeralAlignment,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetNumeralAlignment(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn SlashedZeroProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::SlashedZeroProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetSlashedZero<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetSlashedZero(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSlashedZero<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetSlashedZero(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn MathematicalGreekProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::MathematicalGreekProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetMathematicalGreek<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetMathematicalGreek(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetMathematicalGreek<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetMathematicalGreek(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn VariantsProperty<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::VariantsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetVariants<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut super::FontVariants,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITypographyStatics_Impl::GetVariants(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetVariants<
            Identity: ITypographyStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: super::FontVariants,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITypographyStatics_Impl::SetVariants(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITypographyStatics, OFFSET>(),
            AnnotationAlternatesProperty: AnnotationAlternatesProperty::<Identity, OFFSET>,
            GetAnnotationAlternates: GetAnnotationAlternates::<Identity, OFFSET>,
            SetAnnotationAlternates: SetAnnotationAlternates::<Identity, OFFSET>,
            EastAsianExpertFormsProperty: EastAsianExpertFormsProperty::<Identity, OFFSET>,
            GetEastAsianExpertForms: GetEastAsianExpertForms::<Identity, OFFSET>,
            SetEastAsianExpertForms: SetEastAsianExpertForms::<Identity, OFFSET>,
            EastAsianLanguageProperty: EastAsianLanguageProperty::<Identity, OFFSET>,
            GetEastAsianLanguage: GetEastAsianLanguage::<Identity, OFFSET>,
            SetEastAsianLanguage: SetEastAsianLanguage::<Identity, OFFSET>,
            EastAsianWidthsProperty: EastAsianWidthsProperty::<Identity, OFFSET>,
            GetEastAsianWidths: GetEastAsianWidths::<Identity, OFFSET>,
            SetEastAsianWidths: SetEastAsianWidths::<Identity, OFFSET>,
            StandardLigaturesProperty: StandardLigaturesProperty::<Identity, OFFSET>,
            GetStandardLigatures: GetStandardLigatures::<Identity, OFFSET>,
            SetStandardLigatures: SetStandardLigatures::<Identity, OFFSET>,
            ContextualLigaturesProperty: ContextualLigaturesProperty::<Identity, OFFSET>,
            GetContextualLigatures: GetContextualLigatures::<Identity, OFFSET>,
            SetContextualLigatures: SetContextualLigatures::<Identity, OFFSET>,
            DiscretionaryLigaturesProperty: DiscretionaryLigaturesProperty::<Identity, OFFSET>,
            GetDiscretionaryLigatures: GetDiscretionaryLigatures::<Identity, OFFSET>,
            SetDiscretionaryLigatures: SetDiscretionaryLigatures::<Identity, OFFSET>,
            HistoricalLigaturesProperty: HistoricalLigaturesProperty::<Identity, OFFSET>,
            GetHistoricalLigatures: GetHistoricalLigatures::<Identity, OFFSET>,
            SetHistoricalLigatures: SetHistoricalLigatures::<Identity, OFFSET>,
            StandardSwashesProperty: StandardSwashesProperty::<Identity, OFFSET>,
            GetStandardSwashes: GetStandardSwashes::<Identity, OFFSET>,
            SetStandardSwashes: SetStandardSwashes::<Identity, OFFSET>,
            ContextualSwashesProperty: ContextualSwashesProperty::<Identity, OFFSET>,
            GetContextualSwashes: GetContextualSwashes::<Identity, OFFSET>,
            SetContextualSwashes: SetContextualSwashes::<Identity, OFFSET>,
            ContextualAlternatesProperty: ContextualAlternatesProperty::<Identity, OFFSET>,
            GetContextualAlternates: GetContextualAlternates::<Identity, OFFSET>,
            SetContextualAlternates: SetContextualAlternates::<Identity, OFFSET>,
            StylisticAlternatesProperty: StylisticAlternatesProperty::<Identity, OFFSET>,
            GetStylisticAlternates: GetStylisticAlternates::<Identity, OFFSET>,
            SetStylisticAlternates: SetStylisticAlternates::<Identity, OFFSET>,
            StylisticSet1Property: StylisticSet1Property::<Identity, OFFSET>,
            GetStylisticSet1: GetStylisticSet1::<Identity, OFFSET>,
            SetStylisticSet1: SetStylisticSet1::<Identity, OFFSET>,
            StylisticSet2Property: StylisticSet2Property::<Identity, OFFSET>,
            GetStylisticSet2: GetStylisticSet2::<Identity, OFFSET>,
            SetStylisticSet2: SetStylisticSet2::<Identity, OFFSET>,
            StylisticSet3Property: StylisticSet3Property::<Identity, OFFSET>,
            GetStylisticSet3: GetStylisticSet3::<Identity, OFFSET>,
            SetStylisticSet3: SetStylisticSet3::<Identity, OFFSET>,
            StylisticSet4Property: StylisticSet4Property::<Identity, OFFSET>,
            GetStylisticSet4: GetStylisticSet4::<Identity, OFFSET>,
            SetStylisticSet4: SetStylisticSet4::<Identity, OFFSET>,
            StylisticSet5Property: StylisticSet5Property::<Identity, OFFSET>,
            GetStylisticSet5: GetStylisticSet5::<Identity, OFFSET>,
            SetStylisticSet5: SetStylisticSet5::<Identity, OFFSET>,
            StylisticSet6Property: StylisticSet6Property::<Identity, OFFSET>,
            GetStylisticSet6: GetStylisticSet6::<Identity, OFFSET>,
            SetStylisticSet6: SetStylisticSet6::<Identity, OFFSET>,
            StylisticSet7Property: StylisticSet7Property::<Identity, OFFSET>,
            GetStylisticSet7: GetStylisticSet7::<Identity, OFFSET>,
            SetStylisticSet7: SetStylisticSet7::<Identity, OFFSET>,
            StylisticSet8Property: StylisticSet8Property::<Identity, OFFSET>,
            GetStylisticSet8: GetStylisticSet8::<Identity, OFFSET>,
            SetStylisticSet8: SetStylisticSet8::<Identity, OFFSET>,
            StylisticSet9Property: StylisticSet9Property::<Identity, OFFSET>,
            GetStylisticSet9: GetStylisticSet9::<Identity, OFFSET>,
            SetStylisticSet9: SetStylisticSet9::<Identity, OFFSET>,
            StylisticSet10Property: StylisticSet10Property::<Identity, OFFSET>,
            GetStylisticSet10: GetStylisticSet10::<Identity, OFFSET>,
            SetStylisticSet10: SetStylisticSet10::<Identity, OFFSET>,
            StylisticSet11Property: StylisticSet11Property::<Identity, OFFSET>,
            GetStylisticSet11: GetStylisticSet11::<Identity, OFFSET>,
            SetStylisticSet11: SetStylisticSet11::<Identity, OFFSET>,
            StylisticSet12Property: StylisticSet12Property::<Identity, OFFSET>,
            GetStylisticSet12: GetStylisticSet12::<Identity, OFFSET>,
            SetStylisticSet12: SetStylisticSet12::<Identity, OFFSET>,
            StylisticSet13Property: StylisticSet13Property::<Identity, OFFSET>,
            GetStylisticSet13: GetStylisticSet13::<Identity, OFFSET>,
            SetStylisticSet13: SetStylisticSet13::<Identity, OFFSET>,
            StylisticSet14Property: StylisticSet14Property::<Identity, OFFSET>,
            GetStylisticSet14: GetStylisticSet14::<Identity, OFFSET>,
            SetStylisticSet14: SetStylisticSet14::<Identity, OFFSET>,
            StylisticSet15Property: StylisticSet15Property::<Identity, OFFSET>,
            GetStylisticSet15: GetStylisticSet15::<Identity, OFFSET>,
            SetStylisticSet15: SetStylisticSet15::<Identity, OFFSET>,
            StylisticSet16Property: StylisticSet16Property::<Identity, OFFSET>,
            GetStylisticSet16: GetStylisticSet16::<Identity, OFFSET>,
            SetStylisticSet16: SetStylisticSet16::<Identity, OFFSET>,
            StylisticSet17Property: StylisticSet17Property::<Identity, OFFSET>,
            GetStylisticSet17: GetStylisticSet17::<Identity, OFFSET>,
            SetStylisticSet17: SetStylisticSet17::<Identity, OFFSET>,
            StylisticSet18Property: StylisticSet18Property::<Identity, OFFSET>,
            GetStylisticSet18: GetStylisticSet18::<Identity, OFFSET>,
            SetStylisticSet18: SetStylisticSet18::<Identity, OFFSET>,
            StylisticSet19Property: StylisticSet19Property::<Identity, OFFSET>,
            GetStylisticSet19: GetStylisticSet19::<Identity, OFFSET>,
            SetStylisticSet19: SetStylisticSet19::<Identity, OFFSET>,
            StylisticSet20Property: StylisticSet20Property::<Identity, OFFSET>,
            GetStylisticSet20: GetStylisticSet20::<Identity, OFFSET>,
            SetStylisticSet20: SetStylisticSet20::<Identity, OFFSET>,
            CapitalsProperty: CapitalsProperty::<Identity, OFFSET>,
            GetCapitals: GetCapitals::<Identity, OFFSET>,
            SetCapitals: SetCapitals::<Identity, OFFSET>,
            CapitalSpacingProperty: CapitalSpacingProperty::<Identity, OFFSET>,
            GetCapitalSpacing: GetCapitalSpacing::<Identity, OFFSET>,
            SetCapitalSpacing: SetCapitalSpacing::<Identity, OFFSET>,
            KerningProperty: KerningProperty::<Identity, OFFSET>,
            GetKerning: GetKerning::<Identity, OFFSET>,
            SetKerning: SetKerning::<Identity, OFFSET>,
            CaseSensitiveFormsProperty: CaseSensitiveFormsProperty::<Identity, OFFSET>,
            GetCaseSensitiveForms: GetCaseSensitiveForms::<Identity, OFFSET>,
            SetCaseSensitiveForms: SetCaseSensitiveForms::<Identity, OFFSET>,
            HistoricalFormsProperty: HistoricalFormsProperty::<Identity, OFFSET>,
            GetHistoricalForms: GetHistoricalForms::<Identity, OFFSET>,
            SetHistoricalForms: SetHistoricalForms::<Identity, OFFSET>,
            FractionProperty: FractionProperty::<Identity, OFFSET>,
            GetFraction: GetFraction::<Identity, OFFSET>,
            SetFraction: SetFraction::<Identity, OFFSET>,
            NumeralStyleProperty: NumeralStyleProperty::<Identity, OFFSET>,
            GetNumeralStyle: GetNumeralStyle::<Identity, OFFSET>,
            SetNumeralStyle: SetNumeralStyle::<Identity, OFFSET>,
            NumeralAlignmentProperty: NumeralAlignmentProperty::<Identity, OFFSET>,
            GetNumeralAlignment: GetNumeralAlignment::<Identity, OFFSET>,
            SetNumeralAlignment: SetNumeralAlignment::<Identity, OFFSET>,
            SlashedZeroProperty: SlashedZeroProperty::<Identity, OFFSET>,
            GetSlashedZero: GetSlashedZero::<Identity, OFFSET>,
            SetSlashedZero: SetSlashedZero::<Identity, OFFSET>,
            MathematicalGreekProperty: MathematicalGreekProperty::<Identity, OFFSET>,
            GetMathematicalGreek: GetMathematicalGreek::<Identity, OFFSET>,
            SetMathematicalGreek: SetMathematicalGreek::<Identity, OFFSET>,
            VariantsProperty: VariantsProperty::<Identity, OFFSET>,
            GetVariants: GetVariants::<Identity, OFFSET>,
            SetVariants: SetVariants::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITypographyStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITypographyStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AnnotationAlternatesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetAnnotationAlternates: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub SetAnnotationAlternates: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    pub EastAsianExpertFormsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetEastAsianExpertForms: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetEastAsianExpertForms: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub EastAsianLanguageProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetEastAsianLanguage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut super::FontEastAsianLanguage,
    ) -> windows_core::HRESULT,
    pub SetEastAsianLanguage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        super::FontEastAsianLanguage,
    ) -> windows_core::HRESULT,
    pub EastAsianWidthsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetEastAsianWidths: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut super::FontEastAsianWidths,
    ) -> windows_core::HRESULT,
    pub SetEastAsianWidths: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        super::FontEastAsianWidths,
    ) -> windows_core::HRESULT,
    pub StandardLigaturesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStandardLigatures: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStandardLigatures: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub ContextualLigaturesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetContextualLigatures: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetContextualLigatures: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub DiscretionaryLigaturesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetDiscretionaryLigatures: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetDiscretionaryLigatures: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub HistoricalLigaturesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetHistoricalLigatures: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetHistoricalLigatures: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StandardSwashesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStandardSwashes: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub SetStandardSwashes: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    pub ContextualSwashesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetContextualSwashes: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub SetContextualSwashes: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    pub ContextualAlternatesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetContextualAlternates: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetContextualAlternates: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticAlternatesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticAlternates: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub SetStylisticAlternates: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    pub StylisticSet1Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet1: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet1: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet2Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet3Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet3: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet3: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet4Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet4: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet4: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet5Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet5: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet5: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet6Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet6: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet6: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet7Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet7: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet7: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet8Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet8: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet8: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet9Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet9: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet9: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet10Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet10: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet10: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet11Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet11: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet11: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet12Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet12: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet12: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet13Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet13: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet13: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet14Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet14: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet14: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet15Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet15: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet15: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet16Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet16: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet16: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet17Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet17: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet17: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet18Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet18: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet18: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet19Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet19: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet19: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub StylisticSet20Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStylisticSet20: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetStylisticSet20: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub CapitalsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetCapitals: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut super::FontCapitals,
    ) -> windows_core::HRESULT,
    pub SetCapitals: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        super::FontCapitals,
    ) -> windows_core::HRESULT,
    pub CapitalSpacingProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetCapitalSpacing: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetCapitalSpacing: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub KerningProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetKerning: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetKerning: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub CaseSensitiveFormsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetCaseSensitiveForms: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetCaseSensitiveForms: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub HistoricalFormsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetHistoricalForms: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetHistoricalForms: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub FractionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetFraction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut super::FontFraction,
    ) -> windows_core::HRESULT,
    pub SetFraction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        super::FontFraction,
    ) -> windows_core::HRESULT,
    pub NumeralStyleProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetNumeralStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut super::FontNumeralStyle,
    ) -> windows_core::HRESULT,
    pub SetNumeralStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        super::FontNumeralStyle,
    ) -> windows_core::HRESULT,
    pub NumeralAlignmentProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetNumeralAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut super::FontNumeralAlignment,
    ) -> windows_core::HRESULT,
    pub SetNumeralAlignment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        super::FontNumeralAlignment,
    ) -> windows_core::HRESULT,
    pub SlashedZeroProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetSlashedZero: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetSlashedZero: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub MathematicalGreekProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetMathematicalGreek: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetMathematicalGreek: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub VariantsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetVariants: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut super::FontVariants,
    ) -> windows_core::HRESULT,
    pub SetVariants: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        super::FontVariants,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IUnderline,
    IUnderline_Vtbl,
    0x68aaec6e_ea71_5ed2_b83e_91684b25efb9
);
impl windows_core::RuntimeType for IUnderline {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IUnderline {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.IUnderline";
}
pub trait IUnderline_Impl: windows_core::IUnknownImpl {}
impl IUnderline_Vtbl {
    pub const fn new<Identity: IUnderline_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IUnderline, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IUnderline as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IUnderline_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Inline(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(Inline, windows_core::IUnknown, windows_core::IInspectable);
windows_core::imp::required_hierarchy!(Inline, TextElement, super::DependencyObject);
impl Inline {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn new() -> windows_core::Result<Inline> {
        Self::IInlineFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    fn IInlineFactory<R, F: FnOnce(&IInlineFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Inline, IInlineFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Inline {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInline>();
}
unsafe impl windows_core::Interface for Inline {
    type Vtable = <IInline as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IInline as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Inline {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.Inline";
}
unsafe impl Send for Inline {}
unsafe impl Sync for Inline {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InlineCollection(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InlineCollection,
    windows_core::IUnknown,
    windows_core::IInspectable,
    windows_collections::IVector<Inline>
);
windows_core::imp::required_hierarchy!(InlineCollection, windows_collections::IIterable<Inline>);
impl InlineCollection {
    pub fn First(&self) -> windows_core::Result<windows_collections::IIterator<Inline>> {
        let this = &windows_core::Interface::cast::<windows_collections::IIterable<Inline>>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).First)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAt(&self, index: u32) -> windows_core::Result<Inline> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAt)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Size(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Size)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetView(&self) -> windows_core::Result<windows_collections::IVectorView<Inline>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<Inline>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IndexOf)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
                index,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<Inline>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<P1>(&self, index: u32, value: P1) -> windows_core::Result<()>
    where
        P1: windows_core::Param<Inline>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).InsertAt)(
                windows_core::Interface::as_raw(this),
                index,
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAt)(
                windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<Inline>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Append)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAtEnd)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Clear)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [Option<Inline>],
    ) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMany)(
                windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                core::mem::transmute_copy(&items),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[Option<Inline>]) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReplaceAll)(
                windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for InlineCollection {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, windows_collections::IVector<Inline>>();
}
unsafe impl windows_core::Interface for InlineCollection {
    type Vtable = <windows_collections::IVector<Inline> as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <windows_collections::IVector<Inline> as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InlineCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.InlineCollection";
}
unsafe impl Send for InlineCollection {}
unsafe impl Sync for InlineCollection {}
impl IntoIterator for InlineCollection {
    type Item = Inline;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        IntoIterator::into_iter(&self)
    }
}
impl IntoIterator for &InlineCollection {
    type Item = Inline;
    type IntoIter = windows_collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct InlineUIContainer(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    InlineUIContainer,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    InlineUIContainer,
    Inline,
    TextElement,
    super::DependencyObject
);
impl InlineUIContainer {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            InlineUIContainer,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Child(&self) -> windows_core::Result<super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Child)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetChild<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetChild)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for InlineUIContainer {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IInlineUIContainer>();
}
unsafe impl windows_core::Interface for InlineUIContainer {
    type Vtable = <IInlineUIContainer as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IInlineUIContainer as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for InlineUIContainer {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.InlineUIContainer";
}
unsafe impl Send for InlineUIContainer {}
unsafe impl Sync for InlineUIContainer {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Italic(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(Italic, windows_core::IUnknown, windows_core::IInspectable);
windows_core::imp::required_hierarchy!(Italic, Span, Inline, TextElement, super::DependencyObject);
impl Italic {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Italic, windows_core::imp::IGenericFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Inlines(&self) -> windows_core::Result<InlineCollection> {
        let this = &windows_core::Interface::cast::<ISpan>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Inlines)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInlines<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InlineCollection>,
    {
        let this = &windows_core::Interface::cast::<ISpan>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInlines)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for Italic {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IItalic>();
}
unsafe impl windows_core::Interface for Italic {
    type Vtable = <IItalic as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IItalic as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Italic {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.Italic";
}
unsafe impl Send for Italic {}
unsafe impl Sync for Italic {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct LineBreak(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    LineBreak,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(LineBreak, Inline, TextElement, super::DependencyObject);
impl LineBreak {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            LineBreak,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for LineBreak {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ILineBreak>();
}
unsafe impl windows_core::Interface for LineBreak {
    type Vtable = <ILineBreak as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ILineBreak as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for LineBreak {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.LineBreak";
}
unsafe impl Send for LineBreak {}
unsafe impl Sync for LineBreak {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct LogicalDirection(pub i32);
impl LogicalDirection {
    pub const Backward: Self = Self(0i32);
    pub const Forward: Self = Self(1i32);
}
impl windows_core::TypeKind for LogicalDirection {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for LogicalDirection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Documents.LogicalDirection;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Paragraph(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Paragraph,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(Paragraph, Block, TextElement, super::DependencyObject);
impl Paragraph {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            Paragraph,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn TextAlignment(&self) -> windows_core::Result<super::TextAlignment> {
        let this = &windows_core::Interface::cast::<IBlock>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextAlignment(&self, value: super::TextAlignment) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IBlock>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalTextAlignment(&self) -> windows_core::Result<super::TextAlignment> {
        let this = &windows_core::Interface::cast::<IBlock>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalTextAlignment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHorizontalTextAlignment(
        &self,
        value: super::TextAlignment,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IBlock>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetHorizontalTextAlignment)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LineHeight(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<IBlock>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LineHeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLineHeight(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IBlock>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLineHeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LineStackingStrategy(&self) -> windows_core::Result<super::LineStackingStrategy> {
        let this = &windows_core::Interface::cast::<IBlock>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LineStackingStrategy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLineStackingStrategy(
        &self,
        value: super::LineStackingStrategy,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IBlock>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLineStackingStrategy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Margin(&self) -> windows_core::Result<super::Thickness> {
        let this = &windows_core::Interface::cast::<IBlock>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Margin)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetMargin(&self, value: super::Thickness) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IBlock>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetMargin)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Inlines(&self) -> windows_core::Result<InlineCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Inlines)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TextIndent(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextIndent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextIndent(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextIndent)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextIndentProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IParagraphStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextIndentProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    fn IParagraphStatics<R, F: FnOnce(&IParagraphStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Paragraph, IParagraphStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Paragraph {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IParagraph>();
}
unsafe impl windows_core::Interface for Paragraph {
    type Vtable = <IParagraph as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IParagraph as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Paragraph {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.Paragraph";
}
unsafe impl Send for Paragraph {}
unsafe impl Sync for Paragraph {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Run(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(Run, windows_core::IUnknown, windows_core::IInspectable);
windows_core::imp::required_hierarchy!(Run, Inline, TextElement, super::DependencyObject);
impl Run {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Run, windows_core::imp::IGenericFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Text(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Text)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetText(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetText)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn FlowDirection(&self) -> windows_core::Result<super::FlowDirection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FlowDirection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFlowDirection(&self, value: super::FlowDirection) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFlowDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FlowDirectionProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IRunStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FlowDirectionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    fn IRunStatics<R, F: FnOnce(&IRunStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Run, IRunStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Run {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IRun>();
}
unsafe impl windows_core::Interface for Run {
    type Vtable = <IRun as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IRun as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Run {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.Run";
}
unsafe impl Send for Run {}
unsafe impl Sync for Run {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Span(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(Span, windows_core::IUnknown, windows_core::IInspectable);
windows_core::imp::required_hierarchy!(Span, Inline, TextElement, super::DependencyObject);
impl Span {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Inlines(&self) -> windows_core::Result<InlineCollection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Inlines)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInlines<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InlineCollection>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetInlines)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<Span> {
        Self::ISpanFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    fn ISpanFactory<R, F: FnOnce(&ISpanFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Span, ISpanFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Span {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISpan>();
}
unsafe impl windows_core::Interface for Span {
    type Vtable = <ISpan as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISpan as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Span {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.Span";
}
unsafe impl Send for Span {}
unsafe impl Sync for Span {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TextElement(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TextElement,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(TextElement, super::DependencyObject);
impl TextElement {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn FontSizeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSizeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FontFamilyProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamilyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FontWeightProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeightProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FontStyleProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyleProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FontStretchProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretchProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CharacterSpacingProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacingProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ForegroundProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ForegroundProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn LanguageProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LanguageProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsTextScaleFactorEnabledProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabledProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn TextDecorationsProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorationsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AllowFocusOnInteractionProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteractionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AccessKeyProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ExitDisplayModeOnAccessKeyInvokedProperty(
    ) -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvokedProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsAccessKeyScopeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScopeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AccessKeyScopeOwnerProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwnerProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn KeyTipPlacementModeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementModeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn KeyTipHorizontalOffsetProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn KeyTipVerticalOffsetProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextElementStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffsetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ITextElementStatics<R, F: FnOnce(&ITextElementStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<TextElement, ITextElementStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for TextElement {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITextElement>();
}
unsafe impl windows_core::Interface for TextElement {
    type Vtable = <ITextElement as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITextElement as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TextElement {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.TextElement";
}
unsafe impl Send for TextElement {}
unsafe impl Sync for TextElement {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TextHighlighter(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TextHighlighter,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl TextHighlighter {
    pub fn Ranges(&self) -> windows_core::Result<windows_collections::IVector<TextRange>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Ranges)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Background(&self) -> windows_core::Result<super::Media::Brush> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Background)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetBackground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetBackground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn new() -> windows_core::Result<TextHighlighter> {
        Self::ITextHighlighterFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::ptr::null_mut(),
                &mut core::ptr::null_mut(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ForegroundProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextHighlighterStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ForegroundProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn BackgroundProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITextHighlighterStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BackgroundProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ITextHighlighterFactory<
        R,
        F: FnOnce(&ITextHighlighterFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<TextHighlighter, ITextHighlighterFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn ITextHighlighterStatics<
        R,
        F: FnOnce(&ITextHighlighterStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<TextHighlighter, ITextHighlighterStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for TextHighlighter {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITextHighlighter>();
}
unsafe impl windows_core::Interface for TextHighlighter {
    type Vtable = <ITextHighlighter as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITextHighlighter as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TextHighlighter {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.TextHighlighter";
}
unsafe impl Send for TextHighlighter {}
unsafe impl Sync for TextHighlighter {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TextHighlighterBase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TextHighlighterBase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(TextHighlighterBase, super::DependencyObject);
impl TextHighlighterBase {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for TextHighlighterBase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITextHighlighterBase>();
}
unsafe impl windows_core::Interface for TextHighlighterBase {
    type Vtable = <ITextHighlighterBase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITextHighlighterBase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TextHighlighterBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.TextHighlighterBase";
}
unsafe impl Send for TextHighlighterBase {}
unsafe impl Sync for TextHighlighterBase {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TextPointer(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TextPointer,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl TextPointer {
    pub fn Parent(&self) -> windows_core::Result<super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn VisualParent(&self) -> windows_core::Result<super::FrameworkElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VisualParent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn LogicalDirection(&self) -> windows_core::Result<LogicalDirection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LogicalDirection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Offset(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Offset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetCharacterRect(
        &self,
        direction: LogicalDirection,
    ) -> windows_core::Result<windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCharacterRect)(
                windows_core::Interface::as_raw(this),
                direction,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetPositionAtOffset(
        &self,
        offset: i32,
        direction: LogicalDirection,
    ) -> windows_core::Result<TextPointer> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetPositionAtOffset)(
                windows_core::Interface::as_raw(this),
                offset,
                direction,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for TextPointer {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITextPointer>();
}
unsafe impl windows_core::Interface for TextPointer {
    type Vtable = <ITextPointer as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITextPointer as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TextPointer {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.TextPointer";
}
unsafe impl Send for TextPointer {}
unsafe impl Sync for TextPointer {}
#[repr(C)]
#[derive(Clone, Copy, Debug, Default, PartialEq)]
pub struct TextRange {
    pub StartIndex: i32,
    pub Length: i32,
}
impl windows_core::TypeKind for TextRange {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for TextRange {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"struct(Microsoft.UI.Xaml.Documents.TextRange;i4;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Typography(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Typography,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl Typography {
    pub fn AnnotationAlternatesProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnnotationAlternatesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetAnnotationAlternates<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnnotationAlternates)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetAnnotationAlternates<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetAnnotationAlternates)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn EastAsianExpertFormsProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EastAsianExpertFormsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetEastAsianExpertForms<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetEastAsianExpertForms)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetEastAsianExpertForms<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetEastAsianExpertForms)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn EastAsianLanguageProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EastAsianLanguageProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetEastAsianLanguage<P0>(
        element: P0,
    ) -> windows_core::Result<super::FontEastAsianLanguage>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetEastAsianLanguage)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetEastAsianLanguage<P0>(
        element: P0,
        value: super::FontEastAsianLanguage,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetEastAsianLanguage)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn EastAsianWidthsProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EastAsianWidthsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetEastAsianWidths<P0>(element: P0) -> windows_core::Result<super::FontEastAsianWidths>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetEastAsianWidths)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetEastAsianWidths<P0>(
        element: P0,
        value: super::FontEastAsianWidths,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetEastAsianWidths)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StandardLigaturesProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StandardLigaturesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStandardLigatures<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStandardLigatures)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStandardLigatures<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStandardLigatures)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn ContextualLigaturesProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextualLigaturesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetContextualLigatures<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetContextualLigatures)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetContextualLigatures<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetContextualLigatures)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn DiscretionaryLigaturesProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DiscretionaryLigaturesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetDiscretionaryLigatures<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDiscretionaryLigatures)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetDiscretionaryLigatures<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetDiscretionaryLigatures)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn HistoricalLigaturesProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HistoricalLigaturesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetHistoricalLigatures<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHistoricalLigatures)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetHistoricalLigatures<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetHistoricalLigatures)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StandardSwashesProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StandardSwashesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStandardSwashes<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStandardSwashes)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStandardSwashes<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStandardSwashes)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn ContextualSwashesProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextualSwashesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetContextualSwashes<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetContextualSwashes)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetContextualSwashes<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetContextualSwashes)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn ContextualAlternatesProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContextualAlternatesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetContextualAlternates<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetContextualAlternates)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetContextualAlternates<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetContextualAlternates)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticAlternatesProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticAlternatesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticAlternates<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticAlternates)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticAlternates<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticAlternates)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet1Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet1Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet1<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet1)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet1<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet1)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet2Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet2Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet2<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet2)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet2<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet2)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet3Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet3Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet3<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet3)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet3<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet3)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet4Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet4Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet4<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet4)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet4<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet4)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet5Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet5Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet5<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet5)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet5<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet5)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet6Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet6Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet6<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet6)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet6<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet6)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet7Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet7Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet7<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet7)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet7<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet7)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet8Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet8Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet8<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet8)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet8<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet8)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet9Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet9Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet9<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet9)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet9<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet9)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet10Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet10Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet10<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet10)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet10<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet10)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet11Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet11Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet11<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet11)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet11<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet11)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet12Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet12Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet12<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet12)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet12<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet12)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet13Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet13Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet13<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet13)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet13<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet13)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet14Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet14Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet14<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet14)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet14<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet14)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet15Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet15Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet15<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet15)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet15<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet15)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet16Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet16Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet16<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet16)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet16<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet16)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet17Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet17Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet17<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet17)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet17<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet17)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet18Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet18Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet18<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet18)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet18<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet18)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet19Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet19Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet19<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet19)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet19<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet19)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn StylisticSet20Property() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StylisticSet20Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetStylisticSet20<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStylisticSet20)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetStylisticSet20<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetStylisticSet20)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn CapitalsProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapitalsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetCapitals<P0>(element: P0) -> windows_core::Result<super::FontCapitals>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCapitals)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetCapitals<P0>(element: P0, value: super::FontCapitals) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetCapitals)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn CapitalSpacingProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CapitalSpacingProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetCapitalSpacing<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCapitalSpacing)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetCapitalSpacing<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetCapitalSpacing)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn KerningProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KerningProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetKerning<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetKerning)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetKerning<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetKerning)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn CaseSensitiveFormsProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CaseSensitiveFormsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetCaseSensitiveForms<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCaseSensitiveForms)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetCaseSensitiveForms<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetCaseSensitiveForms)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn HistoricalFormsProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HistoricalFormsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetHistoricalForms<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHistoricalForms)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetHistoricalForms<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetHistoricalForms)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn FractionProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FractionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetFraction<P0>(element: P0) -> windows_core::Result<super::FontFraction>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetFraction)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetFraction<P0>(element: P0, value: super::FontFraction) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetFraction)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn NumeralStyleProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NumeralStyleProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetNumeralStyle<P0>(element: P0) -> windows_core::Result<super::FontNumeralStyle>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetNumeralStyle)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetNumeralStyle<P0>(
        element: P0,
        value: super::FontNumeralStyle,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetNumeralStyle)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn NumeralAlignmentProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NumeralAlignmentProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetNumeralAlignment<P0>(element: P0) -> windows_core::Result<super::FontNumeralAlignment>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetNumeralAlignment)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetNumeralAlignment<P0>(
        element: P0,
        value: super::FontNumeralAlignment,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetNumeralAlignment)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn SlashedZeroProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SlashedZeroProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetSlashedZero<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetSlashedZero)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetSlashedZero<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetSlashedZero)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn MathematicalGreekProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MathematicalGreekProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetMathematicalGreek<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetMathematicalGreek)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetMathematicalGreek<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetMathematicalGreek)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn VariantsProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VariantsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetVariants<P0>(element: P0) -> windows_core::Result<super::FontVariants>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetVariants)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetVariants<P0>(element: P0, value: super::FontVariants) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::ITypographyStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetVariants)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    fn ITypographyStatics<R, F: FnOnce(&ITypographyStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Typography, ITypographyStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Typography {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITypography>();
}
unsafe impl windows_core::Interface for Typography {
    type Vtable = <ITypography as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITypography as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Typography {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.Typography";
}
unsafe impl Send for Typography {}
unsafe impl Sync for Typography {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Underline(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Underline,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    Underline,
    Span,
    Inline,
    TextElement,
    super::DependencyObject
);
impl Underline {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            Underline,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Inlines(&self) -> windows_core::Result<InlineCollection> {
        let this = &windows_core::Interface::cast::<ISpan>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Inlines)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetInlines<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<InlineCollection>,
    {
        let this = &windows_core::Interface::cast::<ISpan>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetInlines)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FontSize(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontSize(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FontFamily(&self) -> windows_core::Result<super::Media::FontFamily> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFontFamily<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::FontFamily>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontFamily)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn FontWeight(&self) -> windows_core::Result<windows::UI::Text::FontWeight> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontWeight)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontWeight(&self, value: windows::UI::Text::FontWeight) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontWeight)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStyle(&self) -> windows_core::Result<windows::UI::Text::FontStyle> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStyle(&self, value: windows::UI::Text::FontStyle) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStyle)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FontStretch(&self) -> windows_core::Result<windows::UI::Text::FontStretch> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FontStretch)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetFontStretch(
        &self,
        value: windows::UI::Text::FontStretch,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetFontStretch)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CharacterSpacing(&self) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CharacterSpacing)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetCharacterSpacing(&self, value: i32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetCharacterSpacing)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn Foreground(&self) -> windows_core::Result<super::Media::Brush> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Foreground)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Media"))]
    pub fn SetForeground<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::Media::Brush>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetForeground)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetLanguage(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLanguage)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsTextScaleFactorEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsTextScaleFactorEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsTextScaleFactorEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TextDecorations(&self) -> windows_core::Result<windows::UI::Text::TextDecorations> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextDecorations)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetTextDecorations(
        &self,
        value: windows::UI::Text::TextDecorations,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetTextDecorations)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ContentEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContentEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementStart(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementStart)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ElementEnd(&self) -> windows_core::Result<TextPointer> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementEnd)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKey)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetAccessKey(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> windows_core::Result<super::DependencyObject> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> windows_core::Result<super::Input::KeyTipPlacementMode> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> windows_core::Result<f64> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XamlRoot(&self) -> windows_core::Result<super::XamlRoot> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).XamlRoot)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::XamlRoot>,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetXamlRoot)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyDisplayDismissed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                TextElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAccessKeyInvoked(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextElement>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextElementOverrides>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for Underline {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IUnderline>();
}
unsafe impl windows_core::Interface for Underline {
    type Vtable = <IUnderline as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IUnderline as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Underline {
    const NAME: &'static str = "Microsoft.UI.Xaml.Documents.Underline";
}
unsafe impl Send for Underline {}
unsafe impl Sync for Underline {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct UnderlineStyle(pub i32);
impl UnderlineStyle {
    pub const None: Self = Self(0i32);
    pub const Single: Self = Self(1i32);
}
impl windows_core::TypeKind for UnderlineStyle {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for UnderlineStyle {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Documents.UnderlineStyle;i4)",
    );
}
