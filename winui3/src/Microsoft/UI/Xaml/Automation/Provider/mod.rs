// Bindings generated by `windows-bindgen` 0.61.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

windows_core::imp::define_interface!(
    IAnnotationProvider,
    IAnnotationProvider_Vtbl,
    0x546ab18e_986d_5deb_8f2a_2d9303a43006
);
impl windows_core::RuntimeType for IAnnotationProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IAnnotationProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IAnnotationProvider {
    pub fn AnnotationTypeId(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnnotationTypeId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AnnotationTypeName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnnotationTypeName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Author(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Author)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn DateTime(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DateTime)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Target(&self) -> windows_core::Result<IRawElementProviderSimple> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Target)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for IAnnotationProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IAnnotationProvider";
}
pub trait IAnnotationProvider_Impl: windows_core::IUnknownImpl {
    fn AnnotationTypeId(&self) -> windows_core::Result<i32>;
    fn AnnotationTypeName(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Author(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn DateTime(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Target(&self) -> windows_core::Result<IRawElementProviderSimple>;
}
impl IAnnotationProvider_Vtbl {
    pub const fn new<Identity: IAnnotationProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AnnotationTypeId<
            Identity: IAnnotationProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnnotationProvider_Impl::AnnotationTypeId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AnnotationTypeName<
            Identity: IAnnotationProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnnotationProvider_Impl::AnnotationTypeName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Author<
            Identity: IAnnotationProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnnotationProvider_Impl::Author(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DateTime<
            Identity: IAnnotationProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnnotationProvider_Impl::DateTime(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Target<
            Identity: IAnnotationProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnnotationProvider_Impl::Target(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IAnnotationProvider, OFFSET>(),
            AnnotationTypeId: AnnotationTypeId::<Identity, OFFSET>,
            AnnotationTypeName: AnnotationTypeName::<Identity, OFFSET>,
            Author: Author::<Identity, OFFSET>,
            DateTime: DateTime::<Identity, OFFSET>,
            Target: Target::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAnnotationProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnnotationProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AnnotationTypeId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub AnnotationTypeName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Author: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DateTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Target: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ICustomNavigationProvider,
    ICustomNavigationProvider_Vtbl,
    0xcad51322_faa9_5a2b_90f0_b762c46178b3
);
impl windows_core::RuntimeType for ICustomNavigationProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ICustomNavigationProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ICustomNavigationProvider {
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub fn NavigateCustom(
        &self,
        direction: super::Peers::AutomationNavigationDirection,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NavigateCustom)(
                windows_core::Interface::as_raw(this),
                direction,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
#[cfg(feature = "UI_Xaml_Automation_Peers")]
impl windows_core::RuntimeName for ICustomNavigationProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ICustomNavigationProvider";
}
#[cfg(feature = "UI_Xaml_Automation_Peers")]
pub trait ICustomNavigationProvider_Impl: windows_core::IUnknownImpl {
    fn NavigateCustom(
        &self,
        direction: super::Peers::AutomationNavigationDirection,
    ) -> windows_core::Result<windows_core::IInspectable>;
}
#[cfg(feature = "UI_Xaml_Automation_Peers")]
impl ICustomNavigationProvider_Vtbl {
    pub const fn new<Identity: ICustomNavigationProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn NavigateCustom<
            Identity: ICustomNavigationProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            direction: super::Peers::AutomationNavigationDirection,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ICustomNavigationProvider_Impl::NavigateCustom(this, direction) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ICustomNavigationProvider,
                OFFSET,
            >(),
            NavigateCustom: NavigateCustom::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ICustomNavigationProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ICustomNavigationProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub NavigateCustom: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Peers::AutomationNavigationDirection,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Peers"))]
    NavigateCustom: usize,
}
windows_core::imp::define_interface!(
    IDockProvider,
    IDockProvider_Vtbl,
    0x9882b971_70ea_5c6d_a818_7a7ab68c6f3b
);
impl windows_core::RuntimeType for IDockProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IDockProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IDockProvider {
    pub fn DockPosition(&self) -> windows_core::Result<super::DockPosition> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DockPosition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDockPosition(&self, dockposition: super::DockPosition) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDockPosition)(
                windows_core::Interface::as_raw(this),
                dockposition,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for IDockProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IDockProvider";
}
pub trait IDockProvider_Impl: windows_core::IUnknownImpl {
    fn DockPosition(&self) -> windows_core::Result<super::DockPosition>;
    fn SetDockPosition(&self, dockPosition: super::DockPosition) -> windows_core::Result<()>;
}
impl IDockProvider_Vtbl {
    pub const fn new<Identity: IDockProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DockPosition<
            Identity: IDockProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::DockPosition,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDockProvider_Impl::DockPosition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDockPosition<
            Identity: IDockProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dockposition: super::DockPosition,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDockProvider_Impl::SetDockPosition(this, dockposition).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDockProvider, OFFSET>(),
            DockPosition: DockPosition::<Identity, OFFSET>,
            SetDockPosition: SetDockPosition::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDockProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDockProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DockPosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::DockPosition,
    ) -> windows_core::HRESULT,
    pub SetDockPosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::DockPosition,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDragProvider,
    IDragProvider_Vtbl,
    0xc60bb643_a356_5132_a258_ffba6c7480f2
);
impl windows_core::RuntimeType for IDragProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IDragProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IDragProvider {
    pub fn IsGrabbed(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsGrabbed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DropEffect(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DropEffect)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn DropEffects(&self) -> windows_core::Result<windows_core::Array<windows_core::HSTRING>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).DropEffects)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<windows_core::HSTRING>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn GetGrabbedItems(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetGrabbedItems)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<IRawElementProviderSimple>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
}
impl windows_core::RuntimeName for IDragProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IDragProvider";
}
pub trait IDragProvider_Impl: windows_core::IUnknownImpl {
    fn IsGrabbed(&self) -> windows_core::Result<bool>;
    fn DropEffect(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn DropEffects(&self) -> windows_core::Result<windows_core::Array<windows_core::HSTRING>>;
    fn GetGrabbedItems(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>>;
}
impl IDragProvider_Vtbl {
    pub const fn new<Identity: IDragProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsGrabbed<Identity: IDragProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragProvider_Impl::IsGrabbed(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DropEffect<Identity: IDragProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragProvider_Impl::DropEffect(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DropEffects<Identity: IDragProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragProvider_Impl::DropEffects(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetGrabbedItems<
            Identity: IDragProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragProvider_Impl::GetGrabbedItems(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDragProvider, OFFSET>(),
            IsGrabbed: IsGrabbed::<Identity, OFFSET>,
            DropEffect: DropEffect::<Identity, OFFSET>,
            DropEffects: DropEffects::<Identity, OFFSET>,
            GetGrabbedItems: GetGrabbedItems::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDragProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsGrabbed:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub DropEffect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DropEffects: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetGrabbedItems: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDropTargetProvider,
    IDropTargetProvider_Vtbl,
    0x9b2a9f3d_bbb1_510d_99e8_0e0ae14a6e3b
);
impl windows_core::RuntimeType for IDropTargetProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IDropTargetProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IDropTargetProvider {
    pub fn DropEffect(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DropEffect)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn DropEffects(&self) -> windows_core::Result<windows_core::Array<windows_core::HSTRING>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).DropEffects)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<windows_core::HSTRING>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
}
impl windows_core::RuntimeName for IDropTargetProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IDropTargetProvider";
}
pub trait IDropTargetProvider_Impl: windows_core::IUnknownImpl {
    fn DropEffect(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn DropEffects(&self) -> windows_core::Result<windows_core::Array<windows_core::HSTRING>>;
}
impl IDropTargetProvider_Vtbl {
    pub const fn new<Identity: IDropTargetProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DropEffect<
            Identity: IDropTargetProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropTargetProvider_Impl::DropEffect(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DropEffects<
            Identity: IDropTargetProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropTargetProvider_Impl::DropEffects(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDropTargetProvider, OFFSET>(),
            DropEffect: DropEffect::<Identity, OFFSET>,
            DropEffects: DropEffects::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDropTargetProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropTargetProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DropEffect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DropEffects: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IExpandCollapseProvider,
    IExpandCollapseProvider_Vtbl,
    0x6cef349c_b181_5d0b_b297_c3b0166120c3
);
impl windows_core::RuntimeType for IExpandCollapseProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IExpandCollapseProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IExpandCollapseProvider {
    pub fn ExpandCollapseState(&self) -> windows_core::Result<super::ExpandCollapseState> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExpandCollapseState)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Collapse(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Collapse)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Expand(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Expand)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeName for IExpandCollapseProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IExpandCollapseProvider";
}
pub trait IExpandCollapseProvider_Impl: windows_core::IUnknownImpl {
    fn ExpandCollapseState(&self) -> windows_core::Result<super::ExpandCollapseState>;
    fn Collapse(&self) -> windows_core::Result<()>;
    fn Expand(&self) -> windows_core::Result<()>;
}
impl IExpandCollapseProvider_Vtbl {
    pub const fn new<Identity: IExpandCollapseProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ExpandCollapseState<
            Identity: IExpandCollapseProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::ExpandCollapseState,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IExpandCollapseProvider_Impl::ExpandCollapseState(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Collapse<
            Identity: IExpandCollapseProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IExpandCollapseProvider_Impl::Collapse(this).into()
            }
        }
        unsafe extern "system" fn Expand<
            Identity: IExpandCollapseProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IExpandCollapseProvider_Impl::Expand(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IExpandCollapseProvider, OFFSET>(
            ),
            ExpandCollapseState: ExpandCollapseState::<Identity, OFFSET>,
            Collapse: Collapse::<Identity, OFFSET>,
            Expand: Expand::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IExpandCollapseProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IExpandCollapseProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ExpandCollapseState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::ExpandCollapseState,
    ) -> windows_core::HRESULT,
    pub Collapse: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Expand: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IGridItemProvider,
    IGridItemProvider_Vtbl,
    0xd2557a0e_6909_5170_a680_60728df339b4
);
impl windows_core::RuntimeType for IGridItemProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IGridItemProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IGridItemProvider {
    pub fn Column(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Column)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ColumnSpan(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColumnSpan)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ContainingGrid(&self) -> windows_core::Result<IRawElementProviderSimple> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainingGrid)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Row(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Row)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RowSpan(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RowSpan)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeName for IGridItemProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IGridItemProvider";
}
pub trait IGridItemProvider_Impl: windows_core::IUnknownImpl {
    fn Column(&self) -> windows_core::Result<i32>;
    fn ColumnSpan(&self) -> windows_core::Result<i32>;
    fn ContainingGrid(&self) -> windows_core::Result<IRawElementProviderSimple>;
    fn Row(&self) -> windows_core::Result<i32>;
    fn RowSpan(&self) -> windows_core::Result<i32>;
}
impl IGridItemProvider_Vtbl {
    pub const fn new<Identity: IGridItemProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Column<Identity: IGridItemProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridItemProvider_Impl::Column(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ColumnSpan<
            Identity: IGridItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridItemProvider_Impl::ColumnSpan(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContainingGrid<
            Identity: IGridItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridItemProvider_Impl::ContainingGrid(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Row<Identity: IGridItemProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridItemProvider_Impl::Row(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RowSpan<Identity: IGridItemProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridItemProvider_Impl::RowSpan(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IGridItemProvider, OFFSET>(),
            Column: Column::<Identity, OFFSET>,
            ColumnSpan: ColumnSpan::<Identity, OFFSET>,
            ContainingGrid: ContainingGrid::<Identity, OFFSET>,
            Row: Row::<Identity, OFFSET>,
            RowSpan: RowSpan::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGridItemProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridItemProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Column:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub ColumnSpan:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub ContainingGrid: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Row: unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub RowSpan:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IGridProvider,
    IGridProvider_Vtbl,
    0x50992d5e_d225_56e9_a25a_78c372e81955
);
impl windows_core::RuntimeType for IGridProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IGridProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IGridProvider {
    pub fn ColumnCount(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColumnCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RowCount(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RowCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetItem(
        &self,
        row: i32,
        column: i32,
    ) -> windows_core::Result<IRawElementProviderSimple> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetItem)(
                windows_core::Interface::as_raw(this),
                row,
                column,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for IGridProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IGridProvider";
}
pub trait IGridProvider_Impl: windows_core::IUnknownImpl {
    fn ColumnCount(&self) -> windows_core::Result<i32>;
    fn RowCount(&self) -> windows_core::Result<i32>;
    fn GetItem(&self, row: i32, column: i32) -> windows_core::Result<IRawElementProviderSimple>;
}
impl IGridProvider_Vtbl {
    pub const fn new<Identity: IGridProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ColumnCount<Identity: IGridProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridProvider_Impl::ColumnCount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RowCount<Identity: IGridProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridProvider_Impl::RowCount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetItem<Identity: IGridProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            row: i32,
            column: i32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridProvider_Impl::GetItem(this, row, column) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IGridProvider, OFFSET>(),
            ColumnCount: ColumnCount::<Identity, OFFSET>,
            RowCount: RowCount::<Identity, OFFSET>,
            GetItem: GetItem::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGridProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ColumnCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub RowCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub GetItem: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        i32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IIRawElementProviderSimple,
    IIRawElementProviderSimple_Vtbl,
    0xf90bc239_ade2_55c9_a838_a3b0579763c5
);
impl windows_core::RuntimeType for IIRawElementProviderSimple {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IIRawElementProviderSimple {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IIRawElementProviderSimple";
}
pub trait IIRawElementProviderSimple_Impl: windows_core::IUnknownImpl {}
impl IIRawElementProviderSimple_Vtbl {
    pub const fn new<Identity: IIRawElementProviderSimple_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IIRawElementProviderSimple,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IIRawElementProviderSimple as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IIRawElementProviderSimple_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IInvokeProvider,
    IInvokeProvider_Vtbl,
    0x02481105_3378_544d_b4e1_a1b368afbc02
);
impl windows_core::RuntimeType for IInvokeProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IInvokeProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IInvokeProvider {
    pub fn Invoke(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Invoke)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeName for IInvokeProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IInvokeProvider";
}
pub trait IInvokeProvider_Impl: windows_core::IUnknownImpl {
    fn Invoke(&self) -> windows_core::Result<()>;
}
impl IInvokeProvider_Vtbl {
    pub const fn new<Identity: IInvokeProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Invoke<Identity: IInvokeProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IInvokeProvider_Impl::Invoke(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IInvokeProvider, OFFSET>(),
            Invoke: Invoke::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IInvokeProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IInvokeProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Invoke: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IItemContainerProvider,
    IItemContainerProvider_Vtbl,
    0xad297363_694e_5885_997d_a2d6dff415a7
);
impl windows_core::RuntimeType for IItemContainerProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IItemContainerProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IItemContainerProvider {
    pub fn FindItemByProperty<P0, P1, P2>(
        &self,
        startafter: P0,
        automationproperty: P1,
        value: P2,
    ) -> windows_core::Result<IRawElementProviderSimple>
    where
        P0: windows_core::Param<IRawElementProviderSimple>,
        P1: windows_core::Param<super::AutomationProperty>,
        P2: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindItemByProperty)(
                windows_core::Interface::as_raw(this),
                startafter.param().abi(),
                automationproperty.param().abi(),
                value.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for IItemContainerProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IItemContainerProvider";
}
pub trait IItemContainerProvider_Impl: windows_core::IUnknownImpl {
    fn FindItemByProperty(
        &self,
        startAfter: windows_core::Ref<'_, IRawElementProviderSimple>,
        automationProperty: windows_core::Ref<'_, super::AutomationProperty>,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<IRawElementProviderSimple>;
}
impl IItemContainerProvider_Vtbl {
    pub const fn new<Identity: IItemContainerProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn FindItemByProperty<
            Identity: IItemContainerProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            startafter: *mut core::ffi::c_void,
            automationproperty: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IItemContainerProvider_Impl::FindItemByProperty(
                    this,
                    core::mem::transmute_copy(&startafter),
                    core::mem::transmute_copy(&automationproperty),
                    core::mem::transmute_copy(&value),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IItemContainerProvider, OFFSET>(
            ),
            FindItemByProperty: FindItemByProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IItemContainerProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemContainerProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FindItemByProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IMultipleViewProvider,
    IMultipleViewProvider_Vtbl,
    0x60be5484_3d8f_51fd_beab_423422ee1e03
);
impl windows_core::RuntimeType for IMultipleViewProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IMultipleViewProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IMultipleViewProvider {
    pub fn CurrentView(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CurrentView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetSupportedViews(&self) -> windows_core::Result<windows_core::Array<i32>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetSupportedViews)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<i32>::set_abi_len(core::mem::transmute(&mut result__)),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn GetViewName(&self, viewid: i32) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetViewName)(
                windows_core::Interface::as_raw(this),
                viewid,
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetCurrentView(&self, viewid: i32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetCurrentView)(
                windows_core::Interface::as_raw(this),
                viewid,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for IMultipleViewProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IMultipleViewProvider";
}
pub trait IMultipleViewProvider_Impl: windows_core::IUnknownImpl {
    fn CurrentView(&self) -> windows_core::Result<i32>;
    fn GetSupportedViews(&self) -> windows_core::Result<windows_core::Array<i32>>;
    fn GetViewName(&self, viewId: i32) -> windows_core::Result<windows_core::HSTRING>;
    fn SetCurrentView(&self, viewId: i32) -> windows_core::Result<()>;
}
impl IMultipleViewProvider_Vtbl {
    pub const fn new<Identity: IMultipleViewProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CurrentView<
            Identity: IMultipleViewProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMultipleViewProvider_Impl::CurrentView(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetSupportedViews<
            Identity: IMultipleViewProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMultipleViewProvider_Impl::GetSupportedViews(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetViewName<
            Identity: IMultipleViewProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            viewid: i32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMultipleViewProvider_Impl::GetViewName(this, viewid) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCurrentView<
            Identity: IMultipleViewProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            viewid: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IMultipleViewProvider_Impl::SetCurrentView(this, viewid).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IMultipleViewProvider, OFFSET>(
            ),
            CurrentView: CurrentView::<Identity, OFFSET>,
            GetSupportedViews: GetSupportedViews::<Identity, OFFSET>,
            GetViewName: GetViewName::<Identity, OFFSET>,
            SetCurrentView: SetCurrentView::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IMultipleViewProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMultipleViewProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CurrentView:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub GetSupportedViews: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut i32,
    ) -> windows_core::HRESULT,
    pub GetViewName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetCurrentView:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IObjectModelProvider,
    IObjectModelProvider_Vtbl,
    0x92953ed0_4bd8_5624_8e3d_78d45fde9cf2
);
impl windows_core::RuntimeType for IObjectModelProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IObjectModelProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IObjectModelProvider {
    pub fn GetUnderlyingObjectModel(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetUnderlyingObjectModel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for IObjectModelProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IObjectModelProvider";
}
pub trait IObjectModelProvider_Impl: windows_core::IUnknownImpl {
    fn GetUnderlyingObjectModel(&self) -> windows_core::Result<windows_core::IInspectable>;
}
impl IObjectModelProvider_Vtbl {
    pub const fn new<Identity: IObjectModelProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetUnderlyingObjectModel<
            Identity: IObjectModelProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IObjectModelProvider_Impl::GetUnderlyingObjectModel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IObjectModelProvider, OFFSET>(
            ),
            GetUnderlyingObjectModel: GetUnderlyingObjectModel::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IObjectModelProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectModelProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetUnderlyingObjectModel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRangeValueProvider,
    IRangeValueProvider_Vtbl,
    0x729ae414_1e8f_5020_82bb_bb574d145fd8
);
impl windows_core::RuntimeType for IRangeValueProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IRangeValueProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IRangeValueProvider {
    pub fn IsReadOnly(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsReadOnly)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LargeChange(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LargeChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Maximum(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Maximum)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Minimum(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Minimum)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SmallChange(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SmallChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Value(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetValue(&self, value: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for IRangeValueProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IRangeValueProvider";
}
pub trait IRangeValueProvider_Impl: windows_core::IUnknownImpl {
    fn IsReadOnly(&self) -> windows_core::Result<bool>;
    fn LargeChange(&self) -> windows_core::Result<f64>;
    fn Maximum(&self) -> windows_core::Result<f64>;
    fn Minimum(&self) -> windows_core::Result<f64>;
    fn SmallChange(&self) -> windows_core::Result<f64>;
    fn Value(&self) -> windows_core::Result<f64>;
    fn SetValue(&self, value: f64) -> windows_core::Result<()>;
}
impl IRangeValueProvider_Vtbl {
    pub const fn new<Identity: IRangeValueProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsReadOnly<
            Identity: IRangeValueProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValueProvider_Impl::IsReadOnly(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LargeChange<
            Identity: IRangeValueProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValueProvider_Impl::LargeChange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Maximum<
            Identity: IRangeValueProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValueProvider_Impl::Maximum(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Minimum<
            Identity: IRangeValueProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValueProvider_Impl::Minimum(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SmallChange<
            Identity: IRangeValueProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValueProvider_Impl::SmallChange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Value<Identity: IRangeValueProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValueProvider_Impl::Value(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetValue<
            Identity: IRangeValueProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IRangeValueProvider_Impl::SetValue(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IRangeValueProvider, OFFSET>(),
            IsReadOnly: IsReadOnly::<Identity, OFFSET>,
            LargeChange: LargeChange::<Identity, OFFSET>,
            Maximum: Maximum::<Identity, OFFSET>,
            Minimum: Minimum::<Identity, OFFSET>,
            SmallChange: SmallChange::<Identity, OFFSET>,
            Value: Value::<Identity, OFFSET>,
            SetValue: SetValue::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRangeValueProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRangeValueProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsReadOnly:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub LargeChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub Maximum:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub Minimum:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SmallChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub Value: unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct IRawElementProviderSimple(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    IRawElementProviderSimple,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(IRawElementProviderSimple, super::super::DependencyObject);
impl IRawElementProviderSimple {
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
        P1: windows_core::Param<super::super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for IRawElementProviderSimple {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IIRawElementProviderSimple>();
}
unsafe impl windows_core::Interface for IRawElementProviderSimple {
    type Vtable = <IIRawElementProviderSimple as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IIRawElementProviderSimple as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for IRawElementProviderSimple {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple";
}
unsafe impl Send for IRawElementProviderSimple {}
unsafe impl Sync for IRawElementProviderSimple {}
windows_core::imp::define_interface!(
    IScrollItemProvider,
    IScrollItemProvider_Vtbl,
    0x8a6fb8eb_e5f1_58eb_8e72_8b95f236fc47
);
impl windows_core::RuntimeType for IScrollItemProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IScrollItemProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IScrollItemProvider {
    pub fn ScrollIntoView(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollIntoView)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
}
impl windows_core::RuntimeName for IScrollItemProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IScrollItemProvider";
}
pub trait IScrollItemProvider_Impl: windows_core::IUnknownImpl {
    fn ScrollIntoView(&self) -> windows_core::Result<()>;
}
impl IScrollItemProvider_Vtbl {
    pub const fn new<Identity: IScrollItemProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ScrollIntoView<
            Identity: IScrollItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollItemProvider_Impl::ScrollIntoView(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IScrollItemProvider, OFFSET>(),
            ScrollIntoView: ScrollIntoView::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScrollItemProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollItemProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ScrollIntoView: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IScrollProvider,
    IScrollProvider_Vtbl,
    0x7e2e5af3_ff50_5365_bcfe_ef424b2fd590
);
impl windows_core::RuntimeType for IScrollProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IScrollProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IScrollProvider {
    pub fn HorizontallyScrollable(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontallyScrollable)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn HorizontalScrollPercent(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalScrollPercent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn HorizontalViewSize(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalViewSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn VerticallyScrollable(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticallyScrollable)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn VerticalScrollPercent(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalScrollPercent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn VerticalViewSize(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalViewSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Scroll(
        &self,
        horizontalamount: super::ScrollAmount,
        verticalamount: super::ScrollAmount,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Scroll)(
                windows_core::Interface::as_raw(this),
                horizontalamount,
                verticalamount,
            )
            .ok()
        }
    }
    pub fn SetScrollPercent(
        &self,
        horizontalpercent: f64,
        verticalpercent: f64,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetScrollPercent)(
                windows_core::Interface::as_raw(this),
                horizontalpercent,
                verticalpercent,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for IScrollProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IScrollProvider";
}
pub trait IScrollProvider_Impl: windows_core::IUnknownImpl {
    fn HorizontallyScrollable(&self) -> windows_core::Result<bool>;
    fn HorizontalScrollPercent(&self) -> windows_core::Result<f64>;
    fn HorizontalViewSize(&self) -> windows_core::Result<f64>;
    fn VerticallyScrollable(&self) -> windows_core::Result<bool>;
    fn VerticalScrollPercent(&self) -> windows_core::Result<f64>;
    fn VerticalViewSize(&self) -> windows_core::Result<f64>;
    fn Scroll(
        &self,
        horizontalAmount: super::ScrollAmount,
        verticalAmount: super::ScrollAmount,
    ) -> windows_core::Result<()>;
    fn SetScrollPercent(
        &self,
        horizontalPercent: f64,
        verticalPercent: f64,
    ) -> windows_core::Result<()>;
}
impl IScrollProvider_Vtbl {
    pub const fn new<Identity: IScrollProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn HorizontallyScrollable<
            Identity: IScrollProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollProvider_Impl::HorizontallyScrollable(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HorizontalScrollPercent<
            Identity: IScrollProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollProvider_Impl::HorizontalScrollPercent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HorizontalViewSize<
            Identity: IScrollProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollProvider_Impl::HorizontalViewSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn VerticallyScrollable<
            Identity: IScrollProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollProvider_Impl::VerticallyScrollable(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn VerticalScrollPercent<
            Identity: IScrollProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollProvider_Impl::VerticalScrollPercent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn VerticalViewSize<
            Identity: IScrollProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollProvider_Impl::VerticalViewSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Scroll<Identity: IScrollProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            horizontalamount: super::ScrollAmount,
            verticalamount: super::ScrollAmount,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollProvider_Impl::Scroll(this, horizontalamount, verticalamount).into()
            }
        }
        unsafe extern "system" fn SetScrollPercent<
            Identity: IScrollProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            horizontalpercent: f64,
            verticalpercent: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IScrollProvider_Impl::SetScrollPercent(this, horizontalpercent, verticalpercent)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IScrollProvider, OFFSET>(),
            HorizontallyScrollable: HorizontallyScrollable::<Identity, OFFSET>,
            HorizontalScrollPercent: HorizontalScrollPercent::<Identity, OFFSET>,
            HorizontalViewSize: HorizontalViewSize::<Identity, OFFSET>,
            VerticallyScrollable: VerticallyScrollable::<Identity, OFFSET>,
            VerticalScrollPercent: VerticalScrollPercent::<Identity, OFFSET>,
            VerticalViewSize: VerticalViewSize::<Identity, OFFSET>,
            Scroll: Scroll::<Identity, OFFSET>,
            SetScrollPercent: SetScrollPercent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScrollProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HorizontallyScrollable:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub HorizontalScrollPercent:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub HorizontalViewSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub VerticallyScrollable:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub VerticalScrollPercent:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub VerticalViewSize:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub Scroll: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::ScrollAmount,
        super::ScrollAmount,
    ) -> windows_core::HRESULT,
    pub SetScrollPercent:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISelectionItemProvider,
    ISelectionItemProvider_Vtbl,
    0xc9dfdd81_d4ac_5d31_be7f_24fab16060e4
);
impl windows_core::RuntimeType for ISelectionItemProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ISelectionItemProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ISelectionItemProvider {
    pub fn IsSelected(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSelected)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SelectionContainer(&self) -> windows_core::Result<IRawElementProviderSimple> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionContainer)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn AddToSelection(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).AddToSelection)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn RemoveFromSelection(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFromSelection)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn Select(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Select)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeName for ISelectionItemProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ISelectionItemProvider";
}
pub trait ISelectionItemProvider_Impl: windows_core::IUnknownImpl {
    fn IsSelected(&self) -> windows_core::Result<bool>;
    fn SelectionContainer(&self) -> windows_core::Result<IRawElementProviderSimple>;
    fn AddToSelection(&self) -> windows_core::Result<()>;
    fn RemoveFromSelection(&self) -> windows_core::Result<()>;
    fn Select(&self) -> windows_core::Result<()>;
}
impl ISelectionItemProvider_Vtbl {
    pub const fn new<Identity: ISelectionItemProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsSelected<
            Identity: ISelectionItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionItemProvider_Impl::IsSelected(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SelectionContainer<
            Identity: ISelectionItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionItemProvider_Impl::SelectionContainer(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AddToSelection<
            Identity: ISelectionItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISelectionItemProvider_Impl::AddToSelection(this).into()
            }
        }
        unsafe extern "system" fn RemoveFromSelection<
            Identity: ISelectionItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISelectionItemProvider_Impl::RemoveFromSelection(this).into()
            }
        }
        unsafe extern "system" fn Select<
            Identity: ISelectionItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISelectionItemProvider_Impl::Select(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISelectionItemProvider, OFFSET>(
            ),
            IsSelected: IsSelected::<Identity, OFFSET>,
            SelectionContainer: SelectionContainer::<Identity, OFFSET>,
            AddToSelection: AddToSelection::<Identity, OFFSET>,
            RemoveFromSelection: RemoveFromSelection::<Identity, OFFSET>,
            Select: Select::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISelectionItemProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISelectionItemProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsSelected:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SelectionContainer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AddToSelection: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub RemoveFromSelection:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Select: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISelectionProvider,
    ISelectionProvider_Vtbl,
    0x80d56d4e_0052_541f_9411_9d1778b3bfca
);
impl windows_core::RuntimeType for ISelectionProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ISelectionProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ISelectionProvider {
    pub fn CanSelectMultiple(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanSelectMultiple)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsSelectionRequired(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSelectionRequired)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetSelection(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetSelection)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<IRawElementProviderSimple>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
}
impl windows_core::RuntimeName for ISelectionProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ISelectionProvider";
}
pub trait ISelectionProvider_Impl: windows_core::IUnknownImpl {
    fn CanSelectMultiple(&self) -> windows_core::Result<bool>;
    fn IsSelectionRequired(&self) -> windows_core::Result<bool>;
    fn GetSelection(&self) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>>;
}
impl ISelectionProvider_Vtbl {
    pub const fn new<Identity: ISelectionProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CanSelectMultiple<
            Identity: ISelectionProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionProvider_Impl::CanSelectMultiple(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsSelectionRequired<
            Identity: ISelectionProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionProvider_Impl::IsSelectionRequired(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetSelection<
            Identity: ISelectionProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionProvider_Impl::GetSelection(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISelectionProvider, OFFSET>(),
            CanSelectMultiple: CanSelectMultiple::<Identity, OFFSET>,
            IsSelectionRequired: IsSelectionRequired::<Identity, OFFSET>,
            GetSelection: GetSelection::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISelectionProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISelectionProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CanSelectMultiple:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsSelectionRequired:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub GetSelection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpreadsheetItemProvider,
    ISpreadsheetItemProvider_Vtbl,
    0x51c1ce89_b21f_592c_8768_0accdefd5738
);
impl windows_core::RuntimeType for ISpreadsheetItemProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ISpreadsheetItemProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ISpreadsheetItemProvider {
    pub fn Formula(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Formula)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn GetAnnotationObjects(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetAnnotationObjects)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<IRawElementProviderSimple>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn GetAnnotationTypes(
        &self,
    ) -> windows_core::Result<windows_core::Array<super::AnnotationType>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetAnnotationTypes)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<super::AnnotationType>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
}
impl windows_core::RuntimeName for ISpreadsheetItemProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ISpreadsheetItemProvider";
}
pub trait ISpreadsheetItemProvider_Impl: windows_core::IUnknownImpl {
    fn Formula(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn GetAnnotationObjects(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>>;
    fn GetAnnotationTypes(
        &self,
    ) -> windows_core::Result<windows_core::Array<super::AnnotationType>>;
}
impl ISpreadsheetItemProvider_Vtbl {
    pub const fn new<Identity: ISpreadsheetItemProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Formula<
            Identity: ISpreadsheetItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpreadsheetItemProvider_Impl::Formula(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAnnotationObjects<
            Identity: ISpreadsheetItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpreadsheetItemProvider_Impl::GetAnnotationObjects(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAnnotationTypes<
            Identity: ISpreadsheetItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut super::AnnotationType,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpreadsheetItemProvider_Impl::GetAnnotationTypes(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISpreadsheetItemProvider,
                OFFSET,
            >(),
            Formula: Formula::<Identity, OFFSET>,
            GetAnnotationObjects: GetAnnotationObjects::<Identity, OFFSET>,
            GetAnnotationTypes: GetAnnotationTypes::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpreadsheetItemProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpreadsheetItemProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Formula: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetAnnotationObjects: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetAnnotationTypes: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut super::AnnotationType,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpreadsheetProvider,
    ISpreadsheetProvider_Vtbl,
    0x1ff41bac_d9e3_5e48_b5f8_9eab0fb2d9d8
);
impl windows_core::RuntimeType for ISpreadsheetProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ISpreadsheetProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ISpreadsheetProvider {
    pub fn GetItemByName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<IRawElementProviderSimple> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetItemByName)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(name),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for ISpreadsheetProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ISpreadsheetProvider";
}
pub trait ISpreadsheetProvider_Impl: windows_core::IUnknownImpl {
    fn GetItemByName(
        &self,
        name: &windows_core::HSTRING,
    ) -> windows_core::Result<IRawElementProviderSimple>;
}
impl ISpreadsheetProvider_Vtbl {
    pub const fn new<Identity: ISpreadsheetProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetItemByName<
            Identity: ISpreadsheetProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpreadsheetProvider_Impl::GetItemByName(this, core::mem::transmute(&name)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISpreadsheetProvider, OFFSET>(
            ),
            GetItemByName: GetItemByName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpreadsheetProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpreadsheetProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetItemByName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IStylesProvider,
    IStylesProvider_Vtbl,
    0xd8895839_0048_54de_9c1f_152de6665e80
);
impl windows_core::RuntimeType for IStylesProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IStylesProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IStylesProvider {
    pub fn ExtendedProperties(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExtendedProperties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn FillColor(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillColor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn FillPatternColor(&self) -> windows_core::Result<windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillPatternColor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn FillPatternStyle(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillPatternStyle)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn Shape(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Shape)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn StyleId(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StyleId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn StyleName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StyleName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
}
impl windows_core::RuntimeName for IStylesProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IStylesProvider";
}
pub trait IStylesProvider_Impl: windows_core::IUnknownImpl {
    fn ExtendedProperties(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn FillColor(&self) -> windows_core::Result<windows::UI::Color>;
    fn FillPatternColor(&self) -> windows_core::Result<windows::UI::Color>;
    fn FillPatternStyle(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Shape(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn StyleId(&self) -> windows_core::Result<i32>;
    fn StyleName(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl IStylesProvider_Vtbl {
    pub const fn new<Identity: IStylesProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ExtendedProperties<
            Identity: IStylesProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesProvider_Impl::ExtendedProperties(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FillColor<Identity: IStylesProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesProvider_Impl::FillColor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FillPatternColor<
            Identity: IStylesProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::UI::Color,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesProvider_Impl::FillPatternColor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FillPatternStyle<
            Identity: IStylesProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesProvider_Impl::FillPatternStyle(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Shape<Identity: IStylesProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesProvider_Impl::Shape(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn StyleId<Identity: IStylesProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesProvider_Impl::StyleId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn StyleName<Identity: IStylesProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesProvider_Impl::StyleName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IStylesProvider, OFFSET>(),
            ExtendedProperties: ExtendedProperties::<Identity, OFFSET>,
            FillColor: FillColor::<Identity, OFFSET>,
            FillPatternColor: FillPatternColor::<Identity, OFFSET>,
            FillPatternStyle: FillPatternStyle::<Identity, OFFSET>,
            Shape: Shape::<Identity, OFFSET>,
            StyleId: StyleId::<Identity, OFFSET>,
            StyleName: StyleName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IStylesProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IStylesProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ExtendedProperties: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FillColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub FillPatternColor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::UI::Color,
    ) -> windows_core::HRESULT,
    pub FillPatternStyle: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Shape: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StyleId:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
    pub StyleName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISynchronizedInputProvider,
    ISynchronizedInputProvider_Vtbl,
    0xc5615613_936d_5289_a190_e82057e0ff5a
);
impl windows_core::RuntimeType for ISynchronizedInputProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ISynchronizedInputProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ISynchronizedInputProvider {
    pub fn Cancel(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Cancel)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn StartListening(
        &self,
        inputtype: super::SynchronizedInputType,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).StartListening)(
                windows_core::Interface::as_raw(this),
                inputtype,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for ISynchronizedInputProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ISynchronizedInputProvider";
}
pub trait ISynchronizedInputProvider_Impl: windows_core::IUnknownImpl {
    fn Cancel(&self) -> windows_core::Result<()>;
    fn StartListening(&self, inputType: super::SynchronizedInputType) -> windows_core::Result<()>;
}
impl ISynchronizedInputProvider_Vtbl {
    pub const fn new<Identity: ISynchronizedInputProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Cancel<
            Identity: ISynchronizedInputProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISynchronizedInputProvider_Impl::Cancel(this).into()
            }
        }
        unsafe extern "system" fn StartListening<
            Identity: ISynchronizedInputProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            inputtype: super::SynchronizedInputType,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISynchronizedInputProvider_Impl::StartListening(this, inputtype).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISynchronizedInputProvider,
                OFFSET,
            >(),
            Cancel: Cancel::<Identity, OFFSET>,
            StartListening: StartListening::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISynchronizedInputProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISynchronizedInputProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Cancel: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub StartListening: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::SynchronizedInputType,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITableItemProvider,
    ITableItemProvider_Vtbl,
    0x6ce6f038_54d4_5553_a4ad_03cbcf358197
);
impl windows_core::RuntimeType for ITableItemProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ITableItemProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ITableItemProvider {
    pub fn GetColumnHeaderItems(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetColumnHeaderItems)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<IRawElementProviderSimple>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn GetRowHeaderItems(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetRowHeaderItems)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<IRawElementProviderSimple>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
}
impl windows_core::RuntimeName for ITableItemProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ITableItemProvider";
}
pub trait ITableItemProvider_Impl: windows_core::IUnknownImpl {
    fn GetColumnHeaderItems(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>>;
    fn GetRowHeaderItems(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>>;
}
impl ITableItemProvider_Vtbl {
    pub const fn new<Identity: ITableItemProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetColumnHeaderItems<
            Identity: ITableItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITableItemProvider_Impl::GetColumnHeaderItems(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetRowHeaderItems<
            Identity: ITableItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITableItemProvider_Impl::GetRowHeaderItems(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITableItemProvider, OFFSET>(),
            GetColumnHeaderItems: GetColumnHeaderItems::<Identity, OFFSET>,
            GetRowHeaderItems: GetRowHeaderItems::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITableItemProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITableItemProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetColumnHeaderItems: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetRowHeaderItems: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITableProvider,
    ITableProvider_Vtbl,
    0x9aba6724_b22d_5db8_8abb_81f911f18af2
);
impl windows_core::RuntimeType for ITableProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ITableProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ITableProvider {
    pub fn RowOrColumnMajor(&self) -> windows_core::Result<super::RowOrColumnMajor> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RowOrColumnMajor)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetColumnHeaders(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetColumnHeaders)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<IRawElementProviderSimple>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn GetRowHeaders(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetRowHeaders)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<IRawElementProviderSimple>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
}
impl windows_core::RuntimeName for ITableProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ITableProvider";
}
pub trait ITableProvider_Impl: windows_core::IUnknownImpl {
    fn RowOrColumnMajor(&self) -> windows_core::Result<super::RowOrColumnMajor>;
    fn GetColumnHeaders(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>>;
    fn GetRowHeaders(&self)
        -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>>;
}
impl ITableProvider_Vtbl {
    pub const fn new<Identity: ITableProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn RowOrColumnMajor<
            Identity: ITableProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::RowOrColumnMajor,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITableProvider_Impl::RowOrColumnMajor(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetColumnHeaders<
            Identity: ITableProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITableProvider_Impl::GetColumnHeaders(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetRowHeaders<
            Identity: ITableProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITableProvider_Impl::GetRowHeaders(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITableProvider, OFFSET>(),
            RowOrColumnMajor: RowOrColumnMajor::<Identity, OFFSET>,
            GetColumnHeaders: GetColumnHeaders::<Identity, OFFSET>,
            GetRowHeaders: GetRowHeaders::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITableProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITableProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub RowOrColumnMajor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::RowOrColumnMajor,
    ) -> windows_core::HRESULT,
    pub GetColumnHeaders: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetRowHeaders: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextChildProvider,
    ITextChildProvider_Vtbl,
    0x7c72e55f_f75d_5522_aeb5_c1f82c32933b
);
impl windows_core::RuntimeType for ITextChildProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ITextChildProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ITextChildProvider {
    pub fn TextContainer(&self) -> windows_core::Result<IRawElementProviderSimple> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextContainer)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TextRange(&self) -> windows_core::Result<ITextRangeProvider> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TextRange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for ITextChildProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ITextChildProvider";
}
pub trait ITextChildProvider_Impl: windows_core::IUnknownImpl {
    fn TextContainer(&self) -> windows_core::Result<IRawElementProviderSimple>;
    fn TextRange(&self) -> windows_core::Result<ITextRangeProvider>;
}
impl ITextChildProvider_Vtbl {
    pub const fn new<Identity: ITextChildProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TextContainer<
            Identity: ITextChildProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextChildProvider_Impl::TextContainer(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TextRange<
            Identity: ITextChildProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextChildProvider_Impl::TextRange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextChildProvider, OFFSET>(),
            TextContainer: TextContainer::<Identity, OFFSET>,
            TextRange: TextRange::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextChildProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextChildProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TextContainer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TextRange: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextEditProvider,
    ITextEditProvider_Vtbl,
    0x7f09bbe8_bea7_5dd3_ba6b_28dbb402fad4
);
impl windows_core::RuntimeType for ITextEditProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ITextEditProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(ITextEditProvider, ITextProvider);
impl ITextEditProvider {
    pub fn GetActiveComposition(&self) -> windows_core::Result<ITextRangeProvider> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetActiveComposition)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetConversionTarget(&self) -> windows_core::Result<ITextRangeProvider> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetConversionTarget)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DocumentRange(&self) -> windows_core::Result<ITextRangeProvider> {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DocumentRange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SupportedTextSelection(&self) -> windows_core::Result<super::SupportedTextSelection> {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SupportedTextSelection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetSelection(&self) -> windows_core::Result<windows_core::Array<ITextRangeProvider>> {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetSelection)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<ITextRangeProvider>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn GetVisibleRanges(
        &self,
    ) -> windows_core::Result<windows_core::Array<ITextRangeProvider>> {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetVisibleRanges)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<ITextRangeProvider>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn RangeFromChild<P0>(&self, childelement: P0) -> windows_core::Result<ITextRangeProvider>
    where
        P0: windows_core::Param<IRawElementProviderSimple>,
    {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RangeFromChild)(
                windows_core::Interface::as_raw(this),
                childelement.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RangeFromPoint(
        &self,
        screenlocation: windows::Foundation::Point,
    ) -> windows_core::Result<ITextRangeProvider> {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RangeFromPoint)(
                windows_core::Interface::as_raw(this),
                screenlocation,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for ITextEditProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ITextEditProvider";
}
pub trait ITextEditProvider_Impl: ITextProvider_Impl {
    fn GetActiveComposition(&self) -> windows_core::Result<ITextRangeProvider>;
    fn GetConversionTarget(&self) -> windows_core::Result<ITextRangeProvider>;
}
impl ITextEditProvider_Vtbl {
    pub const fn new<Identity: ITextEditProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetActiveComposition<
            Identity: ITextEditProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextEditProvider_Impl::GetActiveComposition(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetConversionTarget<
            Identity: ITextEditProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextEditProvider_Impl::GetConversionTarget(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextEditProvider, OFFSET>(),
            GetActiveComposition: GetActiveComposition::<Identity, OFFSET>,
            GetConversionTarget: GetConversionTarget::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextEditProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextEditProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetActiveComposition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetConversionTarget: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextProvider,
    ITextProvider_Vtbl,
    0x37e7dce6_fe7a_56a7_a47a_9462872c67ef
);
impl windows_core::RuntimeType for ITextProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ITextProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ITextProvider {
    pub fn DocumentRange(&self) -> windows_core::Result<ITextRangeProvider> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DocumentRange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SupportedTextSelection(&self) -> windows_core::Result<super::SupportedTextSelection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SupportedTextSelection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetSelection(&self) -> windows_core::Result<windows_core::Array<ITextRangeProvider>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetSelection)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<ITextRangeProvider>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn GetVisibleRanges(
        &self,
    ) -> windows_core::Result<windows_core::Array<ITextRangeProvider>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetVisibleRanges)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<ITextRangeProvider>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn RangeFromChild<P0>(&self, childelement: P0) -> windows_core::Result<ITextRangeProvider>
    where
        P0: windows_core::Param<IRawElementProviderSimple>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RangeFromChild)(
                windows_core::Interface::as_raw(this),
                childelement.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RangeFromPoint(
        &self,
        screenlocation: windows::Foundation::Point,
    ) -> windows_core::Result<ITextRangeProvider> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RangeFromPoint)(
                windows_core::Interface::as_raw(this),
                screenlocation,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for ITextProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ITextProvider";
}
pub trait ITextProvider_Impl: windows_core::IUnknownImpl {
    fn DocumentRange(&self) -> windows_core::Result<ITextRangeProvider>;
    fn SupportedTextSelection(&self) -> windows_core::Result<super::SupportedTextSelection>;
    fn GetSelection(&self) -> windows_core::Result<windows_core::Array<ITextRangeProvider>>;
    fn GetVisibleRanges(&self) -> windows_core::Result<windows_core::Array<ITextRangeProvider>>;
    fn RangeFromChild(
        &self,
        childElement: windows_core::Ref<'_, IRawElementProviderSimple>,
    ) -> windows_core::Result<ITextRangeProvider>;
    fn RangeFromPoint(
        &self,
        screenLocation: &windows::Foundation::Point,
    ) -> windows_core::Result<ITextRangeProvider>;
}
impl ITextProvider_Vtbl {
    pub const fn new<Identity: ITextProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DocumentRange<
            Identity: ITextProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextProvider_Impl::DocumentRange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SupportedTextSelection<
            Identity: ITextProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::SupportedTextSelection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextProvider_Impl::SupportedTextSelection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetSelection<
            Identity: ITextProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextProvider_Impl::GetSelection(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetVisibleRanges<
            Identity: ITextProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextProvider_Impl::GetVisibleRanges(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RangeFromChild<
            Identity: ITextProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            childelement: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextProvider_Impl::RangeFromChild(
                    this,
                    core::mem::transmute_copy(&childelement),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RangeFromPoint<
            Identity: ITextProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            screenlocation: windows::Foundation::Point,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextProvider_Impl::RangeFromPoint(
                    this,
                    core::mem::transmute(&screenlocation),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextProvider, OFFSET>(),
            DocumentRange: DocumentRange::<Identity, OFFSET>,
            SupportedTextSelection: SupportedTextSelection::<Identity, OFFSET>,
            GetSelection: GetSelection::<Identity, OFFSET>,
            GetVisibleRanges: GetVisibleRanges::<Identity, OFFSET>,
            RangeFromChild: RangeFromChild::<Identity, OFFSET>,
            RangeFromPoint: RangeFromPoint::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DocumentRange: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SupportedTextSelection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::SupportedTextSelection,
    ) -> windows_core::HRESULT,
    pub GetSelection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetVisibleRanges: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RangeFromChild: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RangeFromPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Point,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextProvider2,
    ITextProvider2_Vtbl,
    0x6844f012_c7e6_5763_ba04_5b6db910cd34
);
impl windows_core::RuntimeType for ITextProvider2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ITextProvider2,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(ITextProvider2, ITextProvider);
impl ITextProvider2 {
    pub fn RangeFromAnnotation<P0>(
        &self,
        annotationelement: P0,
    ) -> windows_core::Result<ITextRangeProvider>
    where
        P0: windows_core::Param<IRawElementProviderSimple>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RangeFromAnnotation)(
                windows_core::Interface::as_raw(this),
                annotationelement.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetCaretRange(&self, isactive: &mut bool) -> windows_core::Result<ITextRangeProvider> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCaretRange)(
                windows_core::Interface::as_raw(this),
                isactive,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn DocumentRange(&self) -> windows_core::Result<ITextRangeProvider> {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DocumentRange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SupportedTextSelection(&self) -> windows_core::Result<super::SupportedTextSelection> {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SupportedTextSelection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetSelection(&self) -> windows_core::Result<windows_core::Array<ITextRangeProvider>> {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetSelection)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<ITextRangeProvider>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn GetVisibleRanges(
        &self,
    ) -> windows_core::Result<windows_core::Array<ITextRangeProvider>> {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetVisibleRanges)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<ITextRangeProvider>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn RangeFromChild<P0>(&self, childelement: P0) -> windows_core::Result<ITextRangeProvider>
    where
        P0: windows_core::Param<IRawElementProviderSimple>,
    {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RangeFromChild)(
                windows_core::Interface::as_raw(this),
                childelement.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RangeFromPoint(
        &self,
        screenlocation: windows::Foundation::Point,
    ) -> windows_core::Result<ITextRangeProvider> {
        let this = &windows_core::Interface::cast::<ITextProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RangeFromPoint)(
                windows_core::Interface::as_raw(this),
                screenlocation,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for ITextProvider2 {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ITextProvider2";
}
pub trait ITextProvider2_Impl: ITextProvider_Impl {
    fn RangeFromAnnotation(
        &self,
        annotationElement: windows_core::Ref<'_, IRawElementProviderSimple>,
    ) -> windows_core::Result<ITextRangeProvider>;
    fn GetCaretRange(&self, isActive: &mut bool) -> windows_core::Result<ITextRangeProvider>;
}
impl ITextProvider2_Vtbl {
    pub const fn new<Identity: ITextProvider2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn RangeFromAnnotation<
            Identity: ITextProvider2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            annotationelement: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextProvider2_Impl::RangeFromAnnotation(
                    this,
                    core::mem::transmute_copy(&annotationelement),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetCaretRange<
            Identity: ITextProvider2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            isactive: *mut bool,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextProvider2_Impl::GetCaretRange(this, core::mem::transmute_copy(&isactive))
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextProvider2, OFFSET>(),
            RangeFromAnnotation: RangeFromAnnotation::<Identity, OFFSET>,
            GetCaretRange: GetCaretRange::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextProvider2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextProvider2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub RangeFromAnnotation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetCaretRange: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut bool,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextRangeProvider,
    ITextRangeProvider_Vtbl,
    0x84210361_6ce2_5084_bf3b_28afa6e9851f
);
impl windows_core::RuntimeType for ITextRangeProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ITextRangeProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ITextRangeProvider {
    pub fn Clone(&self) -> windows_core::Result<ITextRangeProvider> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Clone)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Compare<P0>(&self, textrangeprovider: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<ITextRangeProvider>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compare)(
                windows_core::Interface::as_raw(this),
                textrangeprovider.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub fn CompareEndpoints<P1>(
        &self,
        endpoint: super::Text::TextPatternRangeEndpoint,
        textrangeprovider: P1,
        targetendpoint: super::Text::TextPatternRangeEndpoint,
    ) -> windows_core::Result<i32>
    where
        P1: windows_core::Param<ITextRangeProvider>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompareEndpoints)(
                windows_core::Interface::as_raw(this),
                endpoint,
                textrangeprovider.param().abi(),
                targetendpoint,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub fn ExpandToEnclosingUnit(&self, unit: super::Text::TextUnit) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ExpandToEnclosingUnit)(
                windows_core::Interface::as_raw(this),
                unit,
            )
            .ok()
        }
    }
    pub fn FindAttribute<P1>(
        &self,
        attributeid: i32,
        value: P1,
        backward: bool,
    ) -> windows_core::Result<ITextRangeProvider>
    where
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindAttribute)(
                windows_core::Interface::as_raw(this),
                attributeid,
                value.param().abi(),
                backward,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FindText(
        &self,
        text: &windows_core::HSTRING,
        backward: bool,
        ignorecase: bool,
    ) -> windows_core::Result<ITextRangeProvider> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindText)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(text),
                backward,
                ignorecase,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAttributeValue(
        &self,
        attributeid: i32,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAttributeValue)(
                windows_core::Interface::as_raw(this),
                attributeid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetBoundingRectangles(
        &self,
        returnvalue: &mut windows_core::Array<f64>,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).GetBoundingRectangles)(
                windows_core::Interface::as_raw(this),
                returnvalue.set_abi_len(),
                returnvalue as *mut _ as _,
            )
            .ok()
        }
    }
    pub fn GetEnclosingElement(&self) -> windows_core::Result<IRawElementProviderSimple> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetEnclosingElement)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetText(&self, maxlength: i32) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetText)(
                windows_core::Interface::as_raw(this),
                maxlength,
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub fn Move(&self, unit: super::Text::TextUnit, count: i32) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Move)(
                windows_core::Interface::as_raw(this),
                unit,
                count,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub fn MoveEndpointByUnit(
        &self,
        endpoint: super::Text::TextPatternRangeEndpoint,
        unit: super::Text::TextUnit,
        count: i32,
    ) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MoveEndpointByUnit)(
                windows_core::Interface::as_raw(this),
                endpoint,
                unit,
                count,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub fn MoveEndpointByRange<P1>(
        &self,
        endpoint: super::Text::TextPatternRangeEndpoint,
        textrangeprovider: P1,
        targetendpoint: super::Text::TextPatternRangeEndpoint,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<ITextRangeProvider>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).MoveEndpointByRange)(
                windows_core::Interface::as_raw(this),
                endpoint,
                textrangeprovider.param().abi(),
                targetendpoint,
            )
            .ok()
        }
    }
    pub fn Select(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Select)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AddToSelection(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).AddToSelection)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn RemoveFromSelection(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFromSelection)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ScrollIntoView(&self, aligntotop: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollIntoView)(
                windows_core::Interface::as_raw(this),
                aligntotop,
            )
            .ok()
        }
    }
    pub fn GetChildren(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetChildren)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<IRawElementProviderSimple>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
}
#[cfg(feature = "UI_Xaml_Automation_Text")]
impl windows_core::RuntimeName for ITextRangeProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider";
}
#[cfg(feature = "UI_Xaml_Automation_Text")]
pub trait ITextRangeProvider_Impl: windows_core::IUnknownImpl {
    fn Clone(&self) -> windows_core::Result<ITextRangeProvider>;
    fn Compare(
        &self,
        textRangeProvider: windows_core::Ref<'_, ITextRangeProvider>,
    ) -> windows_core::Result<bool>;
    fn CompareEndpoints(
        &self,
        endpoint: super::Text::TextPatternRangeEndpoint,
        textRangeProvider: windows_core::Ref<'_, ITextRangeProvider>,
        targetEndpoint: super::Text::TextPatternRangeEndpoint,
    ) -> windows_core::Result<i32>;
    fn ExpandToEnclosingUnit(&self, unit: super::Text::TextUnit) -> windows_core::Result<()>;
    fn FindAttribute(
        &self,
        attributeId: i32,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
        backward: bool,
    ) -> windows_core::Result<ITextRangeProvider>;
    fn FindText(
        &self,
        text: &windows_core::HSTRING,
        backward: bool,
        ignoreCase: bool,
    ) -> windows_core::Result<ITextRangeProvider>;
    fn GetAttributeValue(
        &self,
        attributeId: i32,
    ) -> windows_core::Result<windows_core::IInspectable>;
    fn GetBoundingRectangles(
        &self,
        returnValue: &mut windows_core::Array<f64>,
    ) -> windows_core::Result<()>;
    fn GetEnclosingElement(&self) -> windows_core::Result<IRawElementProviderSimple>;
    fn GetText(&self, maxLength: i32) -> windows_core::Result<windows_core::HSTRING>;
    fn Move(&self, unit: super::Text::TextUnit, count: i32) -> windows_core::Result<i32>;
    fn MoveEndpointByUnit(
        &self,
        endpoint: super::Text::TextPatternRangeEndpoint,
        unit: super::Text::TextUnit,
        count: i32,
    ) -> windows_core::Result<i32>;
    fn MoveEndpointByRange(
        &self,
        endpoint: super::Text::TextPatternRangeEndpoint,
        textRangeProvider: windows_core::Ref<'_, ITextRangeProvider>,
        targetEndpoint: super::Text::TextPatternRangeEndpoint,
    ) -> windows_core::Result<()>;
    fn Select(&self) -> windows_core::Result<()>;
    fn AddToSelection(&self) -> windows_core::Result<()>;
    fn RemoveFromSelection(&self) -> windows_core::Result<()>;
    fn ScrollIntoView(&self, alignToTop: bool) -> windows_core::Result<()>;
    fn GetChildren(&self) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>>;
}
#[cfg(feature = "UI_Xaml_Automation_Text")]
impl ITextRangeProvider_Vtbl {
    pub const fn new<Identity: ITextRangeProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Clone<Identity: ITextRangeProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextRangeProvider_Impl::Clone(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Compare<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            textrangeprovider: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextRangeProvider_Impl::Compare(
                    this,
                    core::mem::transmute_copy(&textrangeprovider),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CompareEndpoints<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            endpoint: super::Text::TextPatternRangeEndpoint,
            textrangeprovider: *mut core::ffi::c_void,
            targetendpoint: super::Text::TextPatternRangeEndpoint,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextRangeProvider_Impl::CompareEndpoints(
                    this,
                    endpoint,
                    core::mem::transmute_copy(&textrangeprovider),
                    targetendpoint,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ExpandToEnclosingUnit<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            unit: super::Text::TextUnit,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextRangeProvider_Impl::ExpandToEnclosingUnit(this, unit).into()
            }
        }
        unsafe extern "system" fn FindAttribute<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            attributeid: i32,
            value: *mut core::ffi::c_void,
            backward: bool,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextRangeProvider_Impl::FindAttribute(
                    this,
                    attributeid,
                    core::mem::transmute_copy(&value),
                    backward,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FindText<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            text: *mut core::ffi::c_void,
            backward: bool,
            ignorecase: bool,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextRangeProvider_Impl::FindText(
                    this,
                    core::mem::transmute(&text),
                    backward,
                    ignorecase,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAttributeValue<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            attributeid: i32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextRangeProvider_Impl::GetAttributeValue(this, attributeid) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetBoundingRectangles<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            returnvalue_array_size: *mut u32,
            returnvalue: *mut *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextRangeProvider_Impl::GetBoundingRectangles(
                    this,
                    windows_core::ArrayProxy::from_raw_parts(
                        core::mem::transmute_copy(&returnvalue),
                        returnvalue_array_size,
                    )
                    .as_array(),
                )
                .into()
            }
        }
        unsafe extern "system" fn GetEnclosingElement<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextRangeProvider_Impl::GetEnclosingElement(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetText<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            maxlength: i32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextRangeProvider_Impl::GetText(this, maxlength) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Move<Identity: ITextRangeProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            unit: super::Text::TextUnit,
            count: i32,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextRangeProvider_Impl::Move(this, unit, count) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MoveEndpointByUnit<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            endpoint: super::Text::TextPatternRangeEndpoint,
            unit: super::Text::TextUnit,
            count: i32,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextRangeProvider_Impl::MoveEndpointByUnit(this, endpoint, unit, count) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MoveEndpointByRange<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            endpoint: super::Text::TextPatternRangeEndpoint,
            textrangeprovider: *mut core::ffi::c_void,
            targetendpoint: super::Text::TextPatternRangeEndpoint,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextRangeProvider_Impl::MoveEndpointByRange(
                    this,
                    endpoint,
                    core::mem::transmute_copy(&textrangeprovider),
                    targetendpoint,
                )
                .into()
            }
        }
        unsafe extern "system" fn Select<Identity: ITextRangeProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextRangeProvider_Impl::Select(this).into()
            }
        }
        unsafe extern "system" fn AddToSelection<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextRangeProvider_Impl::AddToSelection(this).into()
            }
        }
        unsafe extern "system" fn RemoveFromSelection<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextRangeProvider_Impl::RemoveFromSelection(this).into()
            }
        }
        unsafe extern "system" fn ScrollIntoView<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            aligntotop: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextRangeProvider_Impl::ScrollIntoView(this, aligntotop).into()
            }
        }
        unsafe extern "system" fn GetChildren<
            Identity: ITextRangeProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITextRangeProvider_Impl::GetChildren(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextRangeProvider, OFFSET>(),
            Clone: Clone::<Identity, OFFSET>,
            Compare: Compare::<Identity, OFFSET>,
            CompareEndpoints: CompareEndpoints::<Identity, OFFSET>,
            ExpandToEnclosingUnit: ExpandToEnclosingUnit::<Identity, OFFSET>,
            FindAttribute: FindAttribute::<Identity, OFFSET>,
            FindText: FindText::<Identity, OFFSET>,
            GetAttributeValue: GetAttributeValue::<Identity, OFFSET>,
            GetBoundingRectangles: GetBoundingRectangles::<Identity, OFFSET>,
            GetEnclosingElement: GetEnclosingElement::<Identity, OFFSET>,
            GetText: GetText::<Identity, OFFSET>,
            Move: Move::<Identity, OFFSET>,
            MoveEndpointByUnit: MoveEndpointByUnit::<Identity, OFFSET>,
            MoveEndpointByRange: MoveEndpointByRange::<Identity, OFFSET>,
            Select: Select::<Identity, OFFSET>,
            AddToSelection: AddToSelection::<Identity, OFFSET>,
            RemoveFromSelection: RemoveFromSelection::<Identity, OFFSET>,
            ScrollIntoView: ScrollIntoView::<Identity, OFFSET>,
            GetChildren: GetChildren::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextRangeProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextRangeProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Clone: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Compare: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub CompareEndpoints: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Text::TextPatternRangeEndpoint,
        *mut core::ffi::c_void,
        super::Text::TextPatternRangeEndpoint,
        *mut i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Text"))]
    CompareEndpoints: usize,
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub ExpandToEnclosingUnit: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Text::TextUnit,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Text"))]
    ExpandToEnclosingUnit: usize,
    pub FindAttribute: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        *mut core::ffi::c_void,
        bool,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FindText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
        bool,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetAttributeValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetBoundingRectangles: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut f64,
    ) -> windows_core::HRESULT,
    pub GetEnclosingElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub Move: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Text::TextUnit,
        i32,
        *mut i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Text"))]
    Move: usize,
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub MoveEndpointByUnit: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Text::TextPatternRangeEndpoint,
        super::Text::TextUnit,
        i32,
        *mut i32,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Text"))]
    MoveEndpointByUnit: usize,
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub MoveEndpointByRange: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::Text::TextPatternRangeEndpoint,
        *mut core::ffi::c_void,
        super::Text::TextPatternRangeEndpoint,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Text"))]
    MoveEndpointByRange: usize,
    pub Select: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub AddToSelection: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub RemoveFromSelection:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub ScrollIntoView:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub GetChildren: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITextRangeProvider2,
    ITextRangeProvider2_Vtbl,
    0x34d4a80e_36bb_5362_a53b_490428a8b367
);
impl windows_core::RuntimeType for ITextRangeProvider2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ITextRangeProvider2,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(ITextRangeProvider2, ITextRangeProvider);
impl ITextRangeProvider2 {
    pub fn ShowContextMenu(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ShowContextMenu)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn Clone(&self) -> windows_core::Result<ITextRangeProvider> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Clone)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Compare<P0>(&self, textrangeprovider: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<ITextRangeProvider>,
    {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Compare)(
                windows_core::Interface::as_raw(this),
                textrangeprovider.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub fn CompareEndpoints<P1>(
        &self,
        endpoint: super::Text::TextPatternRangeEndpoint,
        textrangeprovider: P1,
        targetendpoint: super::Text::TextPatternRangeEndpoint,
    ) -> windows_core::Result<i32>
    where
        P1: windows_core::Param<ITextRangeProvider>,
    {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CompareEndpoints)(
                windows_core::Interface::as_raw(this),
                endpoint,
                textrangeprovider.param().abi(),
                targetendpoint,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub fn ExpandToEnclosingUnit(&self, unit: super::Text::TextUnit) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ExpandToEnclosingUnit)(
                windows_core::Interface::as_raw(this),
                unit,
            )
            .ok()
        }
    }
    pub fn FindAttribute<P1>(
        &self,
        attributeid: i32,
        value: P1,
        backward: bool,
    ) -> windows_core::Result<ITextRangeProvider>
    where
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindAttribute)(
                windows_core::Interface::as_raw(this),
                attributeid,
                value.param().abi(),
                backward,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FindText(
        &self,
        text: &windows_core::HSTRING,
        backward: bool,
        ignorecase: bool,
    ) -> windows_core::Result<ITextRangeProvider> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FindText)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(text),
                backward,
                ignorecase,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAttributeValue(
        &self,
        attributeid: i32,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAttributeValue)(
                windows_core::Interface::as_raw(this),
                attributeid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetBoundingRectangles(
        &self,
        returnvalue: &mut windows_core::Array<f64>,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).GetBoundingRectangles)(
                windows_core::Interface::as_raw(this),
                returnvalue.set_abi_len(),
                returnvalue as *mut _ as _,
            )
            .ok()
        }
    }
    pub fn GetEnclosingElement(&self) -> windows_core::Result<IRawElementProviderSimple> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetEnclosingElement)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetText(&self, maxlength: i32) -> windows_core::Result<windows_core::HSTRING> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetText)(
                windows_core::Interface::as_raw(this),
                maxlength,
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub fn Move(&self, unit: super::Text::TextUnit, count: i32) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Move)(
                windows_core::Interface::as_raw(this),
                unit,
                count,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub fn MoveEndpointByUnit(
        &self,
        endpoint: super::Text::TextPatternRangeEndpoint,
        unit: super::Text::TextUnit,
        count: i32,
    ) -> windows_core::Result<i32> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MoveEndpointByUnit)(
                windows_core::Interface::as_raw(this),
                endpoint,
                unit,
                count,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Xaml_Automation_Text")]
    pub fn MoveEndpointByRange<P1>(
        &self,
        endpoint: super::Text::TextPatternRangeEndpoint,
        textrangeprovider: P1,
        targetendpoint: super::Text::TextPatternRangeEndpoint,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<ITextRangeProvider>,
    {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).MoveEndpointByRange)(
                windows_core::Interface::as_raw(this),
                endpoint,
                textrangeprovider.param().abi(),
                targetendpoint,
            )
            .ok()
        }
    }
    pub fn Select(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Select)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn AddToSelection(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).AddToSelection)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn RemoveFromSelection(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFromSelection)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ScrollIntoView(&self, aligntotop: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ScrollIntoView)(
                windows_core::Interface::as_raw(this),
                aligntotop,
            )
            .ok()
        }
    }
    pub fn GetChildren(
        &self,
    ) -> windows_core::Result<windows_core::Array<IRawElementProviderSimple>> {
        let this = &windows_core::Interface::cast::<ITextRangeProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetChildren)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<IRawElementProviderSimple>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
}
#[cfg(feature = "UI_Xaml_Automation_Text")]
impl windows_core::RuntimeName for ITextRangeProvider2 {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider2";
}
#[cfg(feature = "UI_Xaml_Automation_Text")]
pub trait ITextRangeProvider2_Impl: ITextRangeProvider_Impl {
    fn ShowContextMenu(&self) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Xaml_Automation_Text")]
impl ITextRangeProvider2_Vtbl {
    pub const fn new<Identity: ITextRangeProvider2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ShowContextMenu<
            Identity: ITextRangeProvider2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITextRangeProvider2_Impl::ShowContextMenu(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITextRangeProvider2, OFFSET>(),
            ShowContextMenu: ShowContextMenu::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITextRangeProvider2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITextRangeProvider2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ShowContextMenu: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IToggleProvider,
    IToggleProvider_Vtbl,
    0x021080c2_30a9_52ef_bc32_2b79847b6ba7
);
impl windows_core::RuntimeType for IToggleProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IToggleProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IToggleProvider {
    pub fn ToggleState(&self) -> windows_core::Result<super::ToggleState> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToggleState)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Toggle(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Toggle)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeName for IToggleProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IToggleProvider";
}
pub trait IToggleProvider_Impl: windows_core::IUnknownImpl {
    fn ToggleState(&self) -> windows_core::Result<super::ToggleState>;
    fn Toggle(&self) -> windows_core::Result<()>;
}
impl IToggleProvider_Vtbl {
    pub const fn new<Identity: IToggleProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ToggleState<
            Identity: IToggleProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::ToggleState,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IToggleProvider_Impl::ToggleState(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Toggle<Identity: IToggleProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IToggleProvider_Impl::Toggle(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IToggleProvider, OFFSET>(),
            ToggleState: ToggleState::<Identity, OFFSET>,
            Toggle: Toggle::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IToggleProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IToggleProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ToggleState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::ToggleState,
    ) -> windows_core::HRESULT,
    pub Toggle: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITransformProvider,
    ITransformProvider_Vtbl,
    0x6fd76988_8f52_5ef2_a826_9c8c4951c911
);
impl windows_core::RuntimeType for ITransformProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ITransformProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ITransformProvider {
    pub fn CanMove(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanMove)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CanResize(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanResize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CanRotate(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanRotate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Move(&self, x: f64, y: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Move)(
                windows_core::Interface::as_raw(this),
                x,
                y,
            )
            .ok()
        }
    }
    pub fn Resize(&self, width: f64, height: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Resize)(
                windows_core::Interface::as_raw(this),
                width,
                height,
            )
            .ok()
        }
    }
    pub fn Rotate(&self, degrees: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Rotate)(
                windows_core::Interface::as_raw(this),
                degrees,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for ITransformProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ITransformProvider";
}
pub trait ITransformProvider_Impl: windows_core::IUnknownImpl {
    fn CanMove(&self) -> windows_core::Result<bool>;
    fn CanResize(&self) -> windows_core::Result<bool>;
    fn CanRotate(&self) -> windows_core::Result<bool>;
    fn Move(&self, x: f64, y: f64) -> windows_core::Result<()>;
    fn Resize(&self, width: f64, height: f64) -> windows_core::Result<()>;
    fn Rotate(&self, degrees: f64) -> windows_core::Result<()>;
}
impl ITransformProvider_Vtbl {
    pub const fn new<Identity: ITransformProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CanMove<
            Identity: ITransformProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformProvider_Impl::CanMove(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CanResize<
            Identity: ITransformProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformProvider_Impl::CanResize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CanRotate<
            Identity: ITransformProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformProvider_Impl::CanRotate(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Move<Identity: ITransformProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            x: f64,
            y: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITransformProvider_Impl::Move(this, x, y).into()
            }
        }
        unsafe extern "system" fn Resize<Identity: ITransformProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            width: f64,
            height: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITransformProvider_Impl::Resize(this, width, height).into()
            }
        }
        unsafe extern "system" fn Rotate<Identity: ITransformProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            degrees: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITransformProvider_Impl::Rotate(this, degrees).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITransformProvider, OFFSET>(),
            CanMove: CanMove::<Identity, OFFSET>,
            CanResize: CanResize::<Identity, OFFSET>,
            CanRotate: CanRotate::<Identity, OFFSET>,
            Move: Move::<Identity, OFFSET>,
            Resize: Resize::<Identity, OFFSET>,
            Rotate: Rotate::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITransformProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransformProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CanMove:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub CanResize:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub CanRotate:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub Move: unsafe extern "system" fn(*mut core::ffi::c_void, f64, f64) -> windows_core::HRESULT,
    pub Resize:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64, f64) -> windows_core::HRESULT,
    pub Rotate: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITransformProvider2,
    ITransformProvider2_Vtbl,
    0x7d91d02d_8401_5cf8_bbc4_47391a524215
);
impl windows_core::RuntimeType for ITransformProvider2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ITransformProvider2,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(ITransformProvider2, ITransformProvider);
impl ITransformProvider2 {
    pub fn CanZoom(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanZoom)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ZoomLevel(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ZoomLevel)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MaxZoom(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxZoom)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn MinZoom(&self) -> windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinZoom)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Zoom(&self, zoom: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Zoom)(
                windows_core::Interface::as_raw(this),
                zoom,
            )
            .ok()
        }
    }
    pub fn ZoomByUnit(&self, zoomunit: super::ZoomUnit) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ZoomByUnit)(
                windows_core::Interface::as_raw(this),
                zoomunit,
            )
            .ok()
        }
    }
    pub fn CanMove(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITransformProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanMove)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CanResize(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITransformProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanResize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CanRotate(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<ITransformProvider>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanRotate)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Move(&self, x: f64, y: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITransformProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Move)(
                windows_core::Interface::as_raw(this),
                x,
                y,
            )
            .ok()
        }
    }
    pub fn Resize(&self, width: f64, height: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITransformProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Resize)(
                windows_core::Interface::as_raw(this),
                width,
                height,
            )
            .ok()
        }
    }
    pub fn Rotate(&self, degrees: f64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<ITransformProvider>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Rotate)(
                windows_core::Interface::as_raw(this),
                degrees,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for ITransformProvider2 {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.ITransformProvider2";
}
pub trait ITransformProvider2_Impl: ITransformProvider_Impl {
    fn CanZoom(&self) -> windows_core::Result<bool>;
    fn ZoomLevel(&self) -> windows_core::Result<f64>;
    fn MaxZoom(&self) -> windows_core::Result<f64>;
    fn MinZoom(&self) -> windows_core::Result<f64>;
    fn Zoom(&self, zoom: f64) -> windows_core::Result<()>;
    fn ZoomByUnit(&self, zoomUnit: super::ZoomUnit) -> windows_core::Result<()>;
}
impl ITransformProvider2_Vtbl {
    pub const fn new<Identity: ITransformProvider2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CanZoom<
            Identity: ITransformProvider2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformProvider2_Impl::CanZoom(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ZoomLevel<
            Identity: ITransformProvider2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformProvider2_Impl::ZoomLevel(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MaxZoom<
            Identity: ITransformProvider2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformProvider2_Impl::MaxZoom(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MinZoom<
            Identity: ITransformProvider2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformProvider2_Impl::MinZoom(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Zoom<Identity: ITransformProvider2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            zoom: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITransformProvider2_Impl::Zoom(this, zoom).into()
            }
        }
        unsafe extern "system" fn ZoomByUnit<
            Identity: ITransformProvider2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            zoomunit: super::ZoomUnit,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ITransformProvider2_Impl::ZoomByUnit(this, zoomunit).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ITransformProvider2, OFFSET>(),
            CanZoom: CanZoom::<Identity, OFFSET>,
            ZoomLevel: ZoomLevel::<Identity, OFFSET>,
            MaxZoom: MaxZoom::<Identity, OFFSET>,
            MinZoom: MinZoom::<Identity, OFFSET>,
            Zoom: Zoom::<Identity, OFFSET>,
            ZoomByUnit: ZoomByUnit::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITransformProvider2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransformProvider2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CanZoom:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub ZoomLevel:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub MaxZoom:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub MinZoom:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub Zoom: unsafe extern "system" fn(*mut core::ffi::c_void, f64) -> windows_core::HRESULT,
    pub ZoomByUnit:
        unsafe extern "system" fn(*mut core::ffi::c_void, super::ZoomUnit) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IValueProvider,
    IValueProvider_Vtbl,
    0x984f11cf_4611_588e_b52e_b96a12322c71
);
impl windows_core::RuntimeType for IValueProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IValueProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IValueProvider {
    pub fn IsReadOnly(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsReadOnly)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Value(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetValue(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for IValueProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IValueProvider";
}
pub trait IValueProvider_Impl: windows_core::IUnknownImpl {
    fn IsReadOnly(&self) -> windows_core::Result<bool>;
    fn Value(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetValue(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IValueProvider_Vtbl {
    pub const fn new<Identity: IValueProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsReadOnly<Identity: IValueProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IValueProvider_Impl::IsReadOnly(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Value<Identity: IValueProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IValueProvider_Impl::Value(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetValue<Identity: IValueProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IValueProvider_Impl::SetValue(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IValueProvider, OFFSET>(),
            IsReadOnly: IsReadOnly::<Identity, OFFSET>,
            Value: Value::<Identity, OFFSET>,
            SetValue: SetValue::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IValueProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IValueProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsReadOnly:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub Value: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IVirtualizedItemProvider,
    IVirtualizedItemProvider_Vtbl,
    0x098f858a_2e63_5985_ab87_f8ebdb1c5740
);
impl windows_core::RuntimeType for IVirtualizedItemProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IVirtualizedItemProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IVirtualizedItemProvider {
    pub fn Realize(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Realize)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeName for IVirtualizedItemProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IVirtualizedItemProvider";
}
pub trait IVirtualizedItemProvider_Impl: windows_core::IUnknownImpl {
    fn Realize(&self) -> windows_core::Result<()>;
}
impl IVirtualizedItemProvider_Vtbl {
    pub const fn new<Identity: IVirtualizedItemProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Realize<
            Identity: IVirtualizedItemProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IVirtualizedItemProvider_Impl::Realize(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IVirtualizedItemProvider,
                OFFSET,
            >(),
            Realize: Realize::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IVirtualizedItemProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IVirtualizedItemProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Realize: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IWindowProvider,
    IWindowProvider_Vtbl,
    0x83f1df99_9ddf_575e_a651_2ee657fd16e0
);
impl windows_core::RuntimeType for IWindowProvider {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IWindowProvider,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IWindowProvider {
    pub fn IsModal(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsModal)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsTopmost(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTopmost)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Maximizable(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Maximizable)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Minimizable(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Minimizable)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn InteractionState(&self) -> windows_core::Result<super::WindowInteractionState> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).InteractionState)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn VisualState(&self) -> windows_core::Result<super::WindowVisualState> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VisualState)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn SetVisualState(&self, state: super::WindowVisualState) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVisualState)(
                windows_core::Interface::as_raw(this),
                state,
            )
            .ok()
        }
    }
    pub fn WaitForInputIdle(&self, milliseconds: i32) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WaitForInputIdle)(
                windows_core::Interface::as_raw(this),
                milliseconds,
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeName for IWindowProvider {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.Provider.IWindowProvider";
}
pub trait IWindowProvider_Impl: windows_core::IUnknownImpl {
    fn IsModal(&self) -> windows_core::Result<bool>;
    fn IsTopmost(&self) -> windows_core::Result<bool>;
    fn Maximizable(&self) -> windows_core::Result<bool>;
    fn Minimizable(&self) -> windows_core::Result<bool>;
    fn InteractionState(&self) -> windows_core::Result<super::WindowInteractionState>;
    fn VisualState(&self) -> windows_core::Result<super::WindowVisualState>;
    fn Close(&self) -> windows_core::Result<()>;
    fn SetVisualState(&self, state: super::WindowVisualState) -> windows_core::Result<()>;
    fn WaitForInputIdle(&self, milliseconds: i32) -> windows_core::Result<bool>;
}
impl IWindowProvider_Vtbl {
    pub const fn new<Identity: IWindowProvider_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsModal<Identity: IWindowProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowProvider_Impl::IsModal(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsTopmost<Identity: IWindowProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowProvider_Impl::IsTopmost(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Maximizable<
            Identity: IWindowProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowProvider_Impl::Maximizable(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Minimizable<
            Identity: IWindowProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowProvider_Impl::Minimizable(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn InteractionState<
            Identity: IWindowProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::WindowInteractionState,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowProvider_Impl::InteractionState(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn VisualState<
            Identity: IWindowProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::WindowVisualState,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowProvider_Impl::VisualState(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Close<Identity: IWindowProvider_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWindowProvider_Impl::Close(this).into()
            }
        }
        unsafe extern "system" fn SetVisualState<
            Identity: IWindowProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            state: super::WindowVisualState,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IWindowProvider_Impl::SetVisualState(this, state).into()
            }
        }
        unsafe extern "system" fn WaitForInputIdle<
            Identity: IWindowProvider_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            milliseconds: i32,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowProvider_Impl::WaitForInputIdle(this, milliseconds) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IWindowProvider, OFFSET>(),
            IsModal: IsModal::<Identity, OFFSET>,
            IsTopmost: IsTopmost::<Identity, OFFSET>,
            Maximizable: Maximizable::<Identity, OFFSET>,
            Minimizable: Minimizable::<Identity, OFFSET>,
            InteractionState: InteractionState::<Identity, OFFSET>,
            VisualState: VisualState::<Identity, OFFSET>,
            Close: Close::<Identity, OFFSET>,
            SetVisualState: SetVisualState::<Identity, OFFSET>,
            WaitForInputIdle: WaitForInputIdle::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IWindowProvider as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowProvider_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsModal:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsTopmost:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub Maximizable:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub Minimizable:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub InteractionState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::WindowInteractionState,
    ) -> windows_core::HRESULT,
    pub VisualState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::WindowVisualState,
    ) -> windows_core::HRESULT,
    pub Close: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub SetVisualState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::WindowVisualState,
    ) -> windows_core::HRESULT,
    pub WaitForInputIdle:
        unsafe extern "system" fn(*mut core::ffi::c_void, i32, *mut bool) -> windows_core::HRESULT,
}
