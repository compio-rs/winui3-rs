// Bindings generated by `windows-bindgen` 0.61.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[cfg(feature = "UI_Xaml_Automation_Peers")]
pub mod Peers;
#[cfg(feature = "UI_Xaml_Automation_Provider")]
pub mod Provider;
#[cfg(feature = "UI_Xaml_Automation_Text")]
pub mod Text;
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AnnotationPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AnnotationPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl AnnotationPatternIdentifiers {
    pub fn AnnotationTypeIdProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAnnotationPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnnotationTypeIdProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AnnotationTypeNameProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAnnotationPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnnotationTypeNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AuthorProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAnnotationPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AuthorProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DateTimeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAnnotationPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DateTimeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn TargetProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAnnotationPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IAnnotationPatternIdentifiersStatics<
        R,
        F: FnOnce(&IAnnotationPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AnnotationPatternIdentifiers,
            IAnnotationPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for AnnotationPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IAnnotationPatternIdentifiers>();
}
unsafe impl windows_core::Interface for AnnotationPatternIdentifiers {
    type Vtable = <IAnnotationPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IAnnotationPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AnnotationPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.AnnotationPatternIdentifiers";
}
unsafe impl Send for AnnotationPatternIdentifiers {}
unsafe impl Sync for AnnotationPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AnnotationType(pub i32);
impl AnnotationType {
    pub const Unknown: Self = Self(60000i32);
    pub const SpellingError: Self = Self(60001i32);
    pub const GrammarError: Self = Self(60002i32);
    pub const Comment: Self = Self(60003i32);
    pub const FormulaError: Self = Self(60004i32);
    pub const TrackChanges: Self = Self(60005i32);
    pub const Header: Self = Self(60006i32);
    pub const Footer: Self = Self(60007i32);
    pub const Highlighted: Self = Self(60008i32);
    pub const Endnote: Self = Self(60009i32);
    pub const Footnote: Self = Self(60010i32);
    pub const InsertionChange: Self = Self(60011i32);
    pub const DeletionChange: Self = Self(60012i32);
    pub const MoveChange: Self = Self(60013i32);
    pub const FormatChange: Self = Self(60014i32);
    pub const UnsyncedChange: Self = Self(60015i32);
    pub const EditingLockedChange: Self = Self(60016i32);
    pub const ExternalChange: Self = Self(60017i32);
    pub const ConflictingChange: Self = Self(60018i32);
    pub const Author: Self = Self(60019i32);
    pub const AdvancedProofingIssue: Self = Self(60020i32);
    pub const DataValidationError: Self = Self(60021i32);
    pub const CircularReferenceError: Self = Self(60022i32);
}
impl windows_core::TypeKind for AnnotationType {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AnnotationType {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.AnnotationType;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AutomationActiveEnd(pub i32);
impl AutomationActiveEnd {
    pub const None: Self = Self(0i32);
    pub const Start: Self = Self(1i32);
    pub const End: Self = Self(2i32);
}
impl windows_core::TypeKind for AutomationActiveEnd {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AutomationActiveEnd {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.AutomationActiveEnd;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AutomationAnimationStyle(pub i32);
impl AutomationAnimationStyle {
    pub const None: Self = Self(0i32);
    pub const LasVegasLights: Self = Self(1i32);
    pub const BlinkingBackground: Self = Self(2i32);
    pub const SparkleText: Self = Self(3i32);
    pub const MarchingBlackAnts: Self = Self(4i32);
    pub const MarchingRedAnts: Self = Self(5i32);
    pub const Shimmer: Self = Self(6i32);
    pub const Other: Self = Self(7i32);
}
impl windows_core::TypeKind for AutomationAnimationStyle {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AutomationAnimationStyle {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.AutomationAnimationStyle;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AutomationAnnotation(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AutomationAnnotation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(AutomationAnnotation, super::DependencyObject);
impl AutomationAnnotation {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AutomationAnnotation,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Type(&self) -> windows_core::Result<AnnotationType> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Type)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetType(&self, value: AnnotationType) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetType)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Element(&self) -> windows_core::Result<super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Element)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetElement<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetElement)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CreateInstance(r#type: AnnotationType) -> windows_core::Result<AutomationAnnotation> {
        Self::IAutomationAnnotationFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                r#type,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn CreateWithElementParameter<P1>(
        r#type: AnnotationType,
        element: P1,
    ) -> windows_core::Result<AutomationAnnotation>
    where
        P1: windows_core::Param<super::UIElement>,
    {
        Self::IAutomationAnnotationFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateWithElementParameter)(
                windows_core::Interface::as_raw(this),
                r#type,
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn TypeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationAnnotationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ElementProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationAnnotationStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ElementProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<windows_core::IInspectable>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).ClearValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ReadLocalValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> windows_core::Result<windows_core::IInspectable>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::DependencyProperty>,
        P1: windows_core::Param<super::DependencyPropertyChangedCallback>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                callback.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyProperty>,
    {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                windows_core::Interface::as_raw(this),
                dp.param().abi(),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> windows_core::Result<windows::UI::Core::CoreDispatcher> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Dispatcher)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> windows_core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IAutomationAnnotationFactory<
        R,
        F: FnOnce(&IAutomationAnnotationFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AutomationAnnotation,
            IAutomationAnnotationFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IAutomationAnnotationStatics<
        R,
        F: FnOnce(&IAutomationAnnotationStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AutomationAnnotation,
            IAutomationAnnotationStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for AutomationAnnotation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IAutomationAnnotation>();
}
unsafe impl windows_core::Interface for AutomationAnnotation {
    type Vtable = <IAutomationAnnotation as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IAutomationAnnotation as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AutomationAnnotation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.AutomationAnnotation";
}
unsafe impl Send for AutomationAnnotation {}
unsafe impl Sync for AutomationAnnotation {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AutomationBulletStyle(pub i32);
impl AutomationBulletStyle {
    pub const None: Self = Self(0i32);
    pub const HollowRoundBullet: Self = Self(1i32);
    pub const FilledRoundBullet: Self = Self(2i32);
    pub const HollowSquareBullet: Self = Self(3i32);
    pub const FilledSquareBullet: Self = Self(4i32);
    pub const DashBullet: Self = Self(5i32);
    pub const Other: Self = Self(6i32);
}
impl windows_core::TypeKind for AutomationBulletStyle {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AutomationBulletStyle {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.AutomationBulletStyle;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AutomationCaretBidiMode(pub i32);
impl AutomationCaretBidiMode {
    pub const LTR: Self = Self(0i32);
    pub const RTL: Self = Self(1i32);
}
impl windows_core::TypeKind for AutomationCaretBidiMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AutomationCaretBidiMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.AutomationCaretBidiMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AutomationCaretPosition(pub i32);
impl AutomationCaretPosition {
    pub const Unknown: Self = Self(0i32);
    pub const EndOfLine: Self = Self(1i32);
    pub const BeginningOfLine: Self = Self(2i32);
}
impl windows_core::TypeKind for AutomationCaretPosition {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AutomationCaretPosition {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.AutomationCaretPosition;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AutomationElementIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AutomationElementIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl AutomationElementIdentifiers {
    pub fn AcceleratorKeyProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AcceleratorKeyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AccessKeyProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AutomationIdProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationIdProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn BoundingRectangleProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).BoundingRectangleProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ClassNameProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClassNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ClickablePointProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClickablePointProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ControlTypeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ControlTypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn HasKeyboardFocusProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HasKeyboardFocusProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn HelpTextProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HelpTextProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsContentElementProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsContentElementProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsControlElementProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsControlElementProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsEnabledProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabledProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsKeyboardFocusableProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsKeyboardFocusableProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsOffscreenProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsOffscreenProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsPasswordProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPasswordProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsRequiredForFormProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRequiredForFormProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ItemStatusProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemStatusProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ItemTypeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemTypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn LabeledByProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LabeledByProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn LocalizedControlTypeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LocalizedControlTypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn NameProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn OrientationProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OrientationProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn LiveSettingProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LiveSettingProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ControlledPeersProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ControlledPeersProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn PositionInSetProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionInSetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SizeOfSetProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SizeOfSetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn LevelProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LevelProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn AnnotationsProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnnotationsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn LandmarkTypeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LandmarkTypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn LocalizedLandmarkTypeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LocalizedLandmarkTypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsPeripheralProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPeripheralProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsDataValidForFormProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDataValidForFormProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FullDescriptionProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FullDescriptionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DescribedByProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DescribedByProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FlowsToProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FlowsToProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FlowsFromProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FlowsFromProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CultureProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CultureProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn HeadingLevelProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HeadingLevelProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsDialogProperty() -> windows_core::Result<AutomationProperty> {
        Self::IAutomationElementIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDialogProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IAutomationElementIdentifiersStatics<
        R,
        F: FnOnce(&IAutomationElementIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AutomationElementIdentifiers,
            IAutomationElementIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for AutomationElementIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IAutomationElementIdentifiers>();
}
unsafe impl windows_core::Interface for AutomationElementIdentifiers {
    type Vtable = <IAutomationElementIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IAutomationElementIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AutomationElementIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.AutomationElementIdentifiers";
}
unsafe impl Send for AutomationElementIdentifiers {}
unsafe impl Sync for AutomationElementIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AutomationFlowDirections(pub i32);
impl AutomationFlowDirections {
    pub const Default: Self = Self(0i32);
    pub const RightToLeft: Self = Self(1i32);
    pub const BottomToTop: Self = Self(2i32);
    pub const Vertical: Self = Self(3i32);
}
impl windows_core::TypeKind for AutomationFlowDirections {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AutomationFlowDirections {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.AutomationFlowDirections;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AutomationOutlineStyles(pub i32);
impl AutomationOutlineStyles {
    pub const None: Self = Self(0i32);
    pub const Outline: Self = Self(1i32);
    pub const Shadow: Self = Self(2i32);
    pub const Engraved: Self = Self(3i32);
    pub const Embossed: Self = Self(4i32);
}
impl windows_core::TypeKind for AutomationOutlineStyles {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AutomationOutlineStyles {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.AutomationOutlineStyles;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AutomationProperties(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AutomationProperties,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl AutomationProperties {
    pub fn AcceleratorKeyProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AcceleratorKeyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetAcceleratorKey<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAcceleratorKey)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetAcceleratorKey<P0>(
        element: P0,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetAcceleratorKey)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(value),
            )
            .ok()
        })
    }
    pub fn AccessKeyProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessKeyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetAccessKey<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAccessKey)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetAccessKey<P0>(element: P0, value: &windows_core::HSTRING) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetAccessKey)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(value),
            )
            .ok()
        })
    }
    pub fn AutomationIdProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationIdProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetAutomationId<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAutomationId)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetAutomationId<P0>(
        element: P0,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetAutomationId)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(value),
            )
            .ok()
        })
    }
    pub fn HelpTextProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HelpTextProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetHelpText<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHelpText)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetHelpText<P0>(element: P0, value: &windows_core::HSTRING) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetHelpText)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(value),
            )
            .ok()
        })
    }
    pub fn IsRequiredForFormProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsRequiredForFormProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetIsRequiredForForm<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsRequiredForForm)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsRequiredForForm<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsRequiredForForm)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn ItemStatusProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemStatusProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetItemStatus<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetItemStatus)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetItemStatus<P0>(element: P0, value: &windows_core::HSTRING) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetItemStatus)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(value),
            )
            .ok()
        })
    }
    pub fn ItemTypeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ItemTypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetItemType<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetItemType)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetItemType<P0>(element: P0, value: &windows_core::HSTRING) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetItemType)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(value),
            )
            .ok()
        })
    }
    pub fn LabeledByProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LabeledByProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn GetLabeledBy<P0>(element: P0) -> windows_core::Result<super::UIElement>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetLabeledBy)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn SetLabeledBy<P0, P1>(element: P0, value: P1) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
        P1: windows_core::Param<super::UIElement>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetLabeledBy)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value.param().abi(),
            )
            .ok()
        })
    }
    pub fn NameProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetName<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetName)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetName<P0>(element: P0, value: &windows_core::HSTRING) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetName)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(value),
            )
            .ok()
        })
    }
    pub fn LiveSettingProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LiveSettingProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub fn GetLiveSetting<P0>(element: P0) -> windows_core::Result<Peers::AutomationLiveSetting>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetLiveSetting)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub fn SetLiveSetting<P0>(
        element: P0,
        value: Peers::AutomationLiveSetting,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetLiveSetting)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn AccessibilityViewProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AccessibilityViewProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub fn GetAccessibilityView<P0>(element: P0) -> windows_core::Result<Peers::AccessibilityView>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAccessibilityView)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub fn SetAccessibilityView<P0>(
        element: P0,
        value: Peers::AccessibilityView,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetAccessibilityView)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn ControlledPeersProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ControlledPeersProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn GetControlledPeers<P0>(
        element: P0,
    ) -> windows_core::Result<windows_collections::IVector<super::UIElement>>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetControlledPeers)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn PositionInSetProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PositionInSetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetPositionInSet<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetPositionInSet)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetPositionInSet<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetPositionInSet)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn SizeOfSetProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SizeOfSetProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetSizeOfSet<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetSizeOfSet)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetSizeOfSet<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetSizeOfSet)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn LevelProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LevelProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetLevel<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetLevel)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetLevel<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetLevel)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn AnnotationsProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AnnotationsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetAnnotations<P0>(
        element: P0,
    ) -> windows_core::Result<windows_collections::IVector<AutomationAnnotation>>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAnnotations)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn LandmarkTypeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LandmarkTypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub fn GetLandmarkType<P0>(element: P0) -> windows_core::Result<Peers::AutomationLandmarkType>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetLandmarkType)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub fn SetLandmarkType<P0>(
        element: P0,
        value: Peers::AutomationLandmarkType,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetLandmarkType)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn LocalizedLandmarkTypeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LocalizedLandmarkTypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetLocalizedLandmarkType<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetLocalizedLandmarkType)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetLocalizedLandmarkType<P0>(
        element: P0,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetLocalizedLandmarkType)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(value),
            )
            .ok()
        })
    }
    pub fn IsPeripheralProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsPeripheralProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetIsPeripheral<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsPeripheral)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsPeripheral<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsPeripheral)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn IsDataValidForFormProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDataValidForFormProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetIsDataValidForForm<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsDataValidForForm)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsDataValidForForm<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsDataValidForForm)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn FullDescriptionProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FullDescriptionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetFullDescription<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetFullDescription)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetFullDescription<P0>(
        element: P0,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetFullDescription)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(value),
            )
            .ok()
        })
    }
    pub fn LocalizedControlTypeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LocalizedControlTypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetLocalizedControlType<P0>(element: P0) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetLocalizedControlType)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn SetLocalizedControlType<P0>(
        element: P0,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetLocalizedControlType)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                core::mem::transmute_copy(value),
            )
            .ok()
        })
    }
    pub fn DescribedByProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DescribedByProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetDescribedBy<P0>(
        element: P0,
    ) -> windows_core::Result<windows_collections::IVector<super::DependencyObject>>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDescribedBy)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FlowsToProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FlowsToProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetFlowsTo<P0>(
        element: P0,
    ) -> windows_core::Result<windows_collections::IVector<super::DependencyObject>>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetFlowsTo)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FlowsFromProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FlowsFromProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetFlowsFrom<P0>(
        element: P0,
    ) -> windows_core::Result<windows_collections::IVector<super::DependencyObject>>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetFlowsFrom)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CultureProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CultureProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetCulture<P0>(element: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetCulture)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetCulture<P0>(element: P0, value: i32) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetCulture)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn HeadingLevelProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HeadingLevelProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub fn GetHeadingLevel<P0>(element: P0) -> windows_core::Result<Peers::AutomationHeadingLevel>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetHeadingLevel)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub fn SetHeadingLevel<P0>(
        element: P0,
        value: Peers::AutomationHeadingLevel,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetHeadingLevel)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn IsDialogProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsDialogProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetIsDialog<P0>(element: P0) -> windows_core::Result<bool>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIsDialog)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn SetIsDialog<P0>(element: P0, value: bool) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::DependencyObject>,
    {
        Self::IAutomationPropertiesStatics(|this| unsafe {
            (windows_core::Interface::vtable(this).SetIsDialog)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn AutomationControlTypeProperty() -> windows_core::Result<super::DependencyProperty> {
        Self::IAutomationPropertiesStatics2(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationControlTypeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers"))]
    pub fn GetAutomationControlType<P0>(
        element: P0,
    ) -> windows_core::Result<Peers::AutomationControlType>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::IAutomationPropertiesStatics2(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAutomationControlType)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers"))]
    pub fn SetAutomationControlType<P0>(
        element: P0,
        value: Peers::AutomationControlType,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::UIElement>,
    {
        Self::IAutomationPropertiesStatics2(|this| unsafe {
            (windows_core::Interface::vtable(this).SetAutomationControlType)(
                windows_core::Interface::as_raw(this),
                element.param().abi(),
                value,
            )
            .ok()
        })
    }
    fn IAutomationPropertiesStatics<
        R,
        F: FnOnce(&IAutomationPropertiesStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AutomationProperties,
            IAutomationPropertiesStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IAutomationPropertiesStatics2<
        R,
        F: FnOnce(&IAutomationPropertiesStatics2) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            AutomationProperties,
            IAutomationPropertiesStatics2,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for AutomationProperties {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IAutomationProperties>();
}
unsafe impl windows_core::Interface for AutomationProperties {
    type Vtable = <IAutomationProperties as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IAutomationProperties as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AutomationProperties {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.AutomationProperties";
}
unsafe impl Send for AutomationProperties {}
unsafe impl Sync for AutomationProperties {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AutomationProperty(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    AutomationProperty,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl AutomationProperty {}
impl windows_core::RuntimeType for AutomationProperty {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IAutomationProperty>();
}
unsafe impl windows_core::Interface for AutomationProperty {
    type Vtable = <IAutomationProperty as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IAutomationProperty as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for AutomationProperty {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.AutomationProperty";
}
unsafe impl Send for AutomationProperty {}
unsafe impl Sync for AutomationProperty {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AutomationStyleId(pub i32);
impl AutomationStyleId {
    pub const Heading1: Self = Self(70001i32);
    pub const Heading2: Self = Self(70002i32);
    pub const Heading3: Self = Self(70003i32);
    pub const Heading4: Self = Self(70004i32);
    pub const Heading5: Self = Self(70005i32);
    pub const Heading6: Self = Self(70006i32);
    pub const Heading7: Self = Self(70007i32);
    pub const Heading8: Self = Self(70008i32);
    pub const Heading9: Self = Self(70009i32);
    pub const Title: Self = Self(70010i32);
    pub const Subtitle: Self = Self(70011i32);
    pub const Normal: Self = Self(70012i32);
    pub const Emphasis: Self = Self(70013i32);
    pub const Quote: Self = Self(70014i32);
    pub const BulletedList: Self = Self(70015i32);
}
impl windows_core::TypeKind for AutomationStyleId {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AutomationStyleId {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.AutomationStyleId;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AutomationTextDecorationLineStyle(pub i32);
impl AutomationTextDecorationLineStyle {
    pub const None: Self = Self(0i32);
    pub const Single: Self = Self(1i32);
    pub const WordsOnly: Self = Self(2i32);
    pub const Double: Self = Self(3i32);
    pub const Dot: Self = Self(4i32);
    pub const Dash: Self = Self(5i32);
    pub const DashDot: Self = Self(6i32);
    pub const DashDotDot: Self = Self(7i32);
    pub const Wavy: Self = Self(8i32);
    pub const ThickSingle: Self = Self(9i32);
    pub const DoubleWavy: Self = Self(10i32);
    pub const ThickWavy: Self = Self(11i32);
    pub const LongDash: Self = Self(12i32);
    pub const ThickDash: Self = Self(13i32);
    pub const ThickDashDot: Self = Self(14i32);
    pub const ThickDashDotDot: Self = Self(15i32);
    pub const ThickDot: Self = Self(16i32);
    pub const ThickLongDash: Self = Self(17i32);
    pub const Other: Self = Self(18i32);
}
impl windows_core::TypeKind for AutomationTextDecorationLineStyle {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AutomationTextDecorationLineStyle {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.AutomationTextDecorationLineStyle;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct AutomationTextEditChangeType(pub i32);
impl AutomationTextEditChangeType {
    pub const None: Self = Self(0i32);
    pub const AutoCorrect: Self = Self(1i32);
    pub const Composition: Self = Self(2i32);
    pub const CompositionFinalized: Self = Self(3i32);
}
impl windows_core::TypeKind for AutomationTextEditChangeType {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for AutomationTextEditChangeType {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.AutomationTextEditChangeType;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DockPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DockPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl DockPatternIdentifiers {
    pub fn DockPositionProperty() -> windows_core::Result<AutomationProperty> {
        Self::IDockPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DockPositionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IDockPatternIdentifiersStatics<
        R,
        F: FnOnce(&IDockPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DockPatternIdentifiers,
            IDockPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DockPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDockPatternIdentifiers>();
}
unsafe impl windows_core::Interface for DockPatternIdentifiers {
    type Vtable = <IDockPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDockPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DockPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.DockPatternIdentifiers";
}
unsafe impl Send for DockPatternIdentifiers {}
unsafe impl Sync for DockPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct DockPosition(pub i32);
impl DockPosition {
    pub const Top: Self = Self(0i32);
    pub const Left: Self = Self(1i32);
    pub const Bottom: Self = Self(2i32);
    pub const Right: Self = Self(3i32);
    pub const Fill: Self = Self(4i32);
    pub const None: Self = Self(5i32);
}
impl windows_core::TypeKind for DockPosition {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for DockPosition {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.DockPosition;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DragPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DragPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl DragPatternIdentifiers {
    pub fn DropEffectProperty() -> windows_core::Result<AutomationProperty> {
        Self::IDragPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DropEffectProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DropEffectsProperty() -> windows_core::Result<AutomationProperty> {
        Self::IDragPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DropEffectsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GrabbedItemsProperty() -> windows_core::Result<AutomationProperty> {
        Self::IDragPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GrabbedItemsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsGrabbedProperty() -> windows_core::Result<AutomationProperty> {
        Self::IDragPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsGrabbedProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IDragPatternIdentifiersStatics<
        R,
        F: FnOnce(&IDragPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DragPatternIdentifiers,
            IDragPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DragPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDragPatternIdentifiers>();
}
unsafe impl windows_core::Interface for DragPatternIdentifiers {
    type Vtable = <IDragPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDragPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DragPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.DragPatternIdentifiers";
}
unsafe impl Send for DragPatternIdentifiers {}
unsafe impl Sync for DragPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DropTargetPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DropTargetPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl DropTargetPatternIdentifiers {
    pub fn DropTargetEffectProperty() -> windows_core::Result<AutomationProperty> {
        Self::IDropTargetPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DropTargetEffectProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn DropTargetEffectsProperty() -> windows_core::Result<AutomationProperty> {
        Self::IDropTargetPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DropTargetEffectsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IDropTargetPatternIdentifiersStatics<
        R,
        F: FnOnce(&IDropTargetPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DropTargetPatternIdentifiers,
            IDropTargetPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DropTargetPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDropTargetPatternIdentifiers>();
}
unsafe impl windows_core::Interface for DropTargetPatternIdentifiers {
    type Vtable = <IDropTargetPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDropTargetPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DropTargetPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.DropTargetPatternIdentifiers";
}
unsafe impl Send for DropTargetPatternIdentifiers {}
unsafe impl Sync for DropTargetPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ExpandCollapsePatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ExpandCollapsePatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ExpandCollapsePatternIdentifiers {
    pub fn ExpandCollapseStateProperty() -> windows_core::Result<AutomationProperty> {
        Self::IExpandCollapsePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExpandCollapseStateProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IExpandCollapsePatternIdentifiersStatics<
        R,
        F: FnOnce(&IExpandCollapsePatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ExpandCollapsePatternIdentifiers,
            IExpandCollapsePatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ExpandCollapsePatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IExpandCollapsePatternIdentifiers>();
}
unsafe impl windows_core::Interface for ExpandCollapsePatternIdentifiers {
    type Vtable = <IExpandCollapsePatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IExpandCollapsePatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ExpandCollapsePatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ExpandCollapsePatternIdentifiers";
}
unsafe impl Send for ExpandCollapsePatternIdentifiers {}
unsafe impl Sync for ExpandCollapsePatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ExpandCollapseState(pub i32);
impl ExpandCollapseState {
    pub const Collapsed: Self = Self(0i32);
    pub const Expanded: Self = Self(1i32);
    pub const PartiallyExpanded: Self = Self(2i32);
    pub const LeafNode: Self = Self(3i32);
}
impl windows_core::TypeKind for ExpandCollapseState {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ExpandCollapseState {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.ExpandCollapseState;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct GridItemPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    GridItemPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl GridItemPatternIdentifiers {
    pub fn ColumnProperty() -> windows_core::Result<AutomationProperty> {
        Self::IGridItemPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColumnProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ColumnSpanProperty() -> windows_core::Result<AutomationProperty> {
        Self::IGridItemPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColumnSpanProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ContainingGridProperty() -> windows_core::Result<AutomationProperty> {
        Self::IGridItemPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ContainingGridProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn RowProperty() -> windows_core::Result<AutomationProperty> {
        Self::IGridItemPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RowProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn RowSpanProperty() -> windows_core::Result<AutomationProperty> {
        Self::IGridItemPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RowSpanProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IGridItemPatternIdentifiersStatics<
        R,
        F: FnOnce(&IGridItemPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            GridItemPatternIdentifiers,
            IGridItemPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for GridItemPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IGridItemPatternIdentifiers>();
}
unsafe impl windows_core::Interface for GridItemPatternIdentifiers {
    type Vtable = <IGridItemPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IGridItemPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for GridItemPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.GridItemPatternIdentifiers";
}
unsafe impl Send for GridItemPatternIdentifiers {}
unsafe impl Sync for GridItemPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct GridPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    GridPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl GridPatternIdentifiers {
    pub fn ColumnCountProperty() -> windows_core::Result<AutomationProperty> {
        Self::IGridPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColumnCountProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn RowCountProperty() -> windows_core::Result<AutomationProperty> {
        Self::IGridPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RowCountProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IGridPatternIdentifiersStatics<
        R,
        F: FnOnce(&IGridPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            GridPatternIdentifiers,
            IGridPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for GridPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IGridPatternIdentifiers>();
}
unsafe impl windows_core::Interface for GridPatternIdentifiers {
    type Vtable = <IGridPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IGridPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for GridPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.GridPatternIdentifiers";
}
unsafe impl Send for GridPatternIdentifiers {}
unsafe impl Sync for GridPatternIdentifiers {}
windows_core::imp::define_interface!(
    IAnnotationPatternIdentifiers,
    IAnnotationPatternIdentifiers_Vtbl,
    0x92d76915_0cd3_59cd_8ae0_c9004628ba1e
);
impl windows_core::RuntimeType for IAnnotationPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAnnotationPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IAnnotationPatternIdentifiers";
}
pub trait IAnnotationPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IAnnotationPatternIdentifiers_Vtbl {
    pub const fn new<Identity: IAnnotationPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IAnnotationPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAnnotationPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnnotationPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IAnnotationPatternIdentifiersStatics,
    IAnnotationPatternIdentifiersStatics_Vtbl,
    0x20a136e2_4a47_5de5_9e1e_ecfc6d92f52a
);
impl windows_core::RuntimeType for IAnnotationPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAnnotationPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IAnnotationPatternIdentifiersStatics";
}
pub trait IAnnotationPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn AnnotationTypeIdProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn AnnotationTypeNameProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn AuthorProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn DateTimeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn TargetProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IAnnotationPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IAnnotationPatternIdentifiersStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn AnnotationTypeIdProperty<
            Identity: IAnnotationPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnnotationPatternIdentifiersStatics_Impl::AnnotationTypeIdProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AnnotationTypeNameProperty<
            Identity: IAnnotationPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnnotationPatternIdentifiersStatics_Impl::AnnotationTypeNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AuthorProperty<
            Identity: IAnnotationPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnnotationPatternIdentifiersStatics_Impl::AuthorProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DateTimeProperty<
            Identity: IAnnotationPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnnotationPatternIdentifiersStatics_Impl::DateTimeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TargetProperty<
            Identity: IAnnotationPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAnnotationPatternIdentifiersStatics_Impl::TargetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IAnnotationPatternIdentifiersStatics,
                OFFSET,
            >(),
            AnnotationTypeIdProperty: AnnotationTypeIdProperty::<Identity, OFFSET>,
            AnnotationTypeNameProperty: AnnotationTypeNameProperty::<Identity, OFFSET>,
            AuthorProperty: AuthorProperty::<Identity, OFFSET>,
            DateTimeProperty: DateTimeProperty::<Identity, OFFSET>,
            TargetProperty: TargetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAnnotationPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnnotationPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AnnotationTypeIdProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AnnotationTypeNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AuthorProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DateTimeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TargetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IAutomationAnnotation,
    IAutomationAnnotation_Vtbl,
    0xc2cc46ad_1414_5f1b_808a_89e5d53d82fe
);
impl windows_core::RuntimeType for IAutomationAnnotation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IAutomationAnnotation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IAutomationAnnotation";
}
#[cfg(feature = "UI_Composition")]
pub trait IAutomationAnnotation_Impl: windows_core::IUnknownImpl {
    fn Type(&self) -> windows_core::Result<AnnotationType>;
    fn SetType(&self, value: AnnotationType) -> windows_core::Result<()>;
    fn Element(&self) -> windows_core::Result<super::UIElement>;
    fn SetElement(
        &self,
        value: windows_core::Ref<'_, super::UIElement>,
    ) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IAutomationAnnotation_Vtbl {
    pub const fn new<Identity: IAutomationAnnotation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Type<
            Identity: IAutomationAnnotation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut AnnotationType,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationAnnotation_Impl::Type(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetType<
            Identity: IAutomationAnnotation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: AnnotationType,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationAnnotation_Impl::SetType(this, value).into()
            }
        }
        unsafe extern "system" fn Element<
            Identity: IAutomationAnnotation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationAnnotation_Impl::Element(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetElement<
            Identity: IAutomationAnnotation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationAnnotation_Impl::SetElement(this, core::mem::transmute_copy(&value))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IAutomationAnnotation, OFFSET>(
            ),
            Type: Type::<Identity, OFFSET>,
            SetType: SetType::<Identity, OFFSET>,
            Element: Element::<Identity, OFFSET>,
            SetElement: SetElement::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAutomationAnnotation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutomationAnnotation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Type: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut AnnotationType,
    ) -> windows_core::HRESULT,
    pub SetType:
        unsafe extern "system" fn(*mut core::ffi::c_void, AnnotationType) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub Element: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Element: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetElement: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetElement: usize,
}
windows_core::imp::define_interface!(
    IAutomationAnnotationFactory,
    IAutomationAnnotationFactory_Vtbl,
    0x95f82773_eac5_572e_87de_24d9514b9a89
);
impl windows_core::RuntimeType for IAutomationAnnotationFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IAutomationAnnotationFactory {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IAutomationAnnotationFactory";
}
#[cfg(feature = "UI_Composition")]
pub trait IAutomationAnnotationFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(&self, r#type: AnnotationType) -> windows_core::Result<AutomationAnnotation>;
    fn CreateWithElementParameter(
        &self,
        r#type: AnnotationType,
        element: windows_core::Ref<'_, super::UIElement>,
    ) -> windows_core::Result<AutomationAnnotation>;
}
#[cfg(feature = "UI_Composition")]
impl IAutomationAnnotationFactory_Vtbl {
    pub const fn new<Identity: IAutomationAnnotationFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IAutomationAnnotationFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            r#type: AnnotationType,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationAnnotationFactory_Impl::CreateInstance(this, r#type) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateWithElementParameter<
            Identity: IAutomationAnnotationFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            r#type: AnnotationType,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationAnnotationFactory_Impl::CreateWithElementParameter(
                    this,
                    r#type,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IAutomationAnnotationFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
            CreateWithElementParameter: CreateWithElementParameter::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAutomationAnnotationFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutomationAnnotationFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        AnnotationType,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub CreateWithElementParameter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        AnnotationType,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateWithElementParameter: usize,
}
windows_core::imp::define_interface!(
    IAutomationAnnotationStatics,
    IAutomationAnnotationStatics_Vtbl,
    0xc5abdc1e_fc26_5444_a8b3_59b2c0a95578
);
impl windows_core::RuntimeType for IAutomationAnnotationStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAutomationAnnotationStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IAutomationAnnotationStatics";
}
pub trait IAutomationAnnotationStatics_Impl: windows_core::IUnknownImpl {
    fn TypeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn ElementProperty(&self) -> windows_core::Result<super::DependencyProperty>;
}
impl IAutomationAnnotationStatics_Vtbl {
    pub const fn new<Identity: IAutomationAnnotationStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn TypeProperty<
            Identity: IAutomationAnnotationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationAnnotationStatics_Impl::TypeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ElementProperty<
            Identity: IAutomationAnnotationStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationAnnotationStatics_Impl::ElementProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IAutomationAnnotationStatics,
                OFFSET,
            >(),
            TypeProperty: TypeProperty::<Identity, OFFSET>,
            ElementProperty: ElementProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAutomationAnnotationStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutomationAnnotationStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub TypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ElementProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IAutomationElementIdentifiers,
    IAutomationElementIdentifiers_Vtbl,
    0x2fb51a33_b0cf_5a4c_9ed3_267eca7aeefc
);
impl windows_core::RuntimeType for IAutomationElementIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAutomationElementIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IAutomationElementIdentifiers";
}
pub trait IAutomationElementIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IAutomationElementIdentifiers_Vtbl {
    pub const fn new<Identity: IAutomationElementIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IAutomationElementIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAutomationElementIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutomationElementIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IAutomationElementIdentifiersStatics,
    IAutomationElementIdentifiersStatics_Vtbl,
    0x72af6b8c_3e12_5e7a_a2ec_26dc193f9df9
);
impl windows_core::RuntimeType for IAutomationElementIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAutomationElementIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IAutomationElementIdentifiersStatics";
}
pub trait IAutomationElementIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn AcceleratorKeyProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn AccessKeyProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn AutomationIdProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn BoundingRectangleProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ClassNameProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ClickablePointProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ControlTypeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn HasKeyboardFocusProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn HelpTextProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsContentElementProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsControlElementProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsEnabledProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsKeyboardFocusableProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsOffscreenProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsPasswordProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsRequiredForFormProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ItemStatusProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ItemTypeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn LabeledByProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn LocalizedControlTypeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn NameProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn OrientationProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn LiveSettingProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ControlledPeersProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn PositionInSetProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn SizeOfSetProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn LevelProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn AnnotationsProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn LandmarkTypeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn LocalizedLandmarkTypeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsPeripheralProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsDataValidForFormProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn FullDescriptionProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn DescribedByProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn FlowsToProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn FlowsFromProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn CultureProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn HeadingLevelProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsDialogProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IAutomationElementIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IAutomationElementIdentifiersStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn AcceleratorKeyProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::AcceleratorKeyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AccessKeyProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::AccessKeyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AutomationIdProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::AutomationIdProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn BoundingRectangleProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::BoundingRectangleProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ClassNameProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::ClassNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ClickablePointProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::ClickablePointProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ControlTypeProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::ControlTypeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HasKeyboardFocusProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::HasKeyboardFocusProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HelpTextProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::HelpTextProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsContentElementProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::IsContentElementProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsControlElementProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::IsControlElementProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsEnabledProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::IsEnabledProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsKeyboardFocusableProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::IsKeyboardFocusableProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsOffscreenProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::IsOffscreenProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsPasswordProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::IsPasswordProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsRequiredForFormProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::IsRequiredForFormProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ItemStatusProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::ItemStatusProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ItemTypeProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::ItemTypeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LabeledByProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::LabeledByProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LocalizedControlTypeProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::LocalizedControlTypeProperty(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NameProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::NameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OrientationProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::OrientationProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LiveSettingProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::LiveSettingProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ControlledPeersProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::ControlledPeersProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PositionInSetProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::PositionInSetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SizeOfSetProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::SizeOfSetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LevelProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::LevelProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AnnotationsProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::AnnotationsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LandmarkTypeProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::LandmarkTypeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LocalizedLandmarkTypeProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::LocalizedLandmarkTypeProperty(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsPeripheralProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::IsPeripheralProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsDataValidForFormProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::IsDataValidForFormProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FullDescriptionProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::FullDescriptionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DescribedByProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::DescribedByProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FlowsToProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::FlowsToProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FlowsFromProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::FlowsFromProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CultureProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::CultureProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HeadingLevelProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::HeadingLevelProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsDialogProperty<
            Identity: IAutomationElementIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationElementIdentifiersStatics_Impl::IsDialogProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IAutomationElementIdentifiersStatics,
                OFFSET,
            >(),
            AcceleratorKeyProperty: AcceleratorKeyProperty::<Identity, OFFSET>,
            AccessKeyProperty: AccessKeyProperty::<Identity, OFFSET>,
            AutomationIdProperty: AutomationIdProperty::<Identity, OFFSET>,
            BoundingRectangleProperty: BoundingRectangleProperty::<Identity, OFFSET>,
            ClassNameProperty: ClassNameProperty::<Identity, OFFSET>,
            ClickablePointProperty: ClickablePointProperty::<Identity, OFFSET>,
            ControlTypeProperty: ControlTypeProperty::<Identity, OFFSET>,
            HasKeyboardFocusProperty: HasKeyboardFocusProperty::<Identity, OFFSET>,
            HelpTextProperty: HelpTextProperty::<Identity, OFFSET>,
            IsContentElementProperty: IsContentElementProperty::<Identity, OFFSET>,
            IsControlElementProperty: IsControlElementProperty::<Identity, OFFSET>,
            IsEnabledProperty: IsEnabledProperty::<Identity, OFFSET>,
            IsKeyboardFocusableProperty: IsKeyboardFocusableProperty::<Identity, OFFSET>,
            IsOffscreenProperty: IsOffscreenProperty::<Identity, OFFSET>,
            IsPasswordProperty: IsPasswordProperty::<Identity, OFFSET>,
            IsRequiredForFormProperty: IsRequiredForFormProperty::<Identity, OFFSET>,
            ItemStatusProperty: ItemStatusProperty::<Identity, OFFSET>,
            ItemTypeProperty: ItemTypeProperty::<Identity, OFFSET>,
            LabeledByProperty: LabeledByProperty::<Identity, OFFSET>,
            LocalizedControlTypeProperty: LocalizedControlTypeProperty::<Identity, OFFSET>,
            NameProperty: NameProperty::<Identity, OFFSET>,
            OrientationProperty: OrientationProperty::<Identity, OFFSET>,
            LiveSettingProperty: LiveSettingProperty::<Identity, OFFSET>,
            ControlledPeersProperty: ControlledPeersProperty::<Identity, OFFSET>,
            PositionInSetProperty: PositionInSetProperty::<Identity, OFFSET>,
            SizeOfSetProperty: SizeOfSetProperty::<Identity, OFFSET>,
            LevelProperty: LevelProperty::<Identity, OFFSET>,
            AnnotationsProperty: AnnotationsProperty::<Identity, OFFSET>,
            LandmarkTypeProperty: LandmarkTypeProperty::<Identity, OFFSET>,
            LocalizedLandmarkTypeProperty: LocalizedLandmarkTypeProperty::<Identity, OFFSET>,
            IsPeripheralProperty: IsPeripheralProperty::<Identity, OFFSET>,
            IsDataValidForFormProperty: IsDataValidForFormProperty::<Identity, OFFSET>,
            FullDescriptionProperty: FullDescriptionProperty::<Identity, OFFSET>,
            DescribedByProperty: DescribedByProperty::<Identity, OFFSET>,
            FlowsToProperty: FlowsToProperty::<Identity, OFFSET>,
            FlowsFromProperty: FlowsFromProperty::<Identity, OFFSET>,
            CultureProperty: CultureProperty::<Identity, OFFSET>,
            HeadingLevelProperty: HeadingLevelProperty::<Identity, OFFSET>,
            IsDialogProperty: IsDialogProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAutomationElementIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutomationElementIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AcceleratorKeyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AccessKeyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AutomationIdProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BoundingRectangleProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClassNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ClickablePointProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ControlTypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HasKeyboardFocusProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HelpTextProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsContentElementProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsControlElementProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsEnabledProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsKeyboardFocusableProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsOffscreenProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsPasswordProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsRequiredForFormProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ItemStatusProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ItemTypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LabeledByProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LocalizedControlTypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OrientationProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LiveSettingProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ControlledPeersProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PositionInSetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SizeOfSetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LevelProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AnnotationsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LandmarkTypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LocalizedLandmarkTypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsPeripheralProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsDataValidForFormProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FullDescriptionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DescribedByProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FlowsToProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FlowsFromProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CultureProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HeadingLevelProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsDialogProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IAutomationProperties,
    IAutomationProperties_Vtbl,
    0x525c6a71_dd8a_52a0_977b_db1b02f8e896
);
impl windows_core::RuntimeType for IAutomationProperties {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAutomationProperties {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IAutomationProperties";
}
pub trait IAutomationProperties_Impl: windows_core::IUnknownImpl {}
impl IAutomationProperties_Vtbl {
    pub const fn new<Identity: IAutomationProperties_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IAutomationProperties, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAutomationProperties as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutomationProperties_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IAutomationPropertiesStatics,
    IAutomationPropertiesStatics_Vtbl,
    0xb1e3e0f3_112f_5966_87dc_7862d4ad50e5
);
impl windows_core::RuntimeType for IAutomationPropertiesStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers"))]
impl windows_core::RuntimeName for IAutomationPropertiesStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IAutomationPropertiesStatics";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers"))]
pub trait IAutomationPropertiesStatics_Impl: windows_core::IUnknownImpl {
    fn AcceleratorKeyProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetAcceleratorKey(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetAcceleratorKey(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn AccessKeyProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetAccessKey(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetAccessKey(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn AutomationIdProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetAutomationId(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetAutomationId(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn HelpTextProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetHelpText(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetHelpText(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn IsRequiredForFormProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetIsRequiredForForm(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsRequiredForForm(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn ItemStatusProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetItemStatus(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetItemStatus(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn ItemTypeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetItemType(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetItemType(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn LabeledByProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetLabeledBy(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<super::UIElement>;
    fn SetLabeledBy(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: windows_core::Ref<'_, super::UIElement>,
    ) -> windows_core::Result<()>;
    fn NameProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetName(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetName(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn LiveSettingProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetLiveSetting(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<Peers::AutomationLiveSetting>;
    fn SetLiveSetting(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: Peers::AutomationLiveSetting,
    ) -> windows_core::Result<()>;
    fn AccessibilityViewProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetAccessibilityView(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<Peers::AccessibilityView>;
    fn SetAccessibilityView(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: Peers::AccessibilityView,
    ) -> windows_core::Result<()>;
    fn ControlledPeersProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetControlledPeers(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_collections::IVector<super::UIElement>>;
    fn PositionInSetProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetPositionInSet(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<i32>;
    fn SetPositionInSet(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: i32,
    ) -> windows_core::Result<()>;
    fn SizeOfSetProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetSizeOfSet(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<i32>;
    fn SetSizeOfSet(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: i32,
    ) -> windows_core::Result<()>;
    fn LevelProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetLevel(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<i32>;
    fn SetLevel(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: i32,
    ) -> windows_core::Result<()>;
    fn AnnotationsProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetAnnotations(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_collections::IVector<AutomationAnnotation>>;
    fn LandmarkTypeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetLandmarkType(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<Peers::AutomationLandmarkType>;
    fn SetLandmarkType(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: Peers::AutomationLandmarkType,
    ) -> windows_core::Result<()>;
    fn LocalizedLandmarkTypeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetLocalizedLandmarkType(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetLocalizedLandmarkType(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn IsPeripheralProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetIsPeripheral(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsPeripheral(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn IsDataValidForFormProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetIsDataValidForForm(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsDataValidForForm(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
    fn FullDescriptionProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetFullDescription(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetFullDescription(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn LocalizedControlTypeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetLocalizedControlType(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn SetLocalizedControlType(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn DescribedByProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetDescribedBy(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_collections::IVector<super::DependencyObject>>;
    fn FlowsToProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetFlowsTo(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_collections::IVector<super::DependencyObject>>;
    fn FlowsFromProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetFlowsFrom(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<windows_collections::IVector<super::DependencyObject>>;
    fn CultureProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetCulture(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<i32>;
    fn SetCulture(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: i32,
    ) -> windows_core::Result<()>;
    fn HeadingLevelProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetHeadingLevel(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<Peers::AutomationHeadingLevel>;
    fn SetHeadingLevel(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: Peers::AutomationHeadingLevel,
    ) -> windows_core::Result<()>;
    fn IsDialogProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetIsDialog(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
    ) -> windows_core::Result<bool>;
    fn SetIsDialog(
        &self,
        element: windows_core::Ref<'_, super::DependencyObject>,
        value: bool,
    ) -> windows_core::Result<()>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers"))]
impl IAutomationPropertiesStatics_Vtbl {
    pub const fn new<Identity: IAutomationPropertiesStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AcceleratorKeyProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::AcceleratorKeyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAcceleratorKey<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetAcceleratorKey(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAcceleratorKey<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetAcceleratorKey(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn AccessKeyProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::AccessKeyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAccessKey<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetAccessKey(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAccessKey<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetAccessKey(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn AutomationIdProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::AutomationIdProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAutomationId<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetAutomationId(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAutomationId<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetAutomationId(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn HelpTextProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::HelpTextProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetHelpText<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetHelpText(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHelpText<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetHelpText(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn IsRequiredForFormProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::IsRequiredForFormProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetIsRequiredForForm<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetIsRequiredForForm(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsRequiredForForm<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetIsRequiredForForm(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn ItemStatusProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::ItemStatusProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetItemStatus<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetItemStatus(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetItemStatus<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetItemStatus(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ItemTypeProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::ItemTypeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetItemType<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetItemType(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetItemType<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetItemType(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn LabeledByProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::LabeledByProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetLabeledBy<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetLabeledBy(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLabeledBy<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetLabeledBy(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn NameProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::NameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetName<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetName(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetName<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetName(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn LiveSettingProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::LiveSettingProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetLiveSetting<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut Peers::AutomationLiveSetting,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetLiveSetting(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLiveSetting<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: Peers::AutomationLiveSetting,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetLiveSetting(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn AccessibilityViewProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::AccessibilityViewProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAccessibilityView<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut Peers::AccessibilityView,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetAccessibilityView(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAccessibilityView<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: Peers::AccessibilityView,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetAccessibilityView(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn ControlledPeersProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::ControlledPeersProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetControlledPeers<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetControlledPeers(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PositionInSetProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::PositionInSetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetPositionInSet<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetPositionInSet(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPositionInSet<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetPositionInSet(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn SizeOfSetProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::SizeOfSetProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetSizeOfSet<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetSizeOfSet(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetSizeOfSet<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetSizeOfSet(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn LevelProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::LevelProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetLevel<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetLevel(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLevel<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetLevel(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn AnnotationsProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::AnnotationsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAnnotations<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetAnnotations(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LandmarkTypeProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::LandmarkTypeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetLandmarkType<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut Peers::AutomationLandmarkType,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetLandmarkType(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLandmarkType<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: Peers::AutomationLandmarkType,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetLandmarkType(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn LocalizedLandmarkTypeProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::LocalizedLandmarkTypeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetLocalizedLandmarkType<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetLocalizedLandmarkType(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLocalizedLandmarkType<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetLocalizedLandmarkType(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn IsPeripheralProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::IsPeripheralProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetIsPeripheral<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetIsPeripheral(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsPeripheral<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetIsPeripheral(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn IsDataValidForFormProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::IsDataValidForFormProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetIsDataValidForForm<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetIsDataValidForForm(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsDataValidForForm<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetIsDataValidForForm(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn FullDescriptionProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::FullDescriptionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetFullDescription<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetFullDescription(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetFullDescription<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetFullDescription(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn LocalizedControlTypeProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::LocalizedControlTypeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetLocalizedControlType<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetLocalizedControlType(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLocalizedControlType<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetLocalizedControlType(
                    this,
                    core::mem::transmute_copy(&element),
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn DescribedByProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::DescribedByProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetDescribedBy<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetDescribedBy(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FlowsToProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::FlowsToProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetFlowsTo<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetFlowsTo(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FlowsFromProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::FlowsFromProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetFlowsFrom<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetFlowsFrom(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CultureProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::CultureProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetCulture<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetCulture(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetCulture<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: i32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetCulture(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn HeadingLevelProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::HeadingLevelProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetHeadingLevel<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut Peers::AutomationHeadingLevel,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetHeadingLevel(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHeadingLevel<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: Peers::AutomationHeadingLevel,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetHeadingLevel(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        unsafe extern "system" fn IsDialogProperty<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::IsDialogProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetIsDialog<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics_Impl::GetIsDialog(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsDialog<
            Identity: IAutomationPropertiesStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics_Impl::SetIsDialog(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IAutomationPropertiesStatics,
                OFFSET,
            >(),
            AcceleratorKeyProperty: AcceleratorKeyProperty::<Identity, OFFSET>,
            GetAcceleratorKey: GetAcceleratorKey::<Identity, OFFSET>,
            SetAcceleratorKey: SetAcceleratorKey::<Identity, OFFSET>,
            AccessKeyProperty: AccessKeyProperty::<Identity, OFFSET>,
            GetAccessKey: GetAccessKey::<Identity, OFFSET>,
            SetAccessKey: SetAccessKey::<Identity, OFFSET>,
            AutomationIdProperty: AutomationIdProperty::<Identity, OFFSET>,
            GetAutomationId: GetAutomationId::<Identity, OFFSET>,
            SetAutomationId: SetAutomationId::<Identity, OFFSET>,
            HelpTextProperty: HelpTextProperty::<Identity, OFFSET>,
            GetHelpText: GetHelpText::<Identity, OFFSET>,
            SetHelpText: SetHelpText::<Identity, OFFSET>,
            IsRequiredForFormProperty: IsRequiredForFormProperty::<Identity, OFFSET>,
            GetIsRequiredForForm: GetIsRequiredForForm::<Identity, OFFSET>,
            SetIsRequiredForForm: SetIsRequiredForForm::<Identity, OFFSET>,
            ItemStatusProperty: ItemStatusProperty::<Identity, OFFSET>,
            GetItemStatus: GetItemStatus::<Identity, OFFSET>,
            SetItemStatus: SetItemStatus::<Identity, OFFSET>,
            ItemTypeProperty: ItemTypeProperty::<Identity, OFFSET>,
            GetItemType: GetItemType::<Identity, OFFSET>,
            SetItemType: SetItemType::<Identity, OFFSET>,
            LabeledByProperty: LabeledByProperty::<Identity, OFFSET>,
            GetLabeledBy: GetLabeledBy::<Identity, OFFSET>,
            SetLabeledBy: SetLabeledBy::<Identity, OFFSET>,
            NameProperty: NameProperty::<Identity, OFFSET>,
            GetName: GetName::<Identity, OFFSET>,
            SetName: SetName::<Identity, OFFSET>,
            LiveSettingProperty: LiveSettingProperty::<Identity, OFFSET>,
            GetLiveSetting: GetLiveSetting::<Identity, OFFSET>,
            SetLiveSetting: SetLiveSetting::<Identity, OFFSET>,
            AccessibilityViewProperty: AccessibilityViewProperty::<Identity, OFFSET>,
            GetAccessibilityView: GetAccessibilityView::<Identity, OFFSET>,
            SetAccessibilityView: SetAccessibilityView::<Identity, OFFSET>,
            ControlledPeersProperty: ControlledPeersProperty::<Identity, OFFSET>,
            GetControlledPeers: GetControlledPeers::<Identity, OFFSET>,
            PositionInSetProperty: PositionInSetProperty::<Identity, OFFSET>,
            GetPositionInSet: GetPositionInSet::<Identity, OFFSET>,
            SetPositionInSet: SetPositionInSet::<Identity, OFFSET>,
            SizeOfSetProperty: SizeOfSetProperty::<Identity, OFFSET>,
            GetSizeOfSet: GetSizeOfSet::<Identity, OFFSET>,
            SetSizeOfSet: SetSizeOfSet::<Identity, OFFSET>,
            LevelProperty: LevelProperty::<Identity, OFFSET>,
            GetLevel: GetLevel::<Identity, OFFSET>,
            SetLevel: SetLevel::<Identity, OFFSET>,
            AnnotationsProperty: AnnotationsProperty::<Identity, OFFSET>,
            GetAnnotations: GetAnnotations::<Identity, OFFSET>,
            LandmarkTypeProperty: LandmarkTypeProperty::<Identity, OFFSET>,
            GetLandmarkType: GetLandmarkType::<Identity, OFFSET>,
            SetLandmarkType: SetLandmarkType::<Identity, OFFSET>,
            LocalizedLandmarkTypeProperty: LocalizedLandmarkTypeProperty::<Identity, OFFSET>,
            GetLocalizedLandmarkType: GetLocalizedLandmarkType::<Identity, OFFSET>,
            SetLocalizedLandmarkType: SetLocalizedLandmarkType::<Identity, OFFSET>,
            IsPeripheralProperty: IsPeripheralProperty::<Identity, OFFSET>,
            GetIsPeripheral: GetIsPeripheral::<Identity, OFFSET>,
            SetIsPeripheral: SetIsPeripheral::<Identity, OFFSET>,
            IsDataValidForFormProperty: IsDataValidForFormProperty::<Identity, OFFSET>,
            GetIsDataValidForForm: GetIsDataValidForForm::<Identity, OFFSET>,
            SetIsDataValidForForm: SetIsDataValidForForm::<Identity, OFFSET>,
            FullDescriptionProperty: FullDescriptionProperty::<Identity, OFFSET>,
            GetFullDescription: GetFullDescription::<Identity, OFFSET>,
            SetFullDescription: SetFullDescription::<Identity, OFFSET>,
            LocalizedControlTypeProperty: LocalizedControlTypeProperty::<Identity, OFFSET>,
            GetLocalizedControlType: GetLocalizedControlType::<Identity, OFFSET>,
            SetLocalizedControlType: SetLocalizedControlType::<Identity, OFFSET>,
            DescribedByProperty: DescribedByProperty::<Identity, OFFSET>,
            GetDescribedBy: GetDescribedBy::<Identity, OFFSET>,
            FlowsToProperty: FlowsToProperty::<Identity, OFFSET>,
            GetFlowsTo: GetFlowsTo::<Identity, OFFSET>,
            FlowsFromProperty: FlowsFromProperty::<Identity, OFFSET>,
            GetFlowsFrom: GetFlowsFrom::<Identity, OFFSET>,
            CultureProperty: CultureProperty::<Identity, OFFSET>,
            GetCulture: GetCulture::<Identity, OFFSET>,
            SetCulture: SetCulture::<Identity, OFFSET>,
            HeadingLevelProperty: HeadingLevelProperty::<Identity, OFFSET>,
            GetHeadingLevel: GetHeadingLevel::<Identity, OFFSET>,
            SetHeadingLevel: SetHeadingLevel::<Identity, OFFSET>,
            IsDialogProperty: IsDialogProperty::<Identity, OFFSET>,
            GetIsDialog: GetIsDialog::<Identity, OFFSET>,
            SetIsDialog: SetIsDialog::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAutomationPropertiesStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutomationPropertiesStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AcceleratorKeyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetAcceleratorKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetAcceleratorKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AccessKeyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetAccessKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetAccessKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AutomationIdProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetAutomationId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetAutomationId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HelpTextProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetHelpText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetHelpText: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsRequiredForFormProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetIsRequiredForForm: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsRequiredForForm: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub ItemStatusProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetItemStatus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetItemStatus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ItemTypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetItemType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetItemType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LabeledByProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub GetLabeledBy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetLabeledBy: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetLabeledBy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetLabeledBy: usize,
    pub NameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LiveSettingProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub GetLiveSetting: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut Peers::AutomationLiveSetting,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Peers"))]
    GetLiveSetting: usize,
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub SetLiveSetting: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        Peers::AutomationLiveSetting,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Peers"))]
    SetLiveSetting: usize,
    pub AccessibilityViewProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub GetAccessibilityView: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut Peers::AccessibilityView,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Peers"))]
    GetAccessibilityView: usize,
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub SetAccessibilityView: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        Peers::AccessibilityView,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Peers"))]
    SetAccessibilityView: usize,
    pub ControlledPeersProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub GetControlledPeers: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetControlledPeers: usize,
    pub PositionInSetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetPositionInSet: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub SetPositionInSet: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    pub SizeOfSetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetSizeOfSet: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub SetSizeOfSet: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    pub LevelProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetLevel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub SetLevel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    pub AnnotationsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetAnnotations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LandmarkTypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub GetLandmarkType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut Peers::AutomationLandmarkType,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Peers"))]
    GetLandmarkType: usize,
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub SetLandmarkType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        Peers::AutomationLandmarkType,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Peers"))]
    SetLandmarkType: usize,
    pub LocalizedLandmarkTypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetLocalizedLandmarkType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetLocalizedLandmarkType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsPeripheralProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetIsPeripheral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsPeripheral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub IsDataValidForFormProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetIsDataValidForForm: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsDataValidForForm: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
    pub FullDescriptionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetFullDescription: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetFullDescription: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LocalizedControlTypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetLocalizedControlType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetLocalizedControlType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DescribedByProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetDescribedBy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FlowsToProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetFlowsTo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FlowsFromProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetFlowsFrom: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CultureProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetCulture: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
    pub SetCulture: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i32,
    ) -> windows_core::HRESULT,
    pub HeadingLevelProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub GetHeadingLevel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut Peers::AutomationHeadingLevel,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Peers"))]
    GetHeadingLevel: usize,
    #[cfg(feature = "UI_Xaml_Automation_Peers")]
    pub SetHeadingLevel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        Peers::AutomationHeadingLevel,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Automation_Peers"))]
    SetHeadingLevel: usize,
    pub IsDialogProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetIsDialog: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut bool,
    ) -> windows_core::HRESULT,
    pub SetIsDialog: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        bool,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IAutomationPropertiesStatics2,
    IAutomationPropertiesStatics2_Vtbl,
    0xd933a3ed_e90a_5df0_853d_cad17a0b9ec8
);
impl windows_core::RuntimeType for IAutomationPropertiesStatics2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers"))]
impl windows_core::RuntimeName for IAutomationPropertiesStatics2 {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IAutomationPropertiesStatics2";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers"))]
pub trait IAutomationPropertiesStatics2_Impl: windows_core::IUnknownImpl {
    fn AutomationControlTypeProperty(&self) -> windows_core::Result<super::DependencyProperty>;
    fn GetAutomationControlType(
        &self,
        element: windows_core::Ref<'_, super::UIElement>,
    ) -> windows_core::Result<Peers::AutomationControlType>;
    fn SetAutomationControlType(
        &self,
        element: windows_core::Ref<'_, super::UIElement>,
        value: Peers::AutomationControlType,
    ) -> windows_core::Result<()>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers"))]
impl IAutomationPropertiesStatics2_Vtbl {
    pub const fn new<Identity: IAutomationPropertiesStatics2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AutomationControlTypeProperty<
            Identity: IAutomationPropertiesStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics2_Impl::AutomationControlTypeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAutomationControlType<
            Identity: IAutomationPropertiesStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            result__: *mut Peers::AutomationControlType,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IAutomationPropertiesStatics2_Impl::GetAutomationControlType(
                    this,
                    core::mem::transmute_copy(&element),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAutomationControlType<
            Identity: IAutomationPropertiesStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            element: *mut core::ffi::c_void,
            value: Peers::AutomationControlType,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IAutomationPropertiesStatics2_Impl::SetAutomationControlType(
                    this,
                    core::mem::transmute_copy(&element),
                    value,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IAutomationPropertiesStatics2,
                OFFSET,
            >(),
            AutomationControlTypeProperty: AutomationControlTypeProperty::<Identity, OFFSET>,
            GetAutomationControlType: GetAutomationControlType::<Identity, OFFSET>,
            SetAutomationControlType: SetAutomationControlType::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAutomationPropertiesStatics2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutomationPropertiesStatics2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AutomationControlTypeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers"))]
    pub GetAutomationControlType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut Peers::AutomationControlType,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers")))]
    GetAutomationControlType: usize,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers"))]
    pub SetAutomationControlType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        Peers::AutomationControlType,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Xaml_Automation_Peers")))]
    SetAutomationControlType: usize,
}
windows_core::imp::define_interface!(
    IAutomationProperty,
    IAutomationProperty_Vtbl,
    0x5ca6b2c8_ff86_5a41_aa18_6948fae592cf
);
impl windows_core::RuntimeType for IAutomationProperty {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IAutomationProperty {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IAutomationProperty";
}
pub trait IAutomationProperty_Impl: windows_core::IUnknownImpl {}
impl IAutomationProperty_Vtbl {
    pub const fn new<Identity: IAutomationProperty_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IAutomationProperty, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IAutomationProperty as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutomationProperty_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDockPatternIdentifiers,
    IDockPatternIdentifiers_Vtbl,
    0x75574f99_d145_547e_972b_7d879f93c03e
);
impl windows_core::RuntimeType for IDockPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDockPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IDockPatternIdentifiers";
}
pub trait IDockPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IDockPatternIdentifiers_Vtbl {
    pub const fn new<Identity: IDockPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDockPatternIdentifiers, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDockPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDockPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDockPatternIdentifiersStatics,
    IDockPatternIdentifiersStatics_Vtbl,
    0x02d5a72c_f49d_53a9_b9fb_af2719d16ccf
);
impl windows_core::RuntimeType for IDockPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDockPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IDockPatternIdentifiersStatics";
}
pub trait IDockPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn DockPositionProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IDockPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IDockPatternIdentifiersStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DockPositionProperty<
            Identity: IDockPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDockPatternIdentifiersStatics_Impl::DockPositionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDockPatternIdentifiersStatics,
                OFFSET,
            >(),
            DockPositionProperty: DockPositionProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDockPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDockPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DockPositionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDragPatternIdentifiers,
    IDragPatternIdentifiers_Vtbl,
    0xaa2fdfd5_fb45_5d2b_8d92_a8e7b07061c2
);
impl windows_core::RuntimeType for IDragPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDragPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IDragPatternIdentifiers";
}
pub trait IDragPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IDragPatternIdentifiers_Vtbl {
    pub const fn new<Identity: IDragPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDragPatternIdentifiers, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDragPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDragPatternIdentifiersStatics,
    IDragPatternIdentifiersStatics_Vtbl,
    0x482eee70_0bfc_5552_9e7d_8dffc526b2f7
);
impl windows_core::RuntimeType for IDragPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDragPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IDragPatternIdentifiersStatics";
}
pub trait IDragPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn DropEffectProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn DropEffectsProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn GrabbedItemsProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsGrabbedProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IDragPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IDragPatternIdentifiersStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DropEffectProperty<
            Identity: IDragPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragPatternIdentifiersStatics_Impl::DropEffectProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DropEffectsProperty<
            Identity: IDragPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragPatternIdentifiersStatics_Impl::DropEffectsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GrabbedItemsProperty<
            Identity: IDragPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragPatternIdentifiersStatics_Impl::GrabbedItemsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsGrabbedProperty<
            Identity: IDragPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDragPatternIdentifiersStatics_Impl::IsGrabbedProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDragPatternIdentifiersStatics,
                OFFSET,
            >(),
            DropEffectProperty: DropEffectProperty::<Identity, OFFSET>,
            DropEffectsProperty: DropEffectsProperty::<Identity, OFFSET>,
            GrabbedItemsProperty: GrabbedItemsProperty::<Identity, OFFSET>,
            IsGrabbedProperty: IsGrabbedProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDragPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DropEffectProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DropEffectsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GrabbedItemsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsGrabbedProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDropTargetPatternIdentifiers,
    IDropTargetPatternIdentifiers_Vtbl,
    0x133e8ff3_1ddd_5cbb_b908_1484d7c04da7
);
impl windows_core::RuntimeType for IDropTargetPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDropTargetPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IDropTargetPatternIdentifiers";
}
pub trait IDropTargetPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IDropTargetPatternIdentifiers_Vtbl {
    pub const fn new<Identity: IDropTargetPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDropTargetPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDropTargetPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropTargetPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDropTargetPatternIdentifiersStatics,
    IDropTargetPatternIdentifiersStatics_Vtbl,
    0x6da6f0bd_b942_5283_be35_501ae87f88c7
);
impl windows_core::RuntimeType for IDropTargetPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDropTargetPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IDropTargetPatternIdentifiersStatics";
}
pub trait IDropTargetPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn DropTargetEffectProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn DropTargetEffectsProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IDropTargetPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IDropTargetPatternIdentifiersStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn DropTargetEffectProperty<
            Identity: IDropTargetPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropTargetPatternIdentifiersStatics_Impl::DropTargetEffectProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DropTargetEffectsProperty<
            Identity: IDropTargetPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDropTargetPatternIdentifiersStatics_Impl::DropTargetEffectsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDropTargetPatternIdentifiersStatics,
                OFFSET,
            >(),
            DropTargetEffectProperty: DropTargetEffectProperty::<Identity, OFFSET>,
            DropTargetEffectsProperty: DropTargetEffectsProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDropTargetPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropTargetPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DropTargetEffectProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DropTargetEffectsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IExpandCollapsePatternIdentifiers,
    IExpandCollapsePatternIdentifiers_Vtbl,
    0xcec15d9f_8630_569a_86a0_524bbea618ff
);
impl windows_core::RuntimeType for IExpandCollapsePatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IExpandCollapsePatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IExpandCollapsePatternIdentifiers";
}
pub trait IExpandCollapsePatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IExpandCollapsePatternIdentifiers_Vtbl {
    pub const fn new<Identity: IExpandCollapsePatternIdentifiers_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IExpandCollapsePatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IExpandCollapsePatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IExpandCollapsePatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IExpandCollapsePatternIdentifiersStatics,
    IExpandCollapsePatternIdentifiersStatics_Vtbl,
    0x283101f4_c40c_55bf_a23b_d62b73b6aa35
);
impl windows_core::RuntimeType for IExpandCollapsePatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IExpandCollapsePatternIdentifiersStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Automation.IExpandCollapsePatternIdentifiersStatics";
}
pub trait IExpandCollapsePatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn ExpandCollapseStateProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IExpandCollapsePatternIdentifiersStatics_Vtbl {
    pub const fn new<
        Identity: IExpandCollapsePatternIdentifiersStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn ExpandCollapseStateProperty<
            Identity: IExpandCollapsePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IExpandCollapsePatternIdentifiersStatics_Impl::ExpandCollapseStateProperty(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IExpandCollapsePatternIdentifiersStatics,
                OFFSET,
            >(),
            ExpandCollapseStateProperty: ExpandCollapseStateProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IExpandCollapsePatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IExpandCollapsePatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ExpandCollapseStateProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IGridItemPatternIdentifiers,
    IGridItemPatternIdentifiers_Vtbl,
    0x93609087_1114_557d_b17b_f801e41cebbb
);
impl windows_core::RuntimeType for IGridItemPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IGridItemPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IGridItemPatternIdentifiers";
}
pub trait IGridItemPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IGridItemPatternIdentifiers_Vtbl {
    pub const fn new<Identity: IGridItemPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IGridItemPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGridItemPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridItemPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IGridItemPatternIdentifiersStatics,
    IGridItemPatternIdentifiersStatics_Vtbl,
    0x8072bc18_87d0_5a02_a0a1_f9aec968c0e7
);
impl windows_core::RuntimeType for IGridItemPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IGridItemPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IGridItemPatternIdentifiersStatics";
}
pub trait IGridItemPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn ColumnProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ColumnSpanProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ContainingGridProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn RowProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn RowSpanProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IGridItemPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IGridItemPatternIdentifiersStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn ColumnProperty<
            Identity: IGridItemPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridItemPatternIdentifiersStatics_Impl::ColumnProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ColumnSpanProperty<
            Identity: IGridItemPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridItemPatternIdentifiersStatics_Impl::ColumnSpanProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ContainingGridProperty<
            Identity: IGridItemPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridItemPatternIdentifiersStatics_Impl::ContainingGridProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RowProperty<
            Identity: IGridItemPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridItemPatternIdentifiersStatics_Impl::RowProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RowSpanProperty<
            Identity: IGridItemPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridItemPatternIdentifiersStatics_Impl::RowSpanProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IGridItemPatternIdentifiersStatics,
                OFFSET,
            >(),
            ColumnProperty: ColumnProperty::<Identity, OFFSET>,
            ColumnSpanProperty: ColumnSpanProperty::<Identity, OFFSET>,
            ContainingGridProperty: ContainingGridProperty::<Identity, OFFSET>,
            RowProperty: RowProperty::<Identity, OFFSET>,
            RowSpanProperty: RowSpanProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGridItemPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridItemPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ColumnProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ColumnSpanProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ContainingGridProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RowProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RowSpanProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IGridPatternIdentifiers,
    IGridPatternIdentifiers_Vtbl,
    0xe5e1e250_c37c_54a2_8c61_1d9ccd3bb39c
);
impl windows_core::RuntimeType for IGridPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IGridPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IGridPatternIdentifiers";
}
pub trait IGridPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IGridPatternIdentifiers_Vtbl {
    pub const fn new<Identity: IGridPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IGridPatternIdentifiers, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGridPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IGridPatternIdentifiersStatics,
    IGridPatternIdentifiersStatics_Vtbl,
    0xe861604c_101f_5a6d_a308_3714f510f744
);
impl windows_core::RuntimeType for IGridPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IGridPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IGridPatternIdentifiersStatics";
}
pub trait IGridPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn ColumnCountProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn RowCountProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IGridPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IGridPatternIdentifiersStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ColumnCountProperty<
            Identity: IGridPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridPatternIdentifiersStatics_Impl::ColumnCountProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RowCountProperty<
            Identity: IGridPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IGridPatternIdentifiersStatics_Impl::RowCountProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IGridPatternIdentifiersStatics,
                OFFSET,
            >(),
            ColumnCountProperty: ColumnCountProperty::<Identity, OFFSET>,
            RowCountProperty: RowCountProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IGridPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ColumnCountProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RowCountProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IMultipleViewPatternIdentifiers,
    IMultipleViewPatternIdentifiers_Vtbl,
    0x70e4c847_2b82_5ecf_b808_e9d453c1fe53
);
impl windows_core::RuntimeType for IMultipleViewPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IMultipleViewPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IMultipleViewPatternIdentifiers";
}
pub trait IMultipleViewPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IMultipleViewPatternIdentifiers_Vtbl {
    pub const fn new<Identity: IMultipleViewPatternIdentifiers_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IMultipleViewPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IMultipleViewPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMultipleViewPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IMultipleViewPatternIdentifiersStatics,
    IMultipleViewPatternIdentifiersStatics_Vtbl,
    0xac71daef_d094_5c90_94af_1fa474ab45fe
);
impl windows_core::RuntimeType for IMultipleViewPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IMultipleViewPatternIdentifiersStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Automation.IMultipleViewPatternIdentifiersStatics";
}
pub trait IMultipleViewPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn CurrentViewProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn SupportedViewsProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IMultipleViewPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IMultipleViewPatternIdentifiersStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn CurrentViewProperty<
            Identity: IMultipleViewPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMultipleViewPatternIdentifiersStatics_Impl::CurrentViewProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SupportedViewsProperty<
            Identity: IMultipleViewPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IMultipleViewPatternIdentifiersStatics_Impl::SupportedViewsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IMultipleViewPatternIdentifiersStatics,
                OFFSET,
            >(),
            CurrentViewProperty: CurrentViewProperty::<Identity, OFFSET>,
            SupportedViewsProperty: SupportedViewsProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IMultipleViewPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IMultipleViewPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CurrentViewProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SupportedViewsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IRangeValuePatternIdentifiers,
    IRangeValuePatternIdentifiers_Vtbl,
    0xc114db37_6a75_5ef1_a542_d3b13f92cbfe
);
impl windows_core::RuntimeType for IRangeValuePatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRangeValuePatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IRangeValuePatternIdentifiers";
}
pub trait IRangeValuePatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IRangeValuePatternIdentifiers_Vtbl {
    pub const fn new<Identity: IRangeValuePatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IRangeValuePatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRangeValuePatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRangeValuePatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IRangeValuePatternIdentifiersStatics,
    IRangeValuePatternIdentifiersStatics_Vtbl,
    0x0aaa9ad7_f9b8_52a1_bc96_2a97fe389ed0
);
impl windows_core::RuntimeType for IRangeValuePatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IRangeValuePatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IRangeValuePatternIdentifiersStatics";
}
pub trait IRangeValuePatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn IsReadOnlyProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn LargeChangeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn MaximumProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn MinimumProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn SmallChangeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ValueProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IRangeValuePatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IRangeValuePatternIdentifiersStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn IsReadOnlyProperty<
            Identity: IRangeValuePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValuePatternIdentifiersStatics_Impl::IsReadOnlyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LargeChangeProperty<
            Identity: IRangeValuePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValuePatternIdentifiersStatics_Impl::LargeChangeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MaximumProperty<
            Identity: IRangeValuePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValuePatternIdentifiersStatics_Impl::MaximumProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MinimumProperty<
            Identity: IRangeValuePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValuePatternIdentifiersStatics_Impl::MinimumProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SmallChangeProperty<
            Identity: IRangeValuePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValuePatternIdentifiersStatics_Impl::SmallChangeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ValueProperty<
            Identity: IRangeValuePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IRangeValuePatternIdentifiersStatics_Impl::ValueProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IRangeValuePatternIdentifiersStatics,
                OFFSET,
            >(),
            IsReadOnlyProperty: IsReadOnlyProperty::<Identity, OFFSET>,
            LargeChangeProperty: LargeChangeProperty::<Identity, OFFSET>,
            MaximumProperty: MaximumProperty::<Identity, OFFSET>,
            MinimumProperty: MinimumProperty::<Identity, OFFSET>,
            SmallChangeProperty: SmallChangeProperty::<Identity, OFFSET>,
            ValueProperty: ValueProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IRangeValuePatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IRangeValuePatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsReadOnlyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LargeChangeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub MaximumProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub MinimumProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SmallChangeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ValueProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IScrollPatternIdentifiers,
    IScrollPatternIdentifiers_Vtbl,
    0x04f1a4b8_edc7_55f2_96df_a9c7e809372e
);
impl windows_core::RuntimeType for IScrollPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IScrollPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IScrollPatternIdentifiers";
}
pub trait IScrollPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IScrollPatternIdentifiers_Vtbl {
    pub const fn new<Identity: IScrollPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IScrollPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScrollPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IScrollPatternIdentifiersStatics,
    IScrollPatternIdentifiersStatics_Vtbl,
    0x0f94f2f0_e0d2_5a24_b415_8d1506ce47aa
);
impl windows_core::RuntimeType for IScrollPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IScrollPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IScrollPatternIdentifiersStatics";
}
pub trait IScrollPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn HorizontallyScrollableProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn HorizontalScrollPercentProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn HorizontalViewSizeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn NoScroll(&self) -> windows_core::Result<f64>;
    fn VerticallyScrollableProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn VerticalScrollPercentProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn VerticalViewSizeProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IScrollPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IScrollPatternIdentifiersStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn HorizontallyScrollableProperty<
            Identity: IScrollPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollPatternIdentifiersStatics_Impl::HorizontallyScrollableProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HorizontalScrollPercentProperty<
            Identity: IScrollPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollPatternIdentifiersStatics_Impl::HorizontalScrollPercentProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HorizontalViewSizeProperty<
            Identity: IScrollPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollPatternIdentifiersStatics_Impl::HorizontalViewSizeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NoScroll<
            Identity: IScrollPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollPatternIdentifiersStatics_Impl::NoScroll(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn VerticallyScrollableProperty<
            Identity: IScrollPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollPatternIdentifiersStatics_Impl::VerticallyScrollableProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn VerticalScrollPercentProperty<
            Identity: IScrollPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollPatternIdentifiersStatics_Impl::VerticalScrollPercentProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn VerticalViewSizeProperty<
            Identity: IScrollPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IScrollPatternIdentifiersStatics_Impl::VerticalViewSizeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IScrollPatternIdentifiersStatics,
                OFFSET,
            >(),
            HorizontallyScrollableProperty: HorizontallyScrollableProperty::<Identity, OFFSET>,
            HorizontalScrollPercentProperty: HorizontalScrollPercentProperty::<Identity, OFFSET>,
            HorizontalViewSizeProperty: HorizontalViewSizeProperty::<Identity, OFFSET>,
            NoScroll: NoScroll::<Identity, OFFSET>,
            VerticallyScrollableProperty: VerticallyScrollableProperty::<Identity, OFFSET>,
            VerticalScrollPercentProperty: VerticalScrollPercentProperty::<Identity, OFFSET>,
            VerticalViewSizeProperty: VerticalViewSizeProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IScrollPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IScrollPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub HorizontallyScrollableProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HorizontalScrollPercentProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HorizontalViewSizeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NoScroll:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub VerticallyScrollableProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub VerticalScrollPercentProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub VerticalViewSizeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISelectionItemPatternIdentifiers,
    ISelectionItemPatternIdentifiers_Vtbl,
    0xce3a549d_a2cb_594d_a2a4_44778c09cca5
);
impl windows_core::RuntimeType for ISelectionItemPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISelectionItemPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ISelectionItemPatternIdentifiers";
}
pub trait ISelectionItemPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl ISelectionItemPatternIdentifiers_Vtbl {
    pub const fn new<Identity: ISelectionItemPatternIdentifiers_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISelectionItemPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISelectionItemPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISelectionItemPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISelectionItemPatternIdentifiersStatics,
    ISelectionItemPatternIdentifiersStatics_Vtbl,
    0x2b8ead7c_4e03_5b84_9e34_8b7384cbd862
);
impl windows_core::RuntimeType for ISelectionItemPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISelectionItemPatternIdentifiersStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Automation.ISelectionItemPatternIdentifiersStatics";
}
pub trait ISelectionItemPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn IsSelectedProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn SelectionContainerProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl ISelectionItemPatternIdentifiersStatics_Vtbl {
    pub const fn new<
        Identity: ISelectionItemPatternIdentifiersStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn IsSelectedProperty<
            Identity: ISelectionItemPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionItemPatternIdentifiersStatics_Impl::IsSelectedProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SelectionContainerProperty<
            Identity: ISelectionItemPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionItemPatternIdentifiersStatics_Impl::SelectionContainerProperty(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISelectionItemPatternIdentifiersStatics,
                OFFSET,
            >(),
            IsSelectedProperty: IsSelectedProperty::<Identity, OFFSET>,
            SelectionContainerProperty: SelectionContainerProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISelectionItemPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISelectionItemPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsSelectedProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SelectionContainerProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISelectionPatternIdentifiers,
    ISelectionPatternIdentifiers_Vtbl,
    0x401743d2_1fba_5d05_b89f_631676453237
);
impl windows_core::RuntimeType for ISelectionPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISelectionPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ISelectionPatternIdentifiers";
}
pub trait ISelectionPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl ISelectionPatternIdentifiers_Vtbl {
    pub const fn new<Identity: ISelectionPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISelectionPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISelectionPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISelectionPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISelectionPatternIdentifiersStatics,
    ISelectionPatternIdentifiersStatics_Vtbl,
    0xf3ed111b_b20a_5e5e_a232_07f607fd5c07
);
impl windows_core::RuntimeType for ISelectionPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISelectionPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ISelectionPatternIdentifiersStatics";
}
pub trait ISelectionPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn CanSelectMultipleProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsSelectionRequiredProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn SelectionProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl ISelectionPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: ISelectionPatternIdentifiersStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn CanSelectMultipleProperty<
            Identity: ISelectionPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionPatternIdentifiersStatics_Impl::CanSelectMultipleProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsSelectionRequiredProperty<
            Identity: ISelectionPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionPatternIdentifiersStatics_Impl::IsSelectionRequiredProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SelectionProperty<
            Identity: ISelectionPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISelectionPatternIdentifiersStatics_Impl::SelectionProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISelectionPatternIdentifiersStatics,
                OFFSET,
            >(),
            CanSelectMultipleProperty: CanSelectMultipleProperty::<Identity, OFFSET>,
            IsSelectionRequiredProperty: IsSelectionRequiredProperty::<Identity, OFFSET>,
            SelectionProperty: SelectionProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISelectionPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISelectionPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CanSelectMultipleProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsSelectionRequiredProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SelectionProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISpreadsheetItemPatternIdentifiers,
    ISpreadsheetItemPatternIdentifiers_Vtbl,
    0xdca2ec46_8564_5c9c_ba90_2c08455f697b
);
impl windows_core::RuntimeType for ISpreadsheetItemPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpreadsheetItemPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ISpreadsheetItemPatternIdentifiers";
}
pub trait ISpreadsheetItemPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl ISpreadsheetItemPatternIdentifiers_Vtbl {
    pub const fn new<Identity: ISpreadsheetItemPatternIdentifiers_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISpreadsheetItemPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpreadsheetItemPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpreadsheetItemPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ISpreadsheetItemPatternIdentifiersStatics,
    ISpreadsheetItemPatternIdentifiersStatics_Vtbl,
    0x7eb10f80_8d3a_59ad_a2b9_05d8cecf18db
);
impl windows_core::RuntimeType for ISpreadsheetItemPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ISpreadsheetItemPatternIdentifiersStatics {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Automation.ISpreadsheetItemPatternIdentifiersStatics";
}
pub trait ISpreadsheetItemPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn FormulaProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl ISpreadsheetItemPatternIdentifiersStatics_Vtbl {
    pub const fn new<
        Identity: ISpreadsheetItemPatternIdentifiersStatics_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn FormulaProperty<
            Identity: ISpreadsheetItemPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISpreadsheetItemPatternIdentifiersStatics_Impl::FormulaProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ISpreadsheetItemPatternIdentifiersStatics,
                OFFSET,
            >(),
            FormulaProperty: FormulaProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISpreadsheetItemPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpreadsheetItemPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub FormulaProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IStylesPatternIdentifiers,
    IStylesPatternIdentifiers_Vtbl,
    0x13aeca5e_b496_5df5_aea5_330e1f0490eb
);
impl windows_core::RuntimeType for IStylesPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IStylesPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IStylesPatternIdentifiers";
}
pub trait IStylesPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IStylesPatternIdentifiers_Vtbl {
    pub const fn new<Identity: IStylesPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IStylesPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IStylesPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IStylesPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IStylesPatternIdentifiersStatics,
    IStylesPatternIdentifiersStatics_Vtbl,
    0xb232287a_bc4c_581e_a33c_3d6aee10d04b
);
impl windows_core::RuntimeType for IStylesPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IStylesPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IStylesPatternIdentifiersStatics";
}
pub trait IStylesPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn ExtendedPropertiesProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn FillColorProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn FillPatternColorProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn FillPatternStyleProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ShapeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn StyleIdProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn StyleNameProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IStylesPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IStylesPatternIdentifiersStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn ExtendedPropertiesProperty<
            Identity: IStylesPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesPatternIdentifiersStatics_Impl::ExtendedPropertiesProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FillColorProperty<
            Identity: IStylesPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesPatternIdentifiersStatics_Impl::FillColorProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FillPatternColorProperty<
            Identity: IStylesPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesPatternIdentifiersStatics_Impl::FillPatternColorProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FillPatternStyleProperty<
            Identity: IStylesPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesPatternIdentifiersStatics_Impl::FillPatternStyleProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ShapeProperty<
            Identity: IStylesPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesPatternIdentifiersStatics_Impl::ShapeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn StyleIdProperty<
            Identity: IStylesPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesPatternIdentifiersStatics_Impl::StyleIdProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn StyleNameProperty<
            Identity: IStylesPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IStylesPatternIdentifiersStatics_Impl::StyleNameProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IStylesPatternIdentifiersStatics,
                OFFSET,
            >(),
            ExtendedPropertiesProperty: ExtendedPropertiesProperty::<Identity, OFFSET>,
            FillColorProperty: FillColorProperty::<Identity, OFFSET>,
            FillPatternColorProperty: FillPatternColorProperty::<Identity, OFFSET>,
            FillPatternStyleProperty: FillPatternStyleProperty::<Identity, OFFSET>,
            ShapeProperty: ShapeProperty::<Identity, OFFSET>,
            StyleIdProperty: StyleIdProperty::<Identity, OFFSET>,
            StyleNameProperty: StyleNameProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IStylesPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IStylesPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ExtendedPropertiesProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FillColorProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FillPatternColorProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FillPatternStyleProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ShapeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StyleIdProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub StyleNameProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITableItemPatternIdentifiers,
    ITableItemPatternIdentifiers_Vtbl,
    0xb4de5d03_a5b4_5ca1_8715_16c8c6a10fcc
);
impl windows_core::RuntimeType for ITableItemPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITableItemPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ITableItemPatternIdentifiers";
}
pub trait ITableItemPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl ITableItemPatternIdentifiers_Vtbl {
    pub const fn new<Identity: ITableItemPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ITableItemPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITableItemPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITableItemPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ITableItemPatternIdentifiersStatics,
    ITableItemPatternIdentifiersStatics_Vtbl,
    0x81d24bd7_66fb_53ef_9b32_d00f9c240a14
);
impl windows_core::RuntimeType for ITableItemPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITableItemPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ITableItemPatternIdentifiersStatics";
}
pub trait ITableItemPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn ColumnHeaderItemsProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn RowHeaderItemsProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl ITableItemPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: ITableItemPatternIdentifiersStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn ColumnHeaderItemsProperty<
            Identity: ITableItemPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITableItemPatternIdentifiersStatics_Impl::ColumnHeaderItemsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RowHeaderItemsProperty<
            Identity: ITableItemPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITableItemPatternIdentifiersStatics_Impl::RowHeaderItemsProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ITableItemPatternIdentifiersStatics,
                OFFSET,
            >(),
            ColumnHeaderItemsProperty: ColumnHeaderItemsProperty::<Identity, OFFSET>,
            RowHeaderItemsProperty: RowHeaderItemsProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITableItemPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITableItemPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ColumnHeaderItemsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RowHeaderItemsProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITablePatternIdentifiers,
    ITablePatternIdentifiers_Vtbl,
    0x3d7f9c0b_ff8f_50fa_bc01_2cc3c2e06e2c
);
impl windows_core::RuntimeType for ITablePatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITablePatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ITablePatternIdentifiers";
}
pub trait ITablePatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl ITablePatternIdentifiers_Vtbl {
    pub const fn new<Identity: ITablePatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ITablePatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITablePatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITablePatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ITablePatternIdentifiersStatics,
    ITablePatternIdentifiersStatics_Vtbl,
    0x3660935e_bcbb_5848_8e9a_264854f7a19a
);
impl windows_core::RuntimeType for ITablePatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITablePatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ITablePatternIdentifiersStatics";
}
pub trait ITablePatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn ColumnHeadersProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn RowHeadersProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn RowOrColumnMajorProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl ITablePatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: ITablePatternIdentifiersStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn ColumnHeadersProperty<
            Identity: ITablePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITablePatternIdentifiersStatics_Impl::ColumnHeadersProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RowHeadersProperty<
            Identity: ITablePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITablePatternIdentifiersStatics_Impl::RowHeadersProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RowOrColumnMajorProperty<
            Identity: ITablePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITablePatternIdentifiersStatics_Impl::RowOrColumnMajorProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ITablePatternIdentifiersStatics,
                OFFSET,
            >(),
            ColumnHeadersProperty: ColumnHeadersProperty::<Identity, OFFSET>,
            RowHeadersProperty: RowHeadersProperty::<Identity, OFFSET>,
            RowOrColumnMajorProperty: RowOrColumnMajorProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITablePatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITablePatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ColumnHeadersProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RowHeadersProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RowOrColumnMajorProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITogglePatternIdentifiers,
    ITogglePatternIdentifiers_Vtbl,
    0xa0d2df4c_ba59_51d9_9c01_034d7941c280
);
impl windows_core::RuntimeType for ITogglePatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITogglePatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ITogglePatternIdentifiers";
}
pub trait ITogglePatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl ITogglePatternIdentifiers_Vtbl {
    pub const fn new<Identity: ITogglePatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ITogglePatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITogglePatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITogglePatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ITogglePatternIdentifiersStatics,
    ITogglePatternIdentifiersStatics_Vtbl,
    0x862920b5_dcb3_5691_a456_c2f15c476dfb
);
impl windows_core::RuntimeType for ITogglePatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITogglePatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ITogglePatternIdentifiersStatics";
}
pub trait ITogglePatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn ToggleStateProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl ITogglePatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: ITogglePatternIdentifiersStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn ToggleStateProperty<
            Identity: ITogglePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITogglePatternIdentifiersStatics_Impl::ToggleStateProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ITogglePatternIdentifiersStatics,
                OFFSET,
            >(),
            ToggleStateProperty: ToggleStateProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITogglePatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITogglePatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ToggleStateProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITransformPattern2Identifiers,
    ITransformPattern2Identifiers_Vtbl,
    0x6ef7595c_db8c_51b0_878b_34b7ef12f4da
);
impl windows_core::RuntimeType for ITransformPattern2Identifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITransformPattern2Identifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ITransformPattern2Identifiers";
}
pub trait ITransformPattern2Identifiers_Impl: windows_core::IUnknownImpl {}
impl ITransformPattern2Identifiers_Vtbl {
    pub const fn new<Identity: ITransformPattern2Identifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ITransformPattern2Identifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITransformPattern2Identifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransformPattern2Identifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ITransformPattern2IdentifiersStatics,
    ITransformPattern2IdentifiersStatics_Vtbl,
    0xd9876ff5_89ed_5333_8111_ad25a28bee8b
);
impl windows_core::RuntimeType for ITransformPattern2IdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITransformPattern2IdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ITransformPattern2IdentifiersStatics";
}
pub trait ITransformPattern2IdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn CanZoomProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ZoomLevelProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn MaxZoomProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn MinZoomProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl ITransformPattern2IdentifiersStatics_Vtbl {
    pub const fn new<Identity: ITransformPattern2IdentifiersStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn CanZoomProperty<
            Identity: ITransformPattern2IdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformPattern2IdentifiersStatics_Impl::CanZoomProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ZoomLevelProperty<
            Identity: ITransformPattern2IdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformPattern2IdentifiersStatics_Impl::ZoomLevelProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MaxZoomProperty<
            Identity: ITransformPattern2IdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformPattern2IdentifiersStatics_Impl::MaxZoomProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn MinZoomProperty<
            Identity: ITransformPattern2IdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformPattern2IdentifiersStatics_Impl::MinZoomProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ITransformPattern2IdentifiersStatics,
                OFFSET,
            >(),
            CanZoomProperty: CanZoomProperty::<Identity, OFFSET>,
            ZoomLevelProperty: ZoomLevelProperty::<Identity, OFFSET>,
            MaxZoomProperty: MaxZoomProperty::<Identity, OFFSET>,
            MinZoomProperty: MinZoomProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITransformPattern2IdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransformPattern2IdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CanZoomProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ZoomLevelProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub MaxZoomProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub MinZoomProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ITransformPatternIdentifiers,
    ITransformPatternIdentifiers_Vtbl,
    0x2348187b_c50f_5a0e_bc05_305ac71b3b6b
);
impl windows_core::RuntimeType for ITransformPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITransformPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ITransformPatternIdentifiers";
}
pub trait ITransformPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl ITransformPatternIdentifiers_Vtbl {
    pub const fn new<Identity: ITransformPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ITransformPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITransformPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransformPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    ITransformPatternIdentifiersStatics,
    ITransformPatternIdentifiersStatics_Vtbl,
    0xcb7d84e4_5429_5188_8aa0_5f96558a8790
);
impl windows_core::RuntimeType for ITransformPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for ITransformPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ITransformPatternIdentifiersStatics";
}
pub trait ITransformPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn CanMoveProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn CanResizeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn CanRotateProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl ITransformPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: ITransformPatternIdentifiersStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn CanMoveProperty<
            Identity: ITransformPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformPatternIdentifiersStatics_Impl::CanMoveProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CanResizeProperty<
            Identity: ITransformPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformPatternIdentifiersStatics_Impl::CanResizeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CanRotateProperty<
            Identity: ITransformPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ITransformPatternIdentifiersStatics_Impl::CanRotateProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                ITransformPatternIdentifiersStatics,
                OFFSET,
            >(),
            CanMoveProperty: CanMoveProperty::<Identity, OFFSET>,
            CanResizeProperty: CanResizeProperty::<Identity, OFFSET>,
            CanRotateProperty: CanRotateProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ITransformPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransformPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CanMoveProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CanResizeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CanRotateProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IValuePatternIdentifiers,
    IValuePatternIdentifiers_Vtbl,
    0xfb493395_fb97_59d5_9323_4651ce964b55
);
impl windows_core::RuntimeType for IValuePatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IValuePatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IValuePatternIdentifiers";
}
pub trait IValuePatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IValuePatternIdentifiers_Vtbl {
    pub const fn new<Identity: IValuePatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IValuePatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IValuePatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IValuePatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IValuePatternIdentifiersStatics,
    IValuePatternIdentifiersStatics_Vtbl,
    0x2019faf5_ce64_59a7_bc13_0677c3146724
);
impl windows_core::RuntimeType for IValuePatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IValuePatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IValuePatternIdentifiersStatics";
}
pub trait IValuePatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn IsReadOnlyProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn ValueProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IValuePatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IValuePatternIdentifiersStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn IsReadOnlyProperty<
            Identity: IValuePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IValuePatternIdentifiersStatics_Impl::IsReadOnlyProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ValueProperty<
            Identity: IValuePatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IValuePatternIdentifiersStatics_Impl::ValueProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IValuePatternIdentifiersStatics,
                OFFSET,
            >(),
            IsReadOnlyProperty: IsReadOnlyProperty::<Identity, OFFSET>,
            ValueProperty: ValueProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IValuePatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IValuePatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsReadOnlyProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ValueProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IWindowPatternIdentifiers,
    IWindowPatternIdentifiers_Vtbl,
    0xbec579e1_91be_5d8f_aaca_6ad8839872d2
);
impl windows_core::RuntimeType for IWindowPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IWindowPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IWindowPatternIdentifiers";
}
pub trait IWindowPatternIdentifiers_Impl: windows_core::IUnknownImpl {}
impl IWindowPatternIdentifiers_Vtbl {
    pub const fn new<Identity: IWindowPatternIdentifiers_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IWindowPatternIdentifiers,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IWindowPatternIdentifiers as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowPatternIdentifiers_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IWindowPatternIdentifiersStatics,
    IWindowPatternIdentifiersStatics_Vtbl,
    0x06762744_d3d7_5441_b879_373681d47f64
);
impl windows_core::RuntimeType for IWindowPatternIdentifiersStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IWindowPatternIdentifiersStatics {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.IWindowPatternIdentifiersStatics";
}
pub trait IWindowPatternIdentifiersStatics_Impl: windows_core::IUnknownImpl {
    fn CanMaximizeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn CanMinimizeProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsModalProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn IsTopmostProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn WindowInteractionStateProperty(&self) -> windows_core::Result<AutomationProperty>;
    fn WindowVisualStateProperty(&self) -> windows_core::Result<AutomationProperty>;
}
impl IWindowPatternIdentifiersStatics_Vtbl {
    pub const fn new<Identity: IWindowPatternIdentifiersStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CanMaximizeProperty<
            Identity: IWindowPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowPatternIdentifiersStatics_Impl::CanMaximizeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CanMinimizeProperty<
            Identity: IWindowPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowPatternIdentifiersStatics_Impl::CanMinimizeProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsModalProperty<
            Identity: IWindowPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowPatternIdentifiersStatics_Impl::IsModalProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsTopmostProperty<
            Identity: IWindowPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowPatternIdentifiersStatics_Impl::IsTopmostProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WindowInteractionStateProperty<
            Identity: IWindowPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowPatternIdentifiersStatics_Impl::WindowInteractionStateProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WindowVisualStateProperty<
            Identity: IWindowPatternIdentifiersStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IWindowPatternIdentifiersStatics_Impl::WindowVisualStateProperty(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IWindowPatternIdentifiersStatics,
                OFFSET,
            >(),
            CanMaximizeProperty: CanMaximizeProperty::<Identity, OFFSET>,
            CanMinimizeProperty: CanMinimizeProperty::<Identity, OFFSET>,
            IsModalProperty: IsModalProperty::<Identity, OFFSET>,
            IsTopmostProperty: IsTopmostProperty::<Identity, OFFSET>,
            WindowInteractionStateProperty: WindowInteractionStateProperty::<Identity, OFFSET>,
            WindowVisualStateProperty: WindowVisualStateProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IWindowPatternIdentifiersStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowPatternIdentifiersStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CanMaximizeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CanMinimizeProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsModalProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsTopmostProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub WindowInteractionStateProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub WindowVisualStateProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct MultipleViewPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    MultipleViewPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl MultipleViewPatternIdentifiers {
    pub fn CurrentViewProperty() -> windows_core::Result<AutomationProperty> {
        Self::IMultipleViewPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CurrentViewProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SupportedViewsProperty() -> windows_core::Result<AutomationProperty> {
        Self::IMultipleViewPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SupportedViewsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IMultipleViewPatternIdentifiersStatics<
        R,
        F: FnOnce(&IMultipleViewPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            MultipleViewPatternIdentifiers,
            IMultipleViewPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for MultipleViewPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IMultipleViewPatternIdentifiers>();
}
unsafe impl windows_core::Interface for MultipleViewPatternIdentifiers {
    type Vtable = <IMultipleViewPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IMultipleViewPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for MultipleViewPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.MultipleViewPatternIdentifiers";
}
unsafe impl Send for MultipleViewPatternIdentifiers {}
unsafe impl Sync for MultipleViewPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct RangeValuePatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    RangeValuePatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl RangeValuePatternIdentifiers {
    pub fn IsReadOnlyProperty() -> windows_core::Result<AutomationProperty> {
        Self::IRangeValuePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsReadOnlyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn LargeChangeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IRangeValuePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LargeChangeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn MaximumProperty() -> windows_core::Result<AutomationProperty> {
        Self::IRangeValuePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaximumProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn MinimumProperty() -> windows_core::Result<AutomationProperty> {
        Self::IRangeValuePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinimumProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SmallChangeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IRangeValuePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SmallChangeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ValueProperty() -> windows_core::Result<AutomationProperty> {
        Self::IRangeValuePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValueProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IRangeValuePatternIdentifiersStatics<
        R,
        F: FnOnce(&IRangeValuePatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            RangeValuePatternIdentifiers,
            IRangeValuePatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for RangeValuePatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IRangeValuePatternIdentifiers>();
}
unsafe impl windows_core::Interface for RangeValuePatternIdentifiers {
    type Vtable = <IRangeValuePatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IRangeValuePatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for RangeValuePatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.RangeValuePatternIdentifiers";
}
unsafe impl Send for RangeValuePatternIdentifiers {}
unsafe impl Sync for RangeValuePatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct RowOrColumnMajor(pub i32);
impl RowOrColumnMajor {
    pub const RowMajor: Self = Self(0i32);
    pub const ColumnMajor: Self = Self(1i32);
    pub const Indeterminate: Self = Self(2i32);
}
impl windows_core::TypeKind for RowOrColumnMajor {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for RowOrColumnMajor {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.RowOrColumnMajor;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ScrollAmount(pub i32);
impl ScrollAmount {
    pub const LargeDecrement: Self = Self(0i32);
    pub const SmallDecrement: Self = Self(1i32);
    pub const NoAmount: Self = Self(2i32);
    pub const LargeIncrement: Self = Self(3i32);
    pub const SmallIncrement: Self = Self(4i32);
}
impl windows_core::TypeKind for ScrollAmount {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ScrollAmount {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.ScrollAmount;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ScrollPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ScrollPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ScrollPatternIdentifiers {
    pub fn HorizontallyScrollableProperty() -> windows_core::Result<AutomationProperty> {
        Self::IScrollPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontallyScrollableProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn HorizontalScrollPercentProperty() -> windows_core::Result<AutomationProperty> {
        Self::IScrollPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalScrollPercentProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn HorizontalViewSizeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IScrollPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HorizontalViewSizeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn NoScroll() -> windows_core::Result<f64> {
        Self::IScrollPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NoScroll)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    pub fn VerticallyScrollableProperty() -> windows_core::Result<AutomationProperty> {
        Self::IScrollPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticallyScrollableProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn VerticalScrollPercentProperty() -> windows_core::Result<AutomationProperty> {
        Self::IScrollPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalScrollPercentProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn VerticalViewSizeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IScrollPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).VerticalViewSizeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IScrollPatternIdentifiersStatics<
        R,
        F: FnOnce(&IScrollPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ScrollPatternIdentifiers,
            IScrollPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ScrollPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IScrollPatternIdentifiers>();
}
unsafe impl windows_core::Interface for ScrollPatternIdentifiers {
    type Vtable = <IScrollPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IScrollPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ScrollPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ScrollPatternIdentifiers";
}
unsafe impl Send for ScrollPatternIdentifiers {}
unsafe impl Sync for ScrollPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SelectionItemPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SelectionItemPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl SelectionItemPatternIdentifiers {
    pub fn IsSelectedProperty() -> windows_core::Result<AutomationProperty> {
        Self::ISelectionItemPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSelectedProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SelectionContainerProperty() -> windows_core::Result<AutomationProperty> {
        Self::ISelectionItemPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionContainerProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISelectionItemPatternIdentifiersStatics<
        R,
        F: FnOnce(&ISelectionItemPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SelectionItemPatternIdentifiers,
            ISelectionItemPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SelectionItemPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISelectionItemPatternIdentifiers>();
}
unsafe impl windows_core::Interface for SelectionItemPatternIdentifiers {
    type Vtable = <ISelectionItemPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ISelectionItemPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SelectionItemPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.SelectionItemPatternIdentifiers";
}
unsafe impl Send for SelectionItemPatternIdentifiers {}
unsafe impl Sync for SelectionItemPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SelectionPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SelectionPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl SelectionPatternIdentifiers {
    pub fn CanSelectMultipleProperty() -> windows_core::Result<AutomationProperty> {
        Self::ISelectionPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanSelectMultipleProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsSelectionRequiredProperty() -> windows_core::Result<AutomationProperty> {
        Self::ISelectionPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSelectionRequiredProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn SelectionProperty() -> windows_core::Result<AutomationProperty> {
        Self::ISelectionPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SelectionProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISelectionPatternIdentifiersStatics<
        R,
        F: FnOnce(&ISelectionPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SelectionPatternIdentifiers,
            ISelectionPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SelectionPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISelectionPatternIdentifiers>();
}
unsafe impl windows_core::Interface for SelectionPatternIdentifiers {
    type Vtable = <ISelectionPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ISelectionPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SelectionPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.SelectionPatternIdentifiers";
}
unsafe impl Send for SelectionPatternIdentifiers {}
unsafe impl Sync for SelectionPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SpreadsheetItemPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    SpreadsheetItemPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl SpreadsheetItemPatternIdentifiers {
    pub fn FormulaProperty() -> windows_core::Result<AutomationProperty> {
        Self::ISpreadsheetItemPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FormulaProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ISpreadsheetItemPatternIdentifiersStatics<
        R,
        F: FnOnce(&ISpreadsheetItemPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            SpreadsheetItemPatternIdentifiers,
            ISpreadsheetItemPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for SpreadsheetItemPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ISpreadsheetItemPatternIdentifiers>();
}
unsafe impl windows_core::Interface for SpreadsheetItemPatternIdentifiers {
    type Vtable = <ISpreadsheetItemPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <ISpreadsheetItemPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for SpreadsheetItemPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.SpreadsheetItemPatternIdentifiers";
}
unsafe impl Send for SpreadsheetItemPatternIdentifiers {}
unsafe impl Sync for SpreadsheetItemPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct StylesPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    StylesPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl StylesPatternIdentifiers {
    pub fn ExtendedPropertiesProperty() -> windows_core::Result<AutomationProperty> {
        Self::IStylesPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ExtendedPropertiesProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FillColorProperty() -> windows_core::Result<AutomationProperty> {
        Self::IStylesPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillColorProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FillPatternColorProperty() -> windows_core::Result<AutomationProperty> {
        Self::IStylesPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillPatternColorProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FillPatternStyleProperty() -> windows_core::Result<AutomationProperty> {
        Self::IStylesPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FillPatternStyleProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ShapeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IStylesPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShapeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn StyleIdProperty() -> windows_core::Result<AutomationProperty> {
        Self::IStylesPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StyleIdProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn StyleNameProperty() -> windows_core::Result<AutomationProperty> {
        Self::IStylesPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StyleNameProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IStylesPatternIdentifiersStatics<
        R,
        F: FnOnce(&IStylesPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            StylesPatternIdentifiers,
            IStylesPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for StylesPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IStylesPatternIdentifiers>();
}
unsafe impl windows_core::Interface for StylesPatternIdentifiers {
    type Vtable = <IStylesPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IStylesPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for StylesPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.StylesPatternIdentifiers";
}
unsafe impl Send for StylesPatternIdentifiers {}
unsafe impl Sync for StylesPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct SupportedTextSelection(pub i32);
impl SupportedTextSelection {
    pub const None: Self = Self(0i32);
    pub const Single: Self = Self(1i32);
    pub const Multiple: Self = Self(2i32);
}
impl windows_core::TypeKind for SupportedTextSelection {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for SupportedTextSelection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.SupportedTextSelection;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct SynchronizedInputType(pub i32);
impl SynchronizedInputType {
    pub const KeyUp: Self = Self(1i32);
    pub const KeyDown: Self = Self(2i32);
    pub const LeftMouseUp: Self = Self(4i32);
    pub const LeftMouseDown: Self = Self(8i32);
    pub const RightMouseUp: Self = Self(16i32);
    pub const RightMouseDown: Self = Self(32i32);
}
impl windows_core::TypeKind for SynchronizedInputType {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for SynchronizedInputType {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.SynchronizedInputType;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TableItemPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TableItemPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl TableItemPatternIdentifiers {
    pub fn ColumnHeaderItemsProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITableItemPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColumnHeaderItemsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn RowHeaderItemsProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITableItemPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RowHeaderItemsProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ITableItemPatternIdentifiersStatics<
        R,
        F: FnOnce(&ITableItemPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            TableItemPatternIdentifiers,
            ITableItemPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for TableItemPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITableItemPatternIdentifiers>();
}
unsafe impl windows_core::Interface for TableItemPatternIdentifiers {
    type Vtable = <ITableItemPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITableItemPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TableItemPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.TableItemPatternIdentifiers";
}
unsafe impl Send for TableItemPatternIdentifiers {}
unsafe impl Sync for TableItemPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TablePatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TablePatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl TablePatternIdentifiers {
    pub fn ColumnHeadersProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITablePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ColumnHeadersProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn RowHeadersProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITablePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RowHeadersProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn RowOrColumnMajorProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITablePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RowOrColumnMajorProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ITablePatternIdentifiersStatics<
        R,
        F: FnOnce(&ITablePatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            TablePatternIdentifiers,
            ITablePatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for TablePatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITablePatternIdentifiers>();
}
unsafe impl windows_core::Interface for TablePatternIdentifiers {
    type Vtable = <ITablePatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITablePatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TablePatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.TablePatternIdentifiers";
}
unsafe impl Send for TablePatternIdentifiers {}
unsafe impl Sync for TablePatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TogglePatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TogglePatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl TogglePatternIdentifiers {
    pub fn ToggleStateProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITogglePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ToggleStateProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ITogglePatternIdentifiersStatics<
        R,
        F: FnOnce(&ITogglePatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            TogglePatternIdentifiers,
            ITogglePatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for TogglePatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITogglePatternIdentifiers>();
}
unsafe impl windows_core::Interface for TogglePatternIdentifiers {
    type Vtable = <ITogglePatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITogglePatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TogglePatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.TogglePatternIdentifiers";
}
unsafe impl Send for TogglePatternIdentifiers {}
unsafe impl Sync for TogglePatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ToggleState(pub i32);
impl ToggleState {
    pub const Off: Self = Self(0i32);
    pub const On: Self = Self(1i32);
    pub const Indeterminate: Self = Self(2i32);
}
impl windows_core::TypeKind for ToggleState {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ToggleState {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.ToggleState;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TransformPattern2Identifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TransformPattern2Identifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl TransformPattern2Identifiers {
    pub fn CanZoomProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITransformPattern2IdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanZoomProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ZoomLevelProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITransformPattern2IdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ZoomLevelProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn MaxZoomProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITransformPattern2IdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MaxZoomProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn MinZoomProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITransformPattern2IdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MinZoomProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ITransformPattern2IdentifiersStatics<
        R,
        F: FnOnce(&ITransformPattern2IdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            TransformPattern2Identifiers,
            ITransformPattern2IdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for TransformPattern2Identifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITransformPattern2Identifiers>();
}
unsafe impl windows_core::Interface for TransformPattern2Identifiers {
    type Vtable = <ITransformPattern2Identifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITransformPattern2Identifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TransformPattern2Identifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.TransformPattern2Identifiers";
}
unsafe impl Send for TransformPattern2Identifiers {}
unsafe impl Sync for TransformPattern2Identifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct TransformPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    TransformPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl TransformPatternIdentifiers {
    pub fn CanMoveProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITransformPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanMoveProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CanResizeProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITransformPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanResizeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CanRotateProperty() -> windows_core::Result<AutomationProperty> {
        Self::ITransformPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanRotateProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn ITransformPatternIdentifiersStatics<
        R,
        F: FnOnce(&ITransformPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            TransformPatternIdentifiers,
            ITransformPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for TransformPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, ITransformPatternIdentifiers>();
}
unsafe impl windows_core::Interface for TransformPatternIdentifiers {
    type Vtable = <ITransformPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <ITransformPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for TransformPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.TransformPatternIdentifiers";
}
unsafe impl Send for TransformPatternIdentifiers {}
unsafe impl Sync for TransformPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ValuePatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ValuePatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ValuePatternIdentifiers {
    pub fn IsReadOnlyProperty() -> windows_core::Result<AutomationProperty> {
        Self::IValuePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsReadOnlyProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn ValueProperty() -> windows_core::Result<AutomationProperty> {
        Self::IValuePatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValueProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IValuePatternIdentifiersStatics<
        R,
        F: FnOnce(&IValuePatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ValuePatternIdentifiers,
            IValuePatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ValuePatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IValuePatternIdentifiers>();
}
unsafe impl windows_core::Interface for ValuePatternIdentifiers {
    type Vtable = <IValuePatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IValuePatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ValuePatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.ValuePatternIdentifiers";
}
unsafe impl Send for ValuePatternIdentifiers {}
unsafe impl Sync for ValuePatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct WindowInteractionState(pub i32);
impl WindowInteractionState {
    pub const Running: Self = Self(0i32);
    pub const Closing: Self = Self(1i32);
    pub const ReadyForUserInteraction: Self = Self(2i32);
    pub const BlockedByModalWindow: Self = Self(3i32);
    pub const NotResponding: Self = Self(4i32);
}
impl windows_core::TypeKind for WindowInteractionState {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for WindowInteractionState {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.WindowInteractionState;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct WindowPatternIdentifiers(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    WindowPatternIdentifiers,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl WindowPatternIdentifiers {
    pub fn CanMaximizeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IWindowPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanMaximizeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CanMinimizeProperty() -> windows_core::Result<AutomationProperty> {
        Self::IWindowPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CanMinimizeProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsModalProperty() -> windows_core::Result<AutomationProperty> {
        Self::IWindowPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsModalProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsTopmostProperty() -> windows_core::Result<AutomationProperty> {
        Self::IWindowPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsTopmostProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn WindowInteractionStateProperty() -> windows_core::Result<AutomationProperty> {
        Self::IWindowPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WindowInteractionStateProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn WindowVisualStateProperty() -> windows_core::Result<AutomationProperty> {
        Self::IWindowPatternIdentifiersStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WindowVisualStateProperty)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IWindowPatternIdentifiersStatics<
        R,
        F: FnOnce(&IWindowPatternIdentifiersStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            WindowPatternIdentifiers,
            IWindowPatternIdentifiersStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for WindowPatternIdentifiers {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IWindowPatternIdentifiers>();
}
unsafe impl windows_core::Interface for WindowPatternIdentifiers {
    type Vtable = <IWindowPatternIdentifiers as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IWindowPatternIdentifiers as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for WindowPatternIdentifiers {
    const NAME: &'static str = "Microsoft.UI.Xaml.Automation.WindowPatternIdentifiers";
}
unsafe impl Send for WindowPatternIdentifiers {}
unsafe impl Sync for WindowPatternIdentifiers {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct WindowVisualState(pub i32);
impl WindowVisualState {
    pub const Normal: Self = Self(0i32);
    pub const Maximized: Self = Self(1i32);
    pub const Minimized: Self = Self(2i32);
}
impl windows_core::TypeKind for WindowVisualState {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for WindowVisualState {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.WindowVisualState;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ZoomUnit(pub i32);
impl ZoomUnit {
    pub const NoAmount: Self = Self(0i32);
    pub const LargeDecrement: Self = Self(1i32);
    pub const SmallDecrement: Self = Self(2i32);
    pub const LargeIncrement: Self = Self(3i32);
    pub const SmallIncrement: Self = Self(4i32);
}
impl windows_core::TypeKind for ZoomUnit {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ZoomUnit {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Automation.ZoomUnit;i4)",
    );
}
