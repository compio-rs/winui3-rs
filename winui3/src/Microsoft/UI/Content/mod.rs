// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ChildSiteLink(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ChildSiteLink,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ChildSiteLink,
    windows::Foundation::IClosable,
    super::IClosableNotifier,
    IContentSiteAutomation,
    IContentSiteInput,
    IContentSiteLink
);
impl ChildSiteLink {
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetActualSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetActualSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn LocalToParentTransformMatrix(
        &self,
    ) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LocalToParentTransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLocalToParentTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLocalToParentTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SiteView(&self) -> windows_core::Result<ContentSiteView> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SiteView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Connect<P0>(&self, content: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ContentIsland>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Connect)(
                windows_core::Interface::as_raw(this),
                content.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Create<P0, P1>(parent: P0, placementvisual: P1) -> windows_core::Result<ChildSiteLink>
    where
        P0: windows_core::Param<ContentIsland>,
        P1: windows_core::Param<super::Composition::ContainerVisual>,
    {
        Self::IChildSiteLinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                parent.param().abi(),
                placementvisual.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Composition")]
    pub fn CreateForSystemVisual<P0, P1>(
        parent: P0,
        placementvisual: P1,
    ) -> windows_core::Result<ChildSiteLink>
    where
        P0: windows_core::Param<ContentIsland>,
        P1: windows_core::Param<windows::UI::Composition::ContainerVisual>,
    {
        Self::IChildSiteLinkStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateForSystemVisual)(
                windows_core::Interface::as_raw(this),
                parent.param().abi(),
                placementvisual.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn IsClosed(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsClosed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Closed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Closed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FrameworkClosed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameworkClosed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFrameworkClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFrameworkClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn AutomationOption(&self) -> windows_core::Result<ContentAutomationOptions> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationOption)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutomationOption(&self, value: ContentAutomationOptions) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutomationOption)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationProvider)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FragmentRootAutomationProviderRequested<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FragmentRootAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFragmentRootAutomationProviderRequested(
        &self,
        token: i64,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFragmentRootAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn NextSiblingAutomationProviderRequested<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NextSiblingAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNextSiblingAutomationProviderRequested(
        &self,
        token: i64,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNextSiblingAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ParentAutomationProviderRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveParentAutomationProviderRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveParentAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn PreviousSiblingAutomationProviderRequested<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PreviousSiblingAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePreviousSiblingAutomationProviderRequested(
        &self,
        token: i64,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            ( windows_core::Interface::vtable ( this ) . RemovePreviousSiblingAutomationProviderRequested ) ( windows_core::Interface::as_raw ( this ) , token , ) . ok ( )
        }
    }
    pub fn ProcessesKeyboardInput(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentSiteInput>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesKeyboardInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetProcessesKeyboardInput(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteInput>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetProcessesKeyboardInput)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ProcessesPointerInput(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentSiteInput>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesPointerInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetProcessesPointerInput(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteInput>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetProcessesPointerInput)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Parent(&self) -> windows_core::Result<ContentIsland> {
        let this = &windows_core::Interface::cast::<IContentSiteLink>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    fn IChildSiteLinkStatics<R, F: FnOnce(&IChildSiteLinkStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ChildSiteLink, IChildSiteLinkStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ChildSiteLink {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IChildSiteLink>();
}
unsafe impl windows_core::Interface for ChildSiteLink {
    type Vtable = <IChildSiteLink as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IChildSiteLink as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ChildSiteLink {
    const NAME: &'static str = "Microsoft.UI.Content.ChildSiteLink";
}
unsafe impl Send for ChildSiteLink {}
unsafe impl Sync for ChildSiteLink {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ContentAutomationOptions(pub i32);
impl ContentAutomationOptions {
    pub const None: Self = Self(0i32);
    pub const FrameworkBased: Self = Self(1i32);
    pub const FragmentBased: Self = Self(2i32);
}
impl windows_core::TypeKind for ContentAutomationOptions {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ContentAutomationOptions {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Content.ContentAutomationOptions;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentCoordinateConverter(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentCoordinateConverter,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentCoordinateConverter {
    pub fn ConvertLocalToScreenWithPoint(
        &self,
        localpoint: windows::Foundation::Point,
    ) -> windows_core::Result<windows::Graphics::PointInt32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ConvertLocalToScreenWithPoint)(
                windows_core::Interface::as_raw(this),
                localpoint,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ConvertLocalToScreenWithPoints(
        &self,
        localpoints: &[windows::Foundation::Point],
    ) -> windows_core::Result<windows_core::Array<windows::Graphics::PointInt32>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).ConvertLocalToScreenWithPoints)(
                windows_core::Interface::as_raw(this),
                localpoints.len().try_into().unwrap(),
                localpoints.as_ptr(),
                windows_core::Array::<windows::Graphics::PointInt32>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn ConvertLocalToScreenWithPointsAndRoundingMode(
        &self,
        localpoints: &[windows::Foundation::Point],
        roundingmode: ContentCoordinateRoundingMode,
    ) -> windows_core::Result<windows_core::Array<windows::Graphics::PointInt32>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).ConvertLocalToScreenWithPointsAndRoundingMode)(
                windows_core::Interface::as_raw(this),
                localpoints.len().try_into().unwrap(),
                localpoints.as_ptr(),
                roundingmode,
                windows_core::Array::<windows::Graphics::PointInt32>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn ConvertLocalToScreenWithRect(
        &self,
        localrect: windows::Foundation::Rect,
    ) -> windows_core::Result<windows::Graphics::RectInt32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ConvertLocalToScreenWithRect)(
                windows_core::Interface::as_raw(this),
                localrect,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ConvertScreenToLocalWithPoint(
        &self,
        screenpoint: windows::Graphics::PointInt32,
    ) -> windows_core::Result<windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ConvertScreenToLocalWithPoint)(
                windows_core::Interface::as_raw(this),
                screenpoint,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ConvertScreenToLocalWithPoints(
        &self,
        screenpoints: &[windows::Graphics::PointInt32],
    ) -> windows_core::Result<windows_core::Array<windows::Foundation::Point>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).ConvertScreenToLocalWithPoints)(
                windows_core::Interface::as_raw(this),
                screenpoints.len().try_into().unwrap(),
                screenpoints.as_ptr(),
                windows_core::Array::<windows::Foundation::Point>::set_abi_len(
                    core::mem::transmute(&mut result__),
                ),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn ConvertScreenToLocalWithRect(
        &self,
        screenrect: windows::Graphics::RectInt32,
    ) -> windows_core::Result<windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ConvertScreenToLocalWithRect)(
                windows_core::Interface::as_raw(this),
                screenrect,
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CreateForWindowId(
        windowid: super::WindowId,
    ) -> windows_core::Result<ContentCoordinateConverter> {
        Self::IContentCoordinateConverterStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateForWindowId)(
                windows_core::Interface::as_raw(this),
                windowid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IContentCoordinateConverterStatics<
        R,
        F: FnOnce(&IContentCoordinateConverterStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ContentCoordinateConverter,
            IContentCoordinateConverterStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ContentCoordinateConverter {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContentCoordinateConverter>();
}
unsafe impl windows_core::Interface for ContentCoordinateConverter {
    type Vtable = <IContentCoordinateConverter as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IContentCoordinateConverter as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentCoordinateConverter {
    const NAME: &'static str = "Microsoft.UI.Content.ContentCoordinateConverter";
}
unsafe impl Send for ContentCoordinateConverter {}
unsafe impl Sync for ContentCoordinateConverter {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ContentCoordinateRoundingMode(pub i32);
impl ContentCoordinateRoundingMode {
    pub const Auto: Self = Self(0i32);
    pub const Floor: Self = Self(1i32);
    pub const Round: Self = Self(2i32);
    pub const Ceiling: Self = Self(3i32);
}
impl windows_core::TypeKind for ContentCoordinateRoundingMode {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ContentCoordinateRoundingMode {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Content.ContentCoordinateRoundingMode;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentDeferral(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentDeferral,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentDeferral {
    pub fn Complete(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Complete)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
impl windows_core::RuntimeType for ContentDeferral {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContentDeferral>();
}
unsafe impl windows_core::Interface for ContentDeferral {
    type Vtable = <IContentDeferral as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IContentDeferral as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentDeferral {
    const NAME: &'static str = "Microsoft.UI.Content.ContentDeferral";
}
unsafe impl Send for ContentDeferral {}
unsafe impl Sync for ContentDeferral {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentEnvironmentSettingChangedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentEnvironmentSettingChangedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentEnvironmentSettingChangedEventArgs {
    pub fn SettingName(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SettingName)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
}
impl windows_core::RuntimeType for ContentEnvironmentSettingChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IContentEnvironmentSettingChangedEventArgs,
    >();
}
unsafe impl windows_core::Interface for ContentEnvironmentSettingChangedEventArgs {
    type Vtable = <IContentEnvironmentSettingChangedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IContentEnvironmentSettingChangedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentEnvironmentSettingChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Content.ContentEnvironmentSettingChangedEventArgs";
}
unsafe impl Send for ContentEnvironmentSettingChangedEventArgs {}
unsafe impl Sync for ContentEnvironmentSettingChangedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentEnvironmentStateChangedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentEnvironmentStateChangedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentEnvironmentStateChangedEventArgs {
    pub fn DidAppWindowIdChange(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DidAppWindowIdChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DidDisplayIdChange(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DidDisplayIdChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DidDisplayScaleChange(&self) -> windows_core::Result<bool> {
        let this =
            &windows_core::Interface::cast::<IContentEnvironmentStateChangedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DidDisplayScaleChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for ContentEnvironmentStateChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IContentEnvironmentStateChangedEventArgs,
    >();
}
unsafe impl windows_core::Interface for ContentEnvironmentStateChangedEventArgs {
    type Vtable = <IContentEnvironmentStateChangedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IContentEnvironmentStateChangedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentEnvironmentStateChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Content.ContentEnvironmentStateChangedEventArgs";
}
unsafe impl Send for ContentEnvironmentStateChangedEventArgs {}
unsafe impl Sync for ContentEnvironmentStateChangedEventArgs {}
#[cfg(feature = "UI_Composition")]
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentIsland(windows_core::IUnknown);
#[cfg(feature = "UI_Composition")]
windows_core::imp::interface_hierarchy!(
    ContentIsland,
    windows_core::IUnknown,
    windows_core::IInspectable
);
#[cfg(feature = "UI_Composition")]
windows_core::imp::required_hierarchy!(
    ContentIsland,
    windows::Foundation::IClosable,
    super::IClosableNotifier,
    super::Composition::ICompositionSupportsSystemBackdrop
);
#[cfg(feature = "UI_Composition")]
impl ContentIsland {
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn IsClosed(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsClosed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Closed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Closed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FrameworkClosed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameworkClosed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFrameworkClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFrameworkClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn SystemBackdrop(
        &self,
    ) -> windows_core::Result<windows::UI::Composition::CompositionBrush> {
        let this = &windows_core::Interface::cast::<
            super::Composition::ICompositionSupportsSystemBackdrop,
        >(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SystemBackdrop)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetSystemBackdrop<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::UI::Composition::CompositionBrush>,
    {
        let this = &windows_core::Interface::cast::<
            super::Composition::ICompositionSupportsSystemBackdrop,
        >(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetSystemBackdrop)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AppData(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AppData)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAppData<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAppData)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn CoordinateConverter(&self) -> windows_core::Result<ContentCoordinateConverter> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CoordinateConverter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CustomProperties(
        &self,
    ) -> windows_core::Result<windows::Foundation::Collections::IPropertySet> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CustomProperties)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Environment(&self) -> windows_core::Result<ContentIslandEnvironment> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Environment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Id(&self) -> windows_core::Result<u64> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Id)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsConnected(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsConnected)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsHitTestVisibleWhenTransparent(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsHitTestVisibleWhenTransparent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsHitTestVisibleWhenTransparent(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsHitTestVisibleWhenTransparent)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsIslandEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsIslandEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsIslandEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsIslandEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsIslandVisible(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsIslandVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsIslandVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsIslandVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsSiteEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSiteEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsSiteVisible(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSiteVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LayoutDirection(&self) -> windows_core::Result<ContentLayoutDirection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutDirection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetAutomationHostProvider(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetAutomationHostProvider)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetStateChangeDeferral(&self) -> windows_core::Result<ContentDeferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStateChangeDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RequestSize(&self, size: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RequestSize)(
                windows_core::Interface::as_raw(this),
                size,
            )
            .ok()
        }
    }
    pub fn AutomationProviderRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                ContentIsland,
                ContentIslandAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveAutomationProviderRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn StateChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                ContentIsland,
                ContentIslandStateChangedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StateChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveStateChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveStateChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Children(&self) -> windows_core::Result<windows_collections::IIterable<ChildSiteLink>> {
        let this = &windows_core::Interface::cast::<IContentIsland2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Children)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn LocalToClientTransformMatrix(
        &self,
    ) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<IContentIsland2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LocalToClientTransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LocalToParentTransformMatrix(
        &self,
    ) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<IContentIsland2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LocalToParentTransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Popups(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<DesktopPopupSiteBridge>> {
        let this = &windows_core::Interface::cast::<IContentIsland2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Popups)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ProcessesKeyboardInput(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentIsland2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesKeyboardInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ProcessesPointerInput(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentIsland2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesPointerInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AutomationOption(&self) -> windows_core::Result<ContentAutomationOptions> {
        let this = &windows_core::Interface::cast::<IContentIslandAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationOption)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn FragmentRootAutomationProvider(
        &self,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentIslandAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FragmentRootAutomationProvider)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn NextSiblingAutomationProvider(
        &self,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentIslandAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NextSiblingAutomationProvider)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ParentAutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentIslandAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentAutomationProvider)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn PreviousSiblingAutomationProvider(
        &self,
    ) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentIslandAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PreviousSiblingAutomationProvider)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Create<P0>(root: P0) -> windows_core::Result<ContentIsland>
    where
        P0: windows_core::Param<super::Composition::Visual>,
    {
        Self::IContentIslandStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                root.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FindAllForCompositor<P0>(
        compositor: P0,
    ) -> windows_core::Result<windows_core::Array<ContentIsland>>
    where
        P0: windows_core::Param<super::Composition::Compositor>,
    {
        Self::IContentIslandStatics(|this| unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).FindAllForCompositor)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                windows_core::Array::<ContentIsland>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        })
    }
    pub fn FindAllForCurrentThread() -> windows_core::Result<windows_core::Array<ContentIsland>> {
        Self::IContentIslandStatics(|this| unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).FindAllForCurrentThread)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<ContentIsland>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        })
    }
    pub fn GetByVisual<P0>(child: P0) -> windows_core::Result<ContentIsland>
    where
        P0: windows_core::Param<super::Composition::Visual>,
    {
        Self::IContentIslandStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetByVisual)(
                windows_core::Interface::as_raw(this),
                child.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetFromId(id: u64) -> windows_core::Result<ContentIsland> {
        Self::IContentIslandStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetFromId)(
                windows_core::Interface::as_raw(this),
                id,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn CreateForSystemVisual<P0, P1>(queue: P0, root: P1) -> windows_core::Result<ContentIsland>
    where
        P0: windows_core::Param<super::Dispatching::DispatcherQueue>,
        P1: windows_core::Param<windows::UI::Composition::Visual>,
    {
        Self::IContentIslandStatics2(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateForSystemVisual)(
                windows_core::Interface::as_raw(this),
                queue.param().abi(),
                root.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn FindAllForSystemCompositor<P0>(
        compositor: P0,
    ) -> windows_core::Result<windows_core::Array<ContentIsland>>
    where
        P0: windows_core::Param<windows::UI::Composition::Compositor>,
    {
        Self::IContentIslandStatics2(|this| unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).FindAllForSystemCompositor)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                windows_core::Array::<ContentIsland>::set_abi_len(core::mem::transmute(
                    &mut result__,
                )),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        })
    }
    pub fn GetBySystemVisual<P0>(child: P0) -> windows_core::Result<ContentIsland>
    where
        P0: windows_core::Param<windows::UI::Composition::Visual>,
    {
        Self::IContentIslandStatics2(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetBySystemVisual)(
                windows_core::Interface::as_raw(this),
                child.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IContentIslandStatics<R, F: FnOnce(&IContentIslandStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ContentIsland, IContentIslandStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IContentIslandStatics2<R, F: FnOnce(&IContentIslandStatics2) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ContentIsland, IContentIslandStatics2> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeType for ContentIsland {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContentIsland>();
}
#[cfg(feature = "UI_Composition")]
unsafe impl windows_core::Interface for ContentIsland {
    type Vtable = <IContentIsland as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IContentIsland as windows_core::Interface>::IID;
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for ContentIsland {
    const NAME: &'static str = "Microsoft.UI.Content.ContentIsland";
}
#[cfg(feature = "UI_Composition")]
unsafe impl Send for ContentIsland {}
#[cfg(feature = "UI_Composition")]
unsafe impl Sync for ContentIsland {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentIslandAutomationProviderRequestedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentIslandAutomationProviderRequestedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentIslandAutomationProviderRequestedEventArgs {
    pub fn AutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationProvider)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAutomationProvider<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutomationProvider)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Handled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Handled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHandled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ContentIslandAutomationProviderRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IContentIslandAutomationProviderRequestedEventArgs,
    >();
}
unsafe impl windows_core::Interface for ContentIslandAutomationProviderRequestedEventArgs {
    type Vtable =
        <IContentIslandAutomationProviderRequestedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IContentIslandAutomationProviderRequestedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentIslandAutomationProviderRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.UI.Content.ContentIslandAutomationProviderRequestedEventArgs";
}
unsafe impl Send for ContentIslandAutomationProviderRequestedEventArgs {}
unsafe impl Sync for ContentIslandAutomationProviderRequestedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentIslandEnvironment(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentIslandEnvironment,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentIslandEnvironment {
    pub fn AppWindowId(&self) -> windows_core::Result<super::WindowId> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AppWindowId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DisplayId(&self) -> windows_core::Result<super::DisplayId> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SettingChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                ContentIslandEnvironment,
                ContentEnvironmentSettingChangedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SettingChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveSettingChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveSettingChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn StateChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                ContentIslandEnvironment,
                ContentEnvironmentStateChangedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).StateChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveStateChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveStateChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn DisplayScale(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IContentIslandEnvironment2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for ContentIslandEnvironment {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContentIslandEnvironment>();
}
unsafe impl windows_core::Interface for ContentIslandEnvironment {
    type Vtable = <IContentIslandEnvironment as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IContentIslandEnvironment as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentIslandEnvironment {
    const NAME: &'static str = "Microsoft.UI.Content.ContentIslandEnvironment";
}
unsafe impl Send for ContentIslandEnvironment {}
unsafe impl Sync for ContentIslandEnvironment {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentIslandStateChangedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentIslandStateChangedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentIslandStateChangedEventArgs {
    pub fn DidActualSizeChange(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DidActualSizeChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DidSiteEnabledChange(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DidSiteEnabledChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DidSiteVisibleChange(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DidSiteVisibleChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DidLayoutDirectionChange(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DidLayoutDirectionChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DidRasterizationScaleChange(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DidRasterizationScaleChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DidLocalToClientTransformMatrixChange(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentIslandStateChangedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DidLocalToClientTransformMatrixChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DidLocalToParentTransformMatrixChange(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentIslandStateChangedEventArgs2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DidLocalToParentTransformMatrixChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for ContentIslandStateChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContentIslandStateChangedEventArgs>();
}
unsafe impl windows_core::Interface for ContentIslandStateChangedEventArgs {
    type Vtable = <IContentIslandStateChangedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IContentIslandStateChangedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentIslandStateChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Content.ContentIslandStateChangedEventArgs";
}
unsafe impl Send for ContentIslandStateChangedEventArgs {}
unsafe impl Sync for ContentIslandStateChangedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ContentLayoutDirection(pub i32);
impl ContentLayoutDirection {
    pub const LeftToRight: Self = Self(0i32);
    pub const RightToLeft: Self = Self(1i32);
}
impl windows_core::TypeKind for ContentLayoutDirection {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ContentLayoutDirection {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Content.ContentLayoutDirection;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentSite(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentSite,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    ContentSite,
    windows::Foundation::IClosable,
    super::IClosableNotifier
);
impl ContentSite {
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn IsClosed(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsClosed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Closed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Closed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FrameworkClosed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameworkClosed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFrameworkClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFrameworkClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetActualSize(&self, value: windows_numerics::Vector2) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetActualSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ClientSize(&self) -> windows_core::Result<windows::Graphics::SizeInt32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClientSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetClientSize(&self, value: windows::Graphics::SizeInt32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetClientSize)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CoordinateConverter(&self) -> windows_core::Result<ContentCoordinateConverter> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CoordinateConverter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Environment(&self) -> windows_core::Result<ContentSiteEnvironment> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Environment)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsConnected(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsConnected)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsSiteEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSiteEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsSiteEnabled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsSiteEnabled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsSiteVisible(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSiteVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetIsSiteVisible(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetIsSiteVisible)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LayoutDirection(&self) -> windows_core::Result<ContentLayoutDirection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutDirection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLayoutDirection(&self, value: ContentLayoutDirection) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLayoutDirection)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OverrideScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OverrideScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOverrideScale(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOverrideScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetParentScale(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetParentScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RequestedSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestedSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ShouldApplyRasterizationScale(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldApplyRasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetShouldApplyRasterizationScale(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetShouldApplyRasterizationScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn View(&self) -> windows_core::Result<ContentSiteView> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).View)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetIslandStateChangeDeferral(&self) -> windows_core::Result<ContentDeferral> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetIslandStateChangeDeferral)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn RequestedStateChanged<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                ContentSite,
                ContentSiteRequestedStateChangedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestedStateChanged)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveRequestedStateChanged(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveRequestedStateChanged)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn LocalToClientTransformMatrix(
        &self,
    ) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<IContentSite2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LocalToClientTransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LocalToParentTransformMatrix(
        &self,
    ) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<IContentSite2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LocalToParentTransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetLocalToParentTransformMatrix(
        &self,
        value: windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSite2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLocalToParentTransformMatrix)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ProcessesKeyboardInput(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentSite2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesKeyboardInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetProcessesKeyboardInput(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSite2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetProcessesKeyboardInput)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ProcessesPointerInput(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentSite2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesPointerInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetProcessesPointerInput(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSite2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetProcessesPointerInput)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ContentSite {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContentSite>();
}
unsafe impl windows_core::Interface for ContentSite {
    type Vtable = <IContentSite as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IContentSite as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentSite {
    const NAME: &'static str = "Microsoft.UI.Content.ContentSite";
}
unsafe impl Send for ContentSite {}
unsafe impl Sync for ContentSite {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentSiteAutomationProviderRequestedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentSiteAutomationProviderRequestedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentSiteAutomationProviderRequestedEventArgs {
    pub fn AutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationProvider)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetAutomationProvider<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutomationProvider)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn Handled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Handled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetHandled)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ContentSiteAutomationProviderRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IContentSiteAutomationProviderRequestedEventArgs,
    >();
}
unsafe impl windows_core::Interface for ContentSiteAutomationProviderRequestedEventArgs {
    type Vtable =
        <IContentSiteAutomationProviderRequestedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IContentSiteAutomationProviderRequestedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentSiteAutomationProviderRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.UI.Content.ContentSiteAutomationProviderRequestedEventArgs";
}
unsafe impl Send for ContentSiteAutomationProviderRequestedEventArgs {}
unsafe impl Sync for ContentSiteAutomationProviderRequestedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentSiteEnvironment(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentSiteEnvironment,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentSiteEnvironment {
    pub fn AppWindowId(&self) -> windows_core::Result<super::WindowId> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AppWindowId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAppWindowId(&self, value: super::WindowId) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAppWindowId)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DisplayId(&self) -> windows_core::Result<super::DisplayId> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDisplayId(&self, value: super::DisplayId) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDisplayId)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn View(&self) -> windows_core::Result<ContentSiteEnvironmentView> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).View)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn NotifySettingChanged(
        &self,
        setting: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).NotifySettingChanged)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(setting),
            )
            .ok()
        }
    }
    pub fn DisplayScale(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IContentSiteEnvironment2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetDisplayScale(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteEnvironment2>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetDisplayScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ContentSiteEnvironment {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContentSiteEnvironment>();
}
unsafe impl windows_core::Interface for ContentSiteEnvironment {
    type Vtable = <IContentSiteEnvironment as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IContentSiteEnvironment as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentSiteEnvironment {
    const NAME: &'static str = "Microsoft.UI.Content.ContentSiteEnvironment";
}
unsafe impl Send for ContentSiteEnvironment {}
unsafe impl Sync for ContentSiteEnvironment {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentSiteEnvironmentView(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentSiteEnvironmentView,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentSiteEnvironmentView {
    pub fn AppWindowId(&self) -> windows_core::Result<super::WindowId> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AppWindowId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DisplayId(&self) -> windows_core::Result<super::DisplayId> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn DisplayScale(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IContentSiteEnvironmentView2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DisplayScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for ContentSiteEnvironmentView {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContentSiteEnvironmentView>();
}
unsafe impl windows_core::Interface for ContentSiteEnvironmentView {
    type Vtable = <IContentSiteEnvironmentView as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IContentSiteEnvironmentView as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentSiteEnvironmentView {
    const NAME: &'static str = "Microsoft.UI.Content.ContentSiteEnvironmentView";
}
unsafe impl Send for ContentSiteEnvironmentView {}
unsafe impl Sync for ContentSiteEnvironmentView {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentSiteRequestedStateChangedEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentSiteRequestedStateChangedEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentSiteRequestedStateChangedEventArgs {
    pub fn DidRequestedSizeChange(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DidRequestedSizeChange)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for ContentSiteRequestedStateChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::for_class::<
        Self,
        IContentSiteRequestedStateChangedEventArgs,
    >();
}
unsafe impl windows_core::Interface for ContentSiteRequestedStateChangedEventArgs {
    type Vtable = <IContentSiteRequestedStateChangedEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID =
        <IContentSiteRequestedStateChangedEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentSiteRequestedStateChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Content.ContentSiteRequestedStateChangedEventArgs";
}
unsafe impl Send for ContentSiteRequestedStateChangedEventArgs {}
unsafe impl Sync for ContentSiteRequestedStateChangedEventArgs {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ContentSiteView(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ContentSiteView,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ContentSiteView {
    pub fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ActualSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ClientSize(&self) -> windows_core::Result<windows::Graphics::SizeInt32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ClientSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CoordinateConverter(&self) -> windows_core::Result<ContentCoordinateConverter> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CoordinateConverter)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn EnvironmentView(&self) -> windows_core::Result<ContentSiteEnvironmentView> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).EnvironmentView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsConnected(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsConnected)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsSiteEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSiteEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsSiteVisible(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSiteVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LayoutDirection(&self) -> windows_core::Result<ContentLayoutDirection> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutDirection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn OverrideScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OverrideScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ParentScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RasterizationScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RequestedSize(&self) -> windows_core::Result<windows_numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).RequestedSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ShouldApplyRasterizationScale(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ShouldApplyRasterizationScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LocalToClientTransformMatrix(
        &self,
    ) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<IContentSiteView2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LocalToClientTransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn LocalToParentTransformMatrix(
        &self,
    ) -> windows_core::Result<windows_numerics::Matrix4x4> {
        let this = &windows_core::Interface::cast::<IContentSiteView2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LocalToParentTransformMatrix)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ProcessesKeyboardInput(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentSiteView2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesKeyboardInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn ProcessesPointerInput(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentSiteView2>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesPointerInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn AutomationOption(&self) -> windows_core::Result<ContentAutomationOptions> {
        let this = &windows_core::Interface::cast::<IContentSiteViewAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationOption)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for ContentSiteView {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IContentSiteView>();
}
unsafe impl windows_core::Interface for ContentSiteView {
    type Vtable = <IContentSiteView as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IContentSiteView as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ContentSiteView {
    const NAME: &'static str = "Microsoft.UI.Content.ContentSiteView";
}
unsafe impl Send for ContentSiteView {}
unsafe impl Sync for ContentSiteView {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ContentSizePolicy(pub i32);
impl ContentSizePolicy {
    pub const None: Self = Self(0i32);
    pub const ResizeContentToParentWindow: Self = Self(1i32);
    pub const ResizeParentWindowToContent: Self = Self(2i32);
}
impl windows_core::TypeKind for ContentSizePolicy {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ContentSizePolicy {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Content.ContentSizePolicy;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DesktopAttachedSiteBridge(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DesktopAttachedSiteBridge,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DesktopAttachedSiteBridge,
    windows::Foundation::IClosable,
    super::IClosableNotifier,
    IContentSiteBridge,
    IContentSiteInput
);
impl DesktopAttachedSiteBridge {
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn IsClosed(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsClosed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Closed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Closed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FrameworkClosed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameworkClosed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFrameworkClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFrameworkClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn LayoutDirectionOverride(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<ContentLayoutDirection>> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutDirectionOverride)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetLayoutDirectionOverride<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<ContentLayoutDirection>>,
    {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLayoutDirectionOverride)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn OverrideScale(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OverrideScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOverrideScale(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOverrideScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ProcessesKeyboardInput(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentSiteInput>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesKeyboardInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetProcessesKeyboardInput(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteInput>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetProcessesKeyboardInput)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ProcessesPointerInput(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IContentSiteInput>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesPointerInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetProcessesPointerInput(&self, value: bool) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteInput>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetProcessesPointerInput)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SiteView(&self) -> windows_core::Result<ContentSiteView> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SiteView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn WindowId(&self) -> windows_core::Result<super::WindowId> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WindowId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Connect<P0>(&self, content: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ContentIsland>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Connect)(
                windows_core::Interface::as_raw(this),
                content.param().abi(),
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn CreateFromWindowId<P0>(
        queue: P0,
        windowid: super::WindowId,
    ) -> windows_core::Result<DesktopAttachedSiteBridge>
    where
        P0: windows_core::Param<super::Dispatching::DispatcherQueue>,
    {
        Self::IDesktopAttachedSiteBridgeStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateFromWindowId)(
                windows_core::Interface::as_raw(this),
                queue.param().abi(),
                windowid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IDesktopAttachedSiteBridgeStatics<
        R,
        F: FnOnce(&IDesktopAttachedSiteBridgeStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DesktopAttachedSiteBridge,
            IDesktopAttachedSiteBridgeStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DesktopAttachedSiteBridge {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDesktopAttachedSiteBridge>();
}
unsafe impl windows_core::Interface for DesktopAttachedSiteBridge {
    type Vtable = <IDesktopAttachedSiteBridge as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDesktopAttachedSiteBridge as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DesktopAttachedSiteBridge {
    const NAME: &'static str = "Microsoft.UI.Content.DesktopAttachedSiteBridge";
}
unsafe impl Send for DesktopAttachedSiteBridge {}
unsafe impl Sync for DesktopAttachedSiteBridge {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DesktopChildSiteBridge(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DesktopChildSiteBridge,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DesktopChildSiteBridge,
    windows::Foundation::IClosable,
    super::IClosableNotifier,
    IContentSiteBridge,
    DesktopSiteBridge
);
impl DesktopChildSiteBridge {
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn IsClosed(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsClosed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Closed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Closed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FrameworkClosed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameworkClosed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFrameworkClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFrameworkClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn LayoutDirectionOverride(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<ContentLayoutDirection>> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutDirectionOverride)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetLayoutDirectionOverride<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<ContentLayoutDirection>>,
    {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLayoutDirectionOverride)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn OverrideScale(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OverrideScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOverrideScale(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOverrideScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ResizePolicy(&self) -> windows_core::Result<ContentSizePolicy> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ResizePolicy)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetResizePolicy(&self, value: ContentSizePolicy) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetResizePolicy)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SiteView(&self) -> windows_core::Result<ContentSiteView> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SiteView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Create<P0>(
        compositor: P0,
        parentwindowid: super::WindowId,
    ) -> windows_core::Result<DesktopChildSiteBridge>
    where
        P0: windows_core::Param<super::Composition::Compositor>,
    {
        Self::IDesktopChildSiteBridgeStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                compositor.param().abi(),
                parentwindowid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn CreateWithDispatcherQueue<P0>(
        queue: P0,
        parentwindowid: super::WindowId,
    ) -> windows_core::Result<DesktopChildSiteBridge>
    where
        P0: windows_core::Param<super::Dispatching::DispatcherQueue>,
    {
        Self::IDesktopChildSiteBridgeStatics2(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateWithDispatcherQueue)(
                windows_core::Interface::as_raw(this),
                queue.param().abi(),
                parentwindowid,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn WindowId(&self) -> windows_core::Result<super::WindowId> {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WindowId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Connect<P0>(&self, content: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ContentIsland>,
    {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Connect)(
                windows_core::Interface::as_raw(this),
                content.param().abi(),
            )
            .ok()
        }
    }
    pub fn Disable(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Disable)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Enable(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Enable)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Hide(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Hide)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    pub fn MoveAndResize(&self, rect: windows::Graphics::RectInt32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).MoveAndResize)(
                windows_core::Interface::as_raw(this),
                rect,
            )
            .ok()
        }
    }
    pub fn MoveInZOrderAtBottom(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).MoveInZOrderAtBottom)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn MoveInZOrderAtTop(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).MoveInZOrderAtTop)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn MoveInZOrderBelow(&self, windowid: super::WindowId) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).MoveInZOrderBelow)(
                windows_core::Interface::as_raw(this),
                windowid,
            )
            .ok()
        }
    }
    pub fn Show(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IDesktopSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Show)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    fn IDesktopChildSiteBridgeStatics<
        R,
        F: FnOnce(&IDesktopChildSiteBridgeStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DesktopChildSiteBridge,
            IDesktopChildSiteBridgeStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IDesktopChildSiteBridgeStatics2<
        R,
        F: FnOnce(&IDesktopChildSiteBridgeStatics2) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DesktopChildSiteBridge,
            IDesktopChildSiteBridgeStatics2,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DesktopChildSiteBridge {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDesktopChildSiteBridge>();
}
unsafe impl windows_core::Interface for DesktopChildSiteBridge {
    type Vtable = <IDesktopChildSiteBridge as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDesktopChildSiteBridge as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DesktopChildSiteBridge {
    const NAME: &'static str = "Microsoft.UI.Content.DesktopChildSiteBridge";
}
unsafe impl Send for DesktopChildSiteBridge {}
unsafe impl Sync for DesktopChildSiteBridge {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DesktopPopupSiteBridge(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DesktopPopupSiteBridge,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DesktopPopupSiteBridge,
    windows::Foundation::IClosable,
    super::IClosableNotifier,
    IContentSiteAutomation,
    IContentSiteBridge,
    IContentSiteLink
);
impl DesktopPopupSiteBridge {
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn IsClosed(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsClosed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Closed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Closed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FrameworkClosed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameworkClosed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFrameworkClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFrameworkClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn AutomationOption(&self) -> windows_core::Result<ContentAutomationOptions> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationOption)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutomationOption(&self, value: ContentAutomationOptions) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutomationOption)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationProvider)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FragmentRootAutomationProviderRequested<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FragmentRootAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFragmentRootAutomationProviderRequested(
        &self,
        token: i64,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFragmentRootAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn NextSiblingAutomationProviderRequested<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NextSiblingAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNextSiblingAutomationProviderRequested(
        &self,
        token: i64,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNextSiblingAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ParentAutomationProviderRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveParentAutomationProviderRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveParentAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn PreviousSiblingAutomationProviderRequested<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PreviousSiblingAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePreviousSiblingAutomationProviderRequested(
        &self,
        token: i64,
    ) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteAutomation>(self)?;
        unsafe {
            ( windows_core::Interface::vtable ( this ) . RemovePreviousSiblingAutomationProviderRequested ) ( windows_core::Interface::as_raw ( this ) , token , ) . ok ( )
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn LayoutDirectionOverride(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<ContentLayoutDirection>> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutDirectionOverride)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetLayoutDirectionOverride<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<ContentLayoutDirection>>,
    {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLayoutDirectionOverride)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn OverrideScale(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OverrideScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOverrideScale(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOverrideScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Parent(&self) -> windows_core::Result<ContentIsland> {
        let this = &windows_core::Interface::cast::<IContentSiteLink>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SiteView(&self) -> windows_core::Result<ContentSiteView> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).SiteView)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn WindowId(&self) -> windows_core::Result<super::WindowId> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WindowId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Connect<P0>(&self, content: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ContentIsland>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Connect)(
                windows_core::Interface::as_raw(this),
                content.param().abi(),
            )
            .ok()
        }
    }
    pub fn Disable(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Disable)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Enable(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Enable)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Hide(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Hide)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    pub fn MoveAndResize(&self, rect: windows::Graphics::RectInt32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).MoveAndResize)(
                windows_core::Interface::as_raw(this),
                rect,
            )
            .ok()
        }
    }
    pub fn MoveInZOrderAtBottom(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).MoveInZOrderAtBottom)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn MoveInZOrderAtTop(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).MoveInZOrderAtTop)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn MoveInZOrderBelow(&self, windowid: super::WindowId) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).MoveInZOrderBelow)(
                windows_core::Interface::as_raw(this),
                windowid,
            )
            .ok()
        }
    }
    pub fn Show(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Show)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Create<P0>(parent: P0) -> windows_core::Result<DesktopPopupSiteBridge>
    where
        P0: windows_core::Param<ContentIsland>,
    {
        Self::IDesktopPopupSiteBridgeStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Create)(
                windows_core::Interface::as_raw(this),
                parent.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IDesktopPopupSiteBridgeStatics<
        R,
        F: FnOnce(&IDesktopPopupSiteBridgeStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DesktopPopupSiteBridge,
            IDesktopPopupSiteBridgeStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DesktopPopupSiteBridge {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDesktopPopupSiteBridge>();
}
unsafe impl windows_core::Interface for DesktopPopupSiteBridge {
    type Vtable = <IDesktopPopupSiteBridge as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDesktopPopupSiteBridge as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DesktopPopupSiteBridge {
    const NAME: &'static str = "Microsoft.UI.Content.DesktopPopupSiteBridge";
}
unsafe impl Send for DesktopPopupSiteBridge {}
unsafe impl Sync for DesktopPopupSiteBridge {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct DesktopSiteBridge(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    DesktopSiteBridge,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(
    DesktopSiteBridge,
    windows::Foundation::IClosable,
    super::IClosableNotifier,
    IContentSiteBridge
);
impl DesktopSiteBridge {
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn IsClosed(&self) -> windows_core::Result<bool> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsClosed)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn Closed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Closed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FrameworkClosed<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::ClosableNotifierHandler>,
    {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FrameworkClosed)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFrameworkClosed(&self, token: i64) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<super::IClosableNotifier>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFrameworkClosed)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn LayoutDirectionOverride(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<ContentLayoutDirection>> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutDirectionOverride)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetLayoutDirectionOverride<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<ContentLayoutDirection>>,
    {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetLayoutDirectionOverride)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn OverrideScale(&self) -> windows_core::Result<f32> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OverrideScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOverrideScale(&self, value: f32) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<IContentSiteBridge>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).SetOverrideScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsEnabled)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn IsVisible(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsVisible)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn WindowId(&self) -> windows_core::Result<super::WindowId> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).WindowId)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    #[cfg(feature = "UI_Composition")]
    pub fn Connect<P0>(&self, content: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ContentIsland>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Connect)(
                windows_core::Interface::as_raw(this),
                content.param().abi(),
            )
            .ok()
        }
    }
    pub fn Disable(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Disable)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Enable(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Enable)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Hide(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Hide)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    pub fn MoveAndResize(&self, rect: windows::Graphics::RectInt32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).MoveAndResize)(
                windows_core::Interface::as_raw(this),
                rect,
            )
            .ok()
        }
    }
    pub fn MoveInZOrderAtBottom(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).MoveInZOrderAtBottom)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn MoveInZOrderAtTop(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).MoveInZOrderAtTop)(
                windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn MoveInZOrderBelow(&self, windowid: super::WindowId) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).MoveInZOrderBelow)(
                windows_core::Interface::as_raw(this),
                windowid,
            )
            .ok()
        }
    }
    pub fn Show(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Show)(windows_core::Interface::as_raw(this)).ok()
        }
    }
    pub fn IsSupported() -> windows_core::Result<bool> {
        Self::IDesktopSiteBridgeStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).IsSupported)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        })
    }
    fn IDesktopSiteBridgeStatics<
        R,
        F: FnOnce(&IDesktopSiteBridgeStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            DesktopSiteBridge,
            IDesktopSiteBridgeStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for DesktopSiteBridge {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IDesktopSiteBridge>();
}
unsafe impl windows_core::Interface for DesktopSiteBridge {
    type Vtable = <IDesktopSiteBridge as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IDesktopSiteBridge as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for DesktopSiteBridge {
    const NAME: &'static str = "Microsoft.UI.Content.DesktopSiteBridge";
}
unsafe impl Send for DesktopSiteBridge {}
unsafe impl Sync for DesktopSiteBridge {}
windows_core::imp::define_interface!(
    IChildSiteLink,
    IChildSiteLink_Vtbl,
    0xb5a64814_608b_5fb7_a7cb_eb628fd588cd
);
impl windows_core::RuntimeType for IChildSiteLink {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Dispatching"))]
impl windows_core::RuntimeName for IChildSiteLink {
    const NAME: &'static str = "Microsoft.UI.Content.IChildSiteLink";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Dispatching"))]
pub trait IChildSiteLink_Impl: windows_core::IUnknownImpl {
    fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetActualSize(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue>;
    fn LocalToParentTransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4>;
    fn SetLocalToParentTransformMatrix(
        &self,
        value: &windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()>;
    fn SiteView(&self) -> windows_core::Result<ContentSiteView>;
    fn Connect(&self, content: windows_core::Ref<'_, ContentIsland>) -> windows_core::Result<()>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Dispatching"))]
impl IChildSiteLink_Vtbl {
    pub const fn new<Identity: IChildSiteLink_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ActualSize<Identity: IChildSiteLink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IChildSiteLink_Impl::ActualSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetActualSize<
            Identity: IChildSiteLink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IChildSiteLink_Impl::SetActualSize(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn DispatcherQueue<
            Identity: IChildSiteLink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IChildSiteLink_Impl::DispatcherQueue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LocalToParentTransformMatrix<
            Identity: IChildSiteLink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IChildSiteLink_Impl::LocalToParentTransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLocalToParentTransformMatrix<
            Identity: IChildSiteLink_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IChildSiteLink_Impl::SetLocalToParentTransformMatrix(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn SiteView<Identity: IChildSiteLink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IChildSiteLink_Impl::SiteView(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Connect<Identity: IChildSiteLink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            content: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IChildSiteLink_Impl::Connect(this, core::mem::transmute_copy(&content)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IChildSiteLink, OFFSET>(),
            ActualSize: ActualSize::<Identity, OFFSET>,
            SetActualSize: SetActualSize::<Identity, OFFSET>,
            DispatcherQueue: DispatcherQueue::<Identity, OFFSET>,
            LocalToParentTransformMatrix: LocalToParentTransformMatrix::<Identity, OFFSET>,
            SetLocalToParentTransformMatrix: SetLocalToParentTransformMatrix::<Identity, OFFSET>,
            SiteView: SiteView::<Identity, OFFSET>,
            Connect: Connect::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IChildSiteLink as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IChildSiteLink_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ActualSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetActualSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    DispatcherQueue: usize,
    pub LocalToParentTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub SetLocalToParentTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub SiteView: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub Connect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Connect: usize,
}
windows_core::imp::define_interface!(
    IChildSiteLinkStatics,
    IChildSiteLinkStatics_Vtbl,
    0x28edc98a_4f94_50b1_8a87_9e7169ebf4b7
);
impl windows_core::RuntimeType for IChildSiteLinkStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IChildSiteLinkStatics {
    const NAME: &'static str = "Microsoft.UI.Content.IChildSiteLinkStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait IChildSiteLinkStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        parent: windows_core::Ref<'_, ContentIsland>,
        placementVisual: windows_core::Ref<'_, super::Composition::ContainerVisual>,
    ) -> windows_core::Result<ChildSiteLink>;
    fn CreateForSystemVisual(
        &self,
        parent: windows_core::Ref<'_, ContentIsland>,
        placementVisual: windows_core::Ref<'_, windows::UI::Composition::ContainerVisual>,
    ) -> windows_core::Result<ChildSiteLink>;
}
#[cfg(feature = "UI_Composition")]
impl IChildSiteLinkStatics_Vtbl {
    pub const fn new<Identity: IChildSiteLinkStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Create<
            Identity: IChildSiteLinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            parent: *mut core::ffi::c_void,
            placementvisual: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IChildSiteLinkStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&parent),
                    core::mem::transmute_copy(&placementvisual),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateForSystemVisual<
            Identity: IChildSiteLinkStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            parent: *mut core::ffi::c_void,
            placementvisual: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IChildSiteLinkStatics_Impl::CreateForSystemVisual(
                    this,
                    core::mem::transmute_copy(&parent),
                    core::mem::transmute_copy(&placementvisual),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IChildSiteLinkStatics, OFFSET>(
            ),
            Create: Create::<Identity, OFFSET>,
            CreateForSystemVisual: CreateForSystemVisual::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IChildSiteLinkStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IChildSiteLinkStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Create: usize,
    #[cfg(feature = "UI_Composition")]
    pub CreateForSystemVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    CreateForSystemVisual: usize,
}
windows_core::imp::define_interface!(
    IContentCoordinateConverter,
    IContentCoordinateConverter_Vtbl,
    0x10a11230_5eb4_5840_a346_570f4a49040f
);
impl windows_core::RuntimeType for IContentCoordinateConverter {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentCoordinateConverter {
    const NAME: &'static str = "Microsoft.UI.Content.IContentCoordinateConverter";
}
pub trait IContentCoordinateConverter_Impl: windows_core::IUnknownImpl {
    fn ConvertLocalToScreenWithPoint(
        &self,
        localPoint: &windows::Foundation::Point,
    ) -> windows_core::Result<windows::Graphics::PointInt32>;
    fn ConvertLocalToScreenWithPoints(
        &self,
        localPoints: &[windows::Foundation::Point],
    ) -> windows_core::Result<windows_core::Array<windows::Graphics::PointInt32>>;
    fn ConvertLocalToScreenWithPointsAndRoundingMode(
        &self,
        localPoints: &[windows::Foundation::Point],
        roundingMode: ContentCoordinateRoundingMode,
    ) -> windows_core::Result<windows_core::Array<windows::Graphics::PointInt32>>;
    fn ConvertLocalToScreenWithRect(
        &self,
        localRect: &windows::Foundation::Rect,
    ) -> windows_core::Result<windows::Graphics::RectInt32>;
    fn ConvertScreenToLocalWithPoint(
        &self,
        screenPoint: &windows::Graphics::PointInt32,
    ) -> windows_core::Result<windows::Foundation::Point>;
    fn ConvertScreenToLocalWithPoints(
        &self,
        screenPoints: &[windows::Graphics::PointInt32],
    ) -> windows_core::Result<windows_core::Array<windows::Foundation::Point>>;
    fn ConvertScreenToLocalWithRect(
        &self,
        screenRect: &windows::Graphics::RectInt32,
    ) -> windows_core::Result<windows::Foundation::Rect>;
}
impl IContentCoordinateConverter_Vtbl {
    pub const fn new<Identity: IContentCoordinateConverter_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ConvertLocalToScreenWithPoint<
            Identity: IContentCoordinateConverter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            localpoint: windows::Foundation::Point,
            result__: *mut windows::Graphics::PointInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentCoordinateConverter_Impl::ConvertLocalToScreenWithPoint(
                    this,
                    core::mem::transmute(&localpoint),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ConvertLocalToScreenWithPoints<
            Identity: IContentCoordinateConverter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            localpoints_array_size: u32,
            localpoints: *const windows::Foundation::Point,
            result_size__: *mut u32,
            result__: *mut *mut windows::Graphics::PointInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentCoordinateConverter_Impl::ConvertLocalToScreenWithPoints(
                    this,
                    core::slice::from_raw_parts(
                        core::mem::transmute_copy(&localpoints),
                        localpoints_array_size as usize,
                    ),
                ) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ConvertLocalToScreenWithPointsAndRoundingMode<
            Identity: IContentCoordinateConverter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            localpoints_array_size: u32,
            localpoints: *const windows::Foundation::Point,
            roundingmode: ContentCoordinateRoundingMode,
            result_size__: *mut u32,
            result__: *mut *mut windows::Graphics::PointInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentCoordinateConverter_Impl:: ConvertLocalToScreenWithPointsAndRoundingMode ( this , core::slice::from_raw_parts ( core::mem::transmute_copy ( & localpoints ) , localpoints_array_size as usize ) , roundingmode , ) { Ok ( ok__ ) => { let ( ok_data__ , ok_data_len__ ) = ok__ . into_abi ( ) ; result__ . write ( core::mem::transmute ( ok_data__ ) ) ; result_size__ . write ( ok_data_len__ ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        unsafe extern "system" fn ConvertLocalToScreenWithRect<
            Identity: IContentCoordinateConverter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            localrect: windows::Foundation::Rect,
            result__: *mut windows::Graphics::RectInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentCoordinateConverter_Impl::ConvertLocalToScreenWithRect(
                    this,
                    core::mem::transmute(&localrect),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ConvertScreenToLocalWithPoint<
            Identity: IContentCoordinateConverter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            screenpoint: windows::Graphics::PointInt32,
            result__: *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentCoordinateConverter_Impl::ConvertScreenToLocalWithPoint(
                    this,
                    core::mem::transmute(&screenpoint),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ConvertScreenToLocalWithPoints<
            Identity: IContentCoordinateConverter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            screenpoints_array_size: u32,
            screenpoints: *const windows::Graphics::PointInt32,
            result_size__: *mut u32,
            result__: *mut *mut windows::Foundation::Point,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentCoordinateConverter_Impl::ConvertScreenToLocalWithPoints(
                    this,
                    core::slice::from_raw_parts(
                        core::mem::transmute_copy(&screenpoints),
                        screenpoints_array_size as usize,
                    ),
                ) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ConvertScreenToLocalWithRect<
            Identity: IContentCoordinateConverter_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            screenrect: windows::Graphics::RectInt32,
            result__: *mut windows::Foundation::Rect,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentCoordinateConverter_Impl::ConvertScreenToLocalWithRect(
                    this,
                    core::mem::transmute(&screenrect),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentCoordinateConverter,
                OFFSET,
            >(),
            ConvertLocalToScreenWithPoint: ConvertLocalToScreenWithPoint::<Identity, OFFSET>,
            ConvertLocalToScreenWithPoints: ConvertLocalToScreenWithPoints::<Identity, OFFSET>,
            ConvertLocalToScreenWithPointsAndRoundingMode:
                ConvertLocalToScreenWithPointsAndRoundingMode::<Identity, OFFSET>,
            ConvertLocalToScreenWithRect: ConvertLocalToScreenWithRect::<Identity, OFFSET>,
            ConvertScreenToLocalWithPoint: ConvertScreenToLocalWithPoint::<Identity, OFFSET>,
            ConvertScreenToLocalWithPoints: ConvertScreenToLocalWithPoints::<Identity, OFFSET>,
            ConvertScreenToLocalWithRect: ConvertScreenToLocalWithRect::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentCoordinateConverter as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentCoordinateConverter_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ConvertLocalToScreenWithPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Point,
        *mut windows::Graphics::PointInt32,
    ) -> windows_core::HRESULT,
    pub ConvertLocalToScreenWithPoints: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const windows::Foundation::Point,
        *mut u32,
        *mut *mut windows::Graphics::PointInt32,
    ) -> windows_core::HRESULT,
    pub ConvertLocalToScreenWithPointsAndRoundingMode:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *const windows::Foundation::Point,
            ContentCoordinateRoundingMode,
            *mut u32,
            *mut *mut windows::Graphics::PointInt32,
        ) -> windows_core::HRESULT,
    pub ConvertLocalToScreenWithRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Foundation::Rect,
        *mut windows::Graphics::RectInt32,
    ) -> windows_core::HRESULT,
    pub ConvertScreenToLocalWithPoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::PointInt32,
        *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub ConvertScreenToLocalWithPoints: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const windows::Graphics::PointInt32,
        *mut u32,
        *mut *mut windows::Foundation::Point,
    ) -> windows_core::HRESULT,
    pub ConvertScreenToLocalWithRect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::RectInt32,
        *mut windows::Foundation::Rect,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentCoordinateConverterFactory,
    IContentCoordinateConverterFactory_Vtbl,
    0xa4b216ee_0e26_56bd_9209_a75cf9d80f27
);
impl windows_core::RuntimeType for IContentCoordinateConverterFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentCoordinateConverterFactory {
    const NAME: &'static str = "Microsoft.UI.Content.IContentCoordinateConverterFactory";
}
pub trait IContentCoordinateConverterFactory_Impl: windows_core::IUnknownImpl {}
impl IContentCoordinateConverterFactory_Vtbl {
    pub const fn new<Identity: IContentCoordinateConverterFactory_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentCoordinateConverterFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentCoordinateConverterFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentCoordinateConverterFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IContentCoordinateConverterStatics,
    IContentCoordinateConverterStatics_Vtbl,
    0xf56374ce_b6df_5b42_a58f_4e3bb039e3a9
);
impl windows_core::RuntimeType for IContentCoordinateConverterStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentCoordinateConverterStatics {
    const NAME: &'static str = "Microsoft.UI.Content.IContentCoordinateConverterStatics";
}
pub trait IContentCoordinateConverterStatics_Impl: windows_core::IUnknownImpl {
    fn CreateForWindowId(
        &self,
        windowId: &super::WindowId,
    ) -> windows_core::Result<ContentCoordinateConverter>;
}
impl IContentCoordinateConverterStatics_Vtbl {
    pub const fn new<Identity: IContentCoordinateConverterStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn CreateForWindowId<
            Identity: IContentCoordinateConverterStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            windowid: super::WindowId,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentCoordinateConverterStatics_Impl::CreateForWindowId(
                    this,
                    core::mem::transmute(&windowid),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentCoordinateConverterStatics,
                OFFSET,
            >(),
            CreateForWindowId: CreateForWindowId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentCoordinateConverterStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentCoordinateConverterStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateForWindowId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::WindowId,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentDeferral,
    IContentDeferral_Vtbl,
    0x470529f5_cd93_599b_968e_f8a689bc3a07
);
impl windows_core::RuntimeType for IContentDeferral {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentDeferral {
    const NAME: &'static str = "Microsoft.UI.Content.IContentDeferral";
}
pub trait IContentDeferral_Impl: windows_core::IUnknownImpl {
    fn Complete(&self) -> windows_core::Result<()>;
}
impl IContentDeferral_Vtbl {
    pub const fn new<Identity: IContentDeferral_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Complete<Identity: IContentDeferral_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentDeferral_Impl::Complete(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentDeferral, OFFSET>(),
            Complete: Complete::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentDeferral as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentDeferral_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Complete: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentEnvironmentSettingChangedEventArgs,
    IContentEnvironmentSettingChangedEventArgs_Vtbl,
    0x76478051_fc80_5eec_a3f3_62606abe06b7
);
impl windows_core::RuntimeType for IContentEnvironmentSettingChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentEnvironmentSettingChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Content.IContentEnvironmentSettingChangedEventArgs";
}
pub trait IContentEnvironmentSettingChangedEventArgs_Impl: windows_core::IUnknownImpl {
    fn SettingName(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl IContentEnvironmentSettingChangedEventArgs_Vtbl {
    pub const fn new<
        Identity: IContentEnvironmentSettingChangedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn SettingName<
            Identity: IContentEnvironmentSettingChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentEnvironmentSettingChangedEventArgs_Impl::SettingName(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentEnvironmentSettingChangedEventArgs,
                OFFSET,
            >(),
            SettingName: SettingName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentEnvironmentSettingChangedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentEnvironmentSettingChangedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SettingName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentEnvironmentStateChangedEventArgs,
    IContentEnvironmentStateChangedEventArgs_Vtbl,
    0x8970fa4f_10ba_5f67_970b_8c72bc009b67
);
impl windows_core::RuntimeType for IContentEnvironmentStateChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentEnvironmentStateChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Content.IContentEnvironmentStateChangedEventArgs";
}
pub trait IContentEnvironmentStateChangedEventArgs_Impl: windows_core::IUnknownImpl {
    fn DidAppWindowIdChange(&self) -> windows_core::Result<bool>;
    fn DidDisplayIdChange(&self) -> windows_core::Result<bool>;
}
impl IContentEnvironmentStateChangedEventArgs_Vtbl {
    pub const fn new<
        Identity: IContentEnvironmentStateChangedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn DidAppWindowIdChange<
            Identity: IContentEnvironmentStateChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentEnvironmentStateChangedEventArgs_Impl::DidAppWindowIdChange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DidDisplayIdChange<
            Identity: IContentEnvironmentStateChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentEnvironmentStateChangedEventArgs_Impl::DidDisplayIdChange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentEnvironmentStateChangedEventArgs,
                OFFSET,
            >(),
            DidAppWindowIdChange: DidAppWindowIdChange::<Identity, OFFSET>,
            DidDisplayIdChange: DidDisplayIdChange::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentEnvironmentStateChangedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentEnvironmentStateChangedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DidAppWindowIdChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub DidDisplayIdChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentEnvironmentStateChangedEventArgs2,
    IContentEnvironmentStateChangedEventArgs2_Vtbl,
    0xcec0497d_76c7_544b_bf6e_816c9b16c99f
);
impl windows_core::RuntimeType for IContentEnvironmentStateChangedEventArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentEnvironmentStateChangedEventArgs2 {
    const NAME: &'static str = "Microsoft.UI.Content.IContentEnvironmentStateChangedEventArgs2";
}
pub trait IContentEnvironmentStateChangedEventArgs2_Impl: windows_core::IUnknownImpl {
    fn DidDisplayScaleChange(&self) -> windows_core::Result<bool>;
}
impl IContentEnvironmentStateChangedEventArgs2_Vtbl {
    pub const fn new<
        Identity: IContentEnvironmentStateChangedEventArgs2_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn DidDisplayScaleChange<
            Identity: IContentEnvironmentStateChangedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentEnvironmentStateChangedEventArgs2_Impl::DidDisplayScaleChange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentEnvironmentStateChangedEventArgs2,
                OFFSET,
            >(),
            DidDisplayScaleChange: DidDisplayScaleChange::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentEnvironmentStateChangedEventArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentEnvironmentStateChangedEventArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DidDisplayScaleChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentIsland,
    IContentIsland_Vtbl,
    0x5b2504ba_361c_50aa_bd6e_4122c6d93889
);
impl windows_core::RuntimeType for IContentIsland {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Dispatching"))]
impl windows_core::RuntimeName for IContentIsland {
    const NAME: &'static str = "Microsoft.UI.Content.IContentIsland";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Dispatching"))]
pub trait IContentIsland_Impl: windows_core::IUnknownImpl {
    fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn AppData(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetAppData(
        &self,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn CoordinateConverter(&self) -> windows_core::Result<ContentCoordinateConverter>;
    fn CustomProperties(
        &self,
    ) -> windows_core::Result<windows::Foundation::Collections::IPropertySet>;
    fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue>;
    fn Environment(&self) -> windows_core::Result<ContentIslandEnvironment>;
    fn Id(&self) -> windows_core::Result<u64>;
    fn IsConnected(&self) -> windows_core::Result<bool>;
    fn IsHitTestVisibleWhenTransparent(&self) -> windows_core::Result<bool>;
    fn SetIsHitTestVisibleWhenTransparent(&self, value: bool) -> windows_core::Result<()>;
    fn IsIslandEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsIslandEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsIslandVisible(&self) -> windows_core::Result<bool>;
    fn SetIsIslandVisible(&self, value: bool) -> windows_core::Result<()>;
    fn IsSiteEnabled(&self) -> windows_core::Result<bool>;
    fn IsSiteVisible(&self) -> windows_core::Result<bool>;
    fn LayoutDirection(&self) -> windows_core::Result<ContentLayoutDirection>;
    fn RasterizationScale(&self) -> windows_core::Result<f32>;
    fn GetAutomationHostProvider(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn GetStateChangeDeferral(&self) -> windows_core::Result<ContentDeferral>;
    fn RequestSize(&self, size: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn AutomationProviderRequested(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                ContentIsland,
                ContentIslandAutomationProviderRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveAutomationProviderRequested(&self, token: i64) -> windows_core::Result<()>;
    fn StateChanged(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                ContentIsland,
                ContentIslandStateChangedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveStateChanged(&self, token: i64) -> windows_core::Result<()>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Dispatching"))]
impl IContentIsland_Vtbl {
    pub const fn new<Identity: IContentIsland_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ActualSize<Identity: IContentIsland_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::ActualSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn AppData<Identity: IContentIsland_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::AppData(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAppData<Identity: IContentIsland_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentIsland_Impl::SetAppData(this, core::mem::transmute_copy(&value)).into()
            }
        }
        unsafe extern "system" fn CoordinateConverter<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::CoordinateConverter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CustomProperties<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::CustomProperties(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DispatcherQueue<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::DispatcherQueue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Environment<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::Environment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Id<Identity: IContentIsland_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut u64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::Id(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsConnected<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::IsConnected(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsHitTestVisibleWhenTransparent<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::IsHitTestVisibleWhenTransparent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsHitTestVisibleWhenTransparent<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentIsland_Impl::SetIsHitTestVisibleWhenTransparent(this, value).into()
            }
        }
        unsafe extern "system" fn IsIslandEnabled<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::IsIslandEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsIslandEnabled<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentIsland_Impl::SetIsIslandEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsIslandVisible<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::IsIslandVisible(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsIslandVisible<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentIsland_Impl::SetIsIslandVisible(this, value).into()
            }
        }
        unsafe extern "system" fn IsSiteEnabled<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::IsSiteEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsSiteVisible<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::IsSiteVisible(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LayoutDirection<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut ContentLayoutDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::LayoutDirection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RasterizationScale<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::RasterizationScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetAutomationHostProvider<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::GetAutomationHostProvider(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStateChangeDeferral<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::GetStateChangeDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RequestSize<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            size: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentIsland_Impl::RequestSize(this, core::mem::transmute(&size)).into()
            }
        }
        unsafe extern "system" fn AutomationProviderRequested<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::AutomationProviderRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveAutomationProviderRequested<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentIsland_Impl::RemoveAutomationProviderRequested(this, token).into()
            }
        }
        unsafe extern "system" fn StateChanged<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland_Impl::StateChanged(this, core::mem::transmute_copy(&handler)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveStateChanged<
            Identity: IContentIsland_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentIsland_Impl::RemoveStateChanged(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentIsland, OFFSET>(),
            ActualSize: ActualSize::<Identity, OFFSET>,
            AppData: AppData::<Identity, OFFSET>,
            SetAppData: SetAppData::<Identity, OFFSET>,
            CoordinateConverter: CoordinateConverter::<Identity, OFFSET>,
            CustomProperties: CustomProperties::<Identity, OFFSET>,
            DispatcherQueue: DispatcherQueue::<Identity, OFFSET>,
            Environment: Environment::<Identity, OFFSET>,
            Id: Id::<Identity, OFFSET>,
            IsConnected: IsConnected::<Identity, OFFSET>,
            IsHitTestVisibleWhenTransparent: IsHitTestVisibleWhenTransparent::<Identity, OFFSET>,
            SetIsHitTestVisibleWhenTransparent: SetIsHitTestVisibleWhenTransparent::<
                Identity,
                OFFSET,
            >,
            IsIslandEnabled: IsIslandEnabled::<Identity, OFFSET>,
            SetIsIslandEnabled: SetIsIslandEnabled::<Identity, OFFSET>,
            IsIslandVisible: IsIslandVisible::<Identity, OFFSET>,
            SetIsIslandVisible: SetIsIslandVisible::<Identity, OFFSET>,
            IsSiteEnabled: IsSiteEnabled::<Identity, OFFSET>,
            IsSiteVisible: IsSiteVisible::<Identity, OFFSET>,
            LayoutDirection: LayoutDirection::<Identity, OFFSET>,
            RasterizationScale: RasterizationScale::<Identity, OFFSET>,
            GetAutomationHostProvider: GetAutomationHostProvider::<Identity, OFFSET>,
            GetStateChangeDeferral: GetStateChangeDeferral::<Identity, OFFSET>,
            RequestSize: RequestSize::<Identity, OFFSET>,
            AutomationProviderRequested: AutomationProviderRequested::<Identity, OFFSET>,
            RemoveAutomationProviderRequested: RemoveAutomationProviderRequested::<Identity, OFFSET>,
            StateChanged: StateChanged::<Identity, OFFSET>,
            RemoveStateChanged: RemoveStateChanged::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIsland as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIsland_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ActualSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub AppData: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetAppData: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CoordinateConverter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CustomProperties: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    DispatcherQueue: usize,
    pub Environment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Id: unsafe extern "system" fn(*mut core::ffi::c_void, *mut u64) -> windows_core::HRESULT,
    pub IsConnected:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsHitTestVisibleWhenTransparent:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsHitTestVisibleWhenTransparent:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsIslandEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsIslandEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsIslandVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsIslandVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsSiteEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsSiteVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub LayoutDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut ContentLayoutDirection,
    ) -> windows_core::HRESULT,
    pub RasterizationScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub GetAutomationHostProvider: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStateChangeDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RequestSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub AutomationProviderRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    AutomationProviderRequested: usize,
    pub RemoveAutomationProviderRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub StateChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    StateChanged: usize,
    pub RemoveStateChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentIsland2,
    IContentIsland2_Vtbl,
    0x9f891825_4f83_5ada_9ebd_9d329460aede
);
impl windows_core::RuntimeType for IContentIsland2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentIsland2 {
    const NAME: &'static str = "Microsoft.UI.Content.IContentIsland2";
}
pub trait IContentIsland2_Impl: windows_core::IUnknownImpl {
    fn Children(&self) -> windows_core::Result<windows_collections::IIterable<ChildSiteLink>>;
    fn LocalToClientTransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4>;
    fn LocalToParentTransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4>;
    fn Popups(
        &self,
    ) -> windows_core::Result<windows_collections::IIterable<DesktopPopupSiteBridge>>;
    fn ProcessesKeyboardInput(&self) -> windows_core::Result<bool>;
    fn ProcessesPointerInput(&self) -> windows_core::Result<bool>;
}
impl IContentIsland2_Vtbl {
    pub const fn new<Identity: IContentIsland2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Children<Identity: IContentIsland2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland2_Impl::Children(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LocalToClientTransformMatrix<
            Identity: IContentIsland2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland2_Impl::LocalToClientTransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LocalToParentTransformMatrix<
            Identity: IContentIsland2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland2_Impl::LocalToParentTransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Popups<Identity: IContentIsland2_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland2_Impl::Popups(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ProcessesKeyboardInput<
            Identity: IContentIsland2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland2_Impl::ProcessesKeyboardInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ProcessesPointerInput<
            Identity: IContentIsland2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIsland2_Impl::ProcessesPointerInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentIsland2, OFFSET>(),
            Children: Children::<Identity, OFFSET>,
            LocalToClientTransformMatrix: LocalToClientTransformMatrix::<Identity, OFFSET>,
            LocalToParentTransformMatrix: LocalToParentTransformMatrix::<Identity, OFFSET>,
            Popups: Popups::<Identity, OFFSET>,
            ProcessesKeyboardInput: ProcessesKeyboardInput::<Identity, OFFSET>,
            ProcessesPointerInput: ProcessesPointerInput::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIsland2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIsland2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Children: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LocalToClientTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub LocalToParentTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub Popups: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ProcessesKeyboardInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub ProcessesPointerInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentIslandAutomation,
    IContentIslandAutomation_Vtbl,
    0x8752c11e_1896_565a_bfb0_2b0770030e97
);
impl windows_core::RuntimeType for IContentIslandAutomation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentIslandAutomation {
    const NAME: &'static str = "Microsoft.UI.Content.IContentIslandAutomation";
}
pub trait IContentIslandAutomation_Impl: windows_core::IUnknownImpl {
    fn AutomationOption(&self) -> windows_core::Result<ContentAutomationOptions>;
    fn FragmentRootAutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn NextSiblingAutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn ParentAutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn PreviousSiblingAutomationProvider(&self)
        -> windows_core::Result<windows_core::IInspectable>;
}
impl IContentIslandAutomation_Vtbl {
    pub const fn new<Identity: IContentIslandAutomation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AutomationOption<
            Identity: IContentIslandAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut ContentAutomationOptions,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandAutomation_Impl::AutomationOption(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FragmentRootAutomationProvider<
            Identity: IContentIslandAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandAutomation_Impl::FragmentRootAutomationProvider(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NextSiblingAutomationProvider<
            Identity: IContentIslandAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandAutomation_Impl::NextSiblingAutomationProvider(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ParentAutomationProvider<
            Identity: IContentIslandAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandAutomation_Impl::ParentAutomationProvider(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PreviousSiblingAutomationProvider<
            Identity: IContentIslandAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandAutomation_Impl::PreviousSiblingAutomationProvider(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentIslandAutomation,
                OFFSET,
            >(),
            AutomationOption: AutomationOption::<Identity, OFFSET>,
            FragmentRootAutomationProvider: FragmentRootAutomationProvider::<Identity, OFFSET>,
            NextSiblingAutomationProvider: NextSiblingAutomationProvider::<Identity, OFFSET>,
            ParentAutomationProvider: ParentAutomationProvider::<Identity, OFFSET>,
            PreviousSiblingAutomationProvider: PreviousSiblingAutomationProvider::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIslandAutomation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIslandAutomation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AutomationOption: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut ContentAutomationOptions,
    ) -> windows_core::HRESULT,
    pub FragmentRootAutomationProvider: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NextSiblingAutomationProvider: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ParentAutomationProvider: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PreviousSiblingAutomationProvider: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentIslandAutomationProviderRequestedEventArgs,
    IContentIslandAutomationProviderRequestedEventArgs_Vtbl,
    0x9fe24bed_2b9c_5137_887f_403c94841824
);
impl windows_core::RuntimeType for IContentIslandAutomationProviderRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentIslandAutomationProviderRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.UI.Content.IContentIslandAutomationProviderRequestedEventArgs";
}
pub trait IContentIslandAutomationProviderRequestedEventArgs_Impl:
    windows_core::IUnknownImpl
{
    fn AutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetAutomationProvider(
        &self,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn Handled(&self) -> windows_core::Result<bool>;
    fn SetHandled(&self, value: bool) -> windows_core::Result<()>;
}
impl IContentIslandAutomationProviderRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: IContentIslandAutomationProviderRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn AutomationProvider<
            Identity: IContentIslandAutomationProviderRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandAutomationProviderRequestedEventArgs_Impl::AutomationProvider(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAutomationProvider<
            Identity: IContentIslandAutomationProviderRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentIslandAutomationProviderRequestedEventArgs_Impl::SetAutomationProvider(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Handled<
            Identity: IContentIslandAutomationProviderRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandAutomationProviderRequestedEventArgs_Impl::Handled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: IContentIslandAutomationProviderRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentIslandAutomationProviderRequestedEventArgs_Impl::SetHandled(this, value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentIslandAutomationProviderRequestedEventArgs,
                OFFSET,
            >(),
            AutomationProvider: AutomationProvider::<Identity, OFFSET>,
            SetAutomationProvider: SetAutomationProvider::<Identity, OFFSET>,
            Handled: Handled::<Identity, OFFSET>,
            SetHandled: SetHandled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIslandAutomationProviderRequestedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIslandAutomationProviderRequestedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AutomationProvider: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetAutomationProvider: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Handled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHandled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentIslandEnvironment,
    IContentIslandEnvironment_Vtbl,
    0xc334236d_da88_566d_811d_74aef2eba978
);
impl windows_core::RuntimeType for IContentIslandEnvironment {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentIslandEnvironment {
    const NAME: &'static str = "Microsoft.UI.Content.IContentIslandEnvironment";
}
pub trait IContentIslandEnvironment_Impl: windows_core::IUnknownImpl {
    fn AppWindowId(&self) -> windows_core::Result<super::WindowId>;
    fn DisplayId(&self) -> windows_core::Result<super::DisplayId>;
    fn SettingChanged(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                ContentIslandEnvironment,
                ContentEnvironmentSettingChangedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveSettingChanged(&self, token: i64) -> windows_core::Result<()>;
    fn StateChanged(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                ContentIslandEnvironment,
                ContentEnvironmentStateChangedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveStateChanged(&self, token: i64) -> windows_core::Result<()>;
}
impl IContentIslandEnvironment_Vtbl {
    pub const fn new<Identity: IContentIslandEnvironment_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AppWindowId<
            Identity: IContentIslandEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::WindowId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandEnvironment_Impl::AppWindowId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DisplayId<
            Identity: IContentIslandEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::DisplayId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandEnvironment_Impl::DisplayId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SettingChanged<
            Identity: IContentIslandEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandEnvironment_Impl::SettingChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveSettingChanged<
            Identity: IContentIslandEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentIslandEnvironment_Impl::RemoveSettingChanged(this, token).into()
            }
        }
        unsafe extern "system" fn StateChanged<
            Identity: IContentIslandEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandEnvironment_Impl::StateChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveStateChanged<
            Identity: IContentIslandEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentIslandEnvironment_Impl::RemoveStateChanged(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentIslandEnvironment,
                OFFSET,
            >(),
            AppWindowId: AppWindowId::<Identity, OFFSET>,
            DisplayId: DisplayId::<Identity, OFFSET>,
            SettingChanged: SettingChanged::<Identity, OFFSET>,
            RemoveSettingChanged: RemoveSettingChanged::<Identity, OFFSET>,
            StateChanged: StateChanged::<Identity, OFFSET>,
            RemoveStateChanged: RemoveStateChanged::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIslandEnvironment as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIslandEnvironment_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AppWindowId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::WindowId,
    ) -> windows_core::HRESULT,
    pub DisplayId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::DisplayId,
    ) -> windows_core::HRESULT,
    pub SettingChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveSettingChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub StateChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveStateChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentIslandEnvironment2,
    IContentIslandEnvironment2_Vtbl,
    0x6bf81a71_c1e4_54d6_ac0d_02bcff5297e7
);
impl windows_core::RuntimeType for IContentIslandEnvironment2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentIslandEnvironment2 {
    const NAME: &'static str = "Microsoft.UI.Content.IContentIslandEnvironment2";
}
pub trait IContentIslandEnvironment2_Impl: windows_core::IUnknownImpl {
    fn DisplayScale(&self) -> windows_core::Result<f32>;
}
impl IContentIslandEnvironment2_Vtbl {
    pub const fn new<Identity: IContentIslandEnvironment2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DisplayScale<
            Identity: IContentIslandEnvironment2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandEnvironment2_Impl::DisplayScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentIslandEnvironment2,
                OFFSET,
            >(),
            DisplayScale: DisplayScale::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIslandEnvironment2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIslandEnvironment2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DisplayScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentIslandEnvironmentFactory,
    IContentIslandEnvironmentFactory_Vtbl,
    0x47a782d6_b177_5c1e_bf87_90437dd809d0
);
impl windows_core::RuntimeType for IContentIslandEnvironmentFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentIslandEnvironmentFactory {
    const NAME: &'static str = "Microsoft.UI.Content.IContentIslandEnvironmentFactory";
}
pub trait IContentIslandEnvironmentFactory_Impl: windows_core::IUnknownImpl {}
impl IContentIslandEnvironmentFactory_Vtbl {
    pub const fn new<Identity: IContentIslandEnvironmentFactory_Impl, const OFFSET: isize>() -> Self
    {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentIslandEnvironmentFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIslandEnvironmentFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIslandEnvironmentFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IContentIslandFactory,
    IContentIslandFactory_Vtbl,
    0x82383f52_e81a_5ec9_a954_bac8a931ba7d
);
impl windows_core::RuntimeType for IContentIslandFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentIslandFactory {
    const NAME: &'static str = "Microsoft.UI.Content.IContentIslandFactory";
}
pub trait IContentIslandFactory_Impl: windows_core::IUnknownImpl {}
impl IContentIslandFactory_Vtbl {
    pub const fn new<Identity: IContentIslandFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentIslandFactory, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIslandFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIslandFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IContentIslandStateChangedEventArgs,
    IContentIslandStateChangedEventArgs_Vtbl,
    0xc828eeb2_0c62_5b40_9d48_77c06083c278
);
impl windows_core::RuntimeType for IContentIslandStateChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentIslandStateChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Content.IContentIslandStateChangedEventArgs";
}
pub trait IContentIslandStateChangedEventArgs_Impl: windows_core::IUnknownImpl {
    fn DidActualSizeChange(&self) -> windows_core::Result<bool>;
    fn DidSiteEnabledChange(&self) -> windows_core::Result<bool>;
    fn DidSiteVisibleChange(&self) -> windows_core::Result<bool>;
    fn DidLayoutDirectionChange(&self) -> windows_core::Result<bool>;
    fn DidRasterizationScaleChange(&self) -> windows_core::Result<bool>;
}
impl IContentIslandStateChangedEventArgs_Vtbl {
    pub const fn new<Identity: IContentIslandStateChangedEventArgs_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn DidActualSizeChange<
            Identity: IContentIslandStateChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStateChangedEventArgs_Impl::DidActualSizeChange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DidSiteEnabledChange<
            Identity: IContentIslandStateChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStateChangedEventArgs_Impl::DidSiteEnabledChange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DidSiteVisibleChange<
            Identity: IContentIslandStateChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStateChangedEventArgs_Impl::DidSiteVisibleChange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DidLayoutDirectionChange<
            Identity: IContentIslandStateChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStateChangedEventArgs_Impl::DidLayoutDirectionChange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DidRasterizationScaleChange<
            Identity: IContentIslandStateChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStateChangedEventArgs_Impl::DidRasterizationScaleChange(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentIslandStateChangedEventArgs,
                OFFSET,
            >(),
            DidActualSizeChange: DidActualSizeChange::<Identity, OFFSET>,
            DidSiteEnabledChange: DidSiteEnabledChange::<Identity, OFFSET>,
            DidSiteVisibleChange: DidSiteVisibleChange::<Identity, OFFSET>,
            DidLayoutDirectionChange: DidLayoutDirectionChange::<Identity, OFFSET>,
            DidRasterizationScaleChange: DidRasterizationScaleChange::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIslandStateChangedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIslandStateChangedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DidActualSizeChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub DidSiteEnabledChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub DidSiteVisibleChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub DidLayoutDirectionChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub DidRasterizationScaleChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentIslandStateChangedEventArgs2,
    IContentIslandStateChangedEventArgs2_Vtbl,
    0x8ad25be1_a89a_5872_896e_8298dd20eb0d
);
impl windows_core::RuntimeType for IContentIslandStateChangedEventArgs2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentIslandStateChangedEventArgs2 {
    const NAME: &'static str = "Microsoft.UI.Content.IContentIslandStateChangedEventArgs2";
}
pub trait IContentIslandStateChangedEventArgs2_Impl: windows_core::IUnknownImpl {
    fn DidLocalToClientTransformMatrixChange(&self) -> windows_core::Result<bool>;
    fn DidLocalToParentTransformMatrixChange(&self) -> windows_core::Result<bool>;
}
impl IContentIslandStateChangedEventArgs2_Vtbl {
    pub const fn new<Identity: IContentIslandStateChangedEventArgs2_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn DidLocalToClientTransformMatrixChange<
            Identity: IContentIslandStateChangedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStateChangedEventArgs2_Impl:: DidLocalToClientTransformMatrixChange ( this , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ;  windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        unsafe extern "system" fn DidLocalToParentTransformMatrixChange<
            Identity: IContentIslandStateChangedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStateChangedEventArgs2_Impl:: DidLocalToParentTransformMatrixChange ( this , ) { Ok ( ok__ ) => { result__ . write ( core::mem::transmute_copy ( & ok__ ) ) ;  windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentIslandStateChangedEventArgs2,
                OFFSET,
            >(),
            DidLocalToClientTransformMatrixChange: DidLocalToClientTransformMatrixChange::<
                Identity,
                OFFSET,
            >,
            DidLocalToParentTransformMatrixChange: DidLocalToParentTransformMatrixChange::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIslandStateChangedEventArgs2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIslandStateChangedEventArgs2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DidLocalToClientTransformMatrixChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub DidLocalToParentTransformMatrixChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentIslandStatics,
    IContentIslandStatics_Vtbl,
    0x7b9eb7cc_8c43_5e0a_ab23_ab48628fd223
);
impl windows_core::RuntimeType for IContentIslandStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IContentIslandStatics {
    const NAME: &'static str = "Microsoft.UI.Content.IContentIslandStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait IContentIslandStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        Root: windows_core::Ref<'_, super::Composition::Visual>,
    ) -> windows_core::Result<ContentIsland>;
    fn FindAllForCompositor(
        &self,
        compositor: windows_core::Ref<'_, super::Composition::Compositor>,
    ) -> windows_core::Result<windows_core::Array<ContentIsland>>;
    fn FindAllForCurrentThread(&self) -> windows_core::Result<windows_core::Array<ContentIsland>>;
    fn GetByVisual(
        &self,
        child: windows_core::Ref<'_, super::Composition::Visual>,
    ) -> windows_core::Result<ContentIsland>;
    fn GetFromId(&self, id: u64) -> windows_core::Result<ContentIsland>;
}
#[cfg(feature = "UI_Composition")]
impl IContentIslandStatics_Vtbl {
    pub const fn new<Identity: IContentIslandStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Create<
            Identity: IContentIslandStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            root: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStatics_Impl::Create(this, core::mem::transmute_copy(&root)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FindAllForCompositor<
            Identity: IContentIslandStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStatics_Impl::FindAllForCompositor(
                    this,
                    core::mem::transmute_copy(&compositor),
                ) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FindAllForCurrentThread<
            Identity: IContentIslandStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStatics_Impl::FindAllForCurrentThread(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetByVisual<
            Identity: IContentIslandStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            child: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStatics_Impl::GetByVisual(
                    this,
                    core::mem::transmute_copy(&child),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetFromId<
            Identity: IContentIslandStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            id: u64,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStatics_Impl::GetFromId(this, id) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentIslandStatics, OFFSET>(
            ),
            Create: Create::<Identity, OFFSET>,
            FindAllForCompositor: FindAllForCompositor::<Identity, OFFSET>,
            FindAllForCurrentThread: FindAllForCurrentThread::<Identity, OFFSET>,
            GetByVisual: GetByVisual::<Identity, OFFSET>,
            GetFromId: GetFromId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIslandStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIslandStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Create: usize,
    #[cfg(feature = "UI_Composition")]
    pub FindAllForCompositor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    FindAllForCompositor: usize,
    #[cfg(feature = "UI_Composition")]
    pub FindAllForCurrentThread: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    FindAllForCurrentThread: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetByVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetByVisual: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetFromId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u64,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetFromId: usize,
}
windows_core::imp::define_interface!(
    IContentIslandStatics2,
    IContentIslandStatics2_Vtbl,
    0xb2c6fa77_13c9_5064_bb1d_f878d86acc65
);
impl windows_core::RuntimeType for IContentIslandStatics2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Dispatching"))]
impl windows_core::RuntimeName for IContentIslandStatics2 {
    const NAME: &'static str = "Microsoft.UI.Content.IContentIslandStatics2";
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Dispatching"))]
pub trait IContentIslandStatics2_Impl: windows_core::IUnknownImpl {
    fn CreateForSystemVisual(
        &self,
        queue: windows_core::Ref<'_, super::Dispatching::DispatcherQueue>,
        root: windows_core::Ref<'_, windows::UI::Composition::Visual>,
    ) -> windows_core::Result<ContentIsland>;
    fn FindAllForSystemCompositor(
        &self,
        compositor: windows_core::Ref<'_, windows::UI::Composition::Compositor>,
    ) -> windows_core::Result<windows_core::Array<ContentIsland>>;
    fn GetBySystemVisual(
        &self,
        child: windows_core::Ref<'_, windows::UI::Composition::Visual>,
    ) -> windows_core::Result<ContentIsland>;
}
#[cfg(all(feature = "UI_Composition", feature = "UI_Dispatching"))]
impl IContentIslandStatics2_Vtbl {
    pub const fn new<Identity: IContentIslandStatics2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateForSystemVisual<
            Identity: IContentIslandStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            queue: *mut core::ffi::c_void,
            root: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStatics2_Impl::CreateForSystemVisual(
                    this,
                    core::mem::transmute_copy(&queue),
                    core::mem::transmute_copy(&root),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FindAllForSystemCompositor<
            Identity: IContentIslandStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStatics2_Impl::FindAllForSystemCompositor(
                    this,
                    core::mem::transmute_copy(&compositor),
                ) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetBySystemVisual<
            Identity: IContentIslandStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            child: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentIslandStatics2_Impl::GetBySystemVisual(
                    this,
                    core::mem::transmute_copy(&child),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentIslandStatics2, OFFSET>(
            ),
            CreateForSystemVisual: CreateForSystemVisual::<Identity, OFFSET>,
            FindAllForSystemCompositor: FindAllForSystemCompositor::<Identity, OFFSET>,
            GetBySystemVisual: GetBySystemVisual::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentIslandStatics2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentIslandStatics2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(all(feature = "UI_Composition", feature = "UI_Dispatching"))]
    pub CreateForSystemVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(all(feature = "UI_Composition", feature = "UI_Dispatching")))]
    CreateForSystemVisual: usize,
    #[cfg(feature = "UI_Composition")]
    pub FindAllForSystemCompositor: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    FindAllForSystemCompositor: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetBySystemVisual: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetBySystemVisual: usize,
}
windows_core::imp::define_interface!(
    IContentSite,
    IContentSite_Vtbl,
    0x996c60c4_02b2_5eef_93b0_dd6b1ec2fd7b
);
impl windows_core::RuntimeType for IContentSite {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Dispatching")]
impl windows_core::RuntimeName for IContentSite {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSite";
}
#[cfg(feature = "UI_Dispatching")]
pub trait IContentSite_Impl: windows_core::IUnknownImpl {
    fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn SetActualSize(&self, value: &windows_numerics::Vector2) -> windows_core::Result<()>;
    fn ClientSize(&self) -> windows_core::Result<windows::Graphics::SizeInt32>;
    fn SetClientSize(&self, value: &windows::Graphics::SizeInt32) -> windows_core::Result<()>;
    fn CoordinateConverter(&self) -> windows_core::Result<ContentCoordinateConverter>;
    fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue>;
    fn Environment(&self) -> windows_core::Result<ContentSiteEnvironment>;
    fn IsConnected(&self) -> windows_core::Result<bool>;
    fn IsSiteEnabled(&self) -> windows_core::Result<bool>;
    fn SetIsSiteEnabled(&self, value: bool) -> windows_core::Result<()>;
    fn IsSiteVisible(&self) -> windows_core::Result<bool>;
    fn SetIsSiteVisible(&self, value: bool) -> windows_core::Result<()>;
    fn LayoutDirection(&self) -> windows_core::Result<ContentLayoutDirection>;
    fn SetLayoutDirection(&self, value: ContentLayoutDirection) -> windows_core::Result<()>;
    fn OverrideScale(&self) -> windows_core::Result<f32>;
    fn SetOverrideScale(&self, value: f32) -> windows_core::Result<()>;
    fn ParentScale(&self) -> windows_core::Result<f32>;
    fn SetParentScale(&self, value: f32) -> windows_core::Result<()>;
    fn RasterizationScale(&self) -> windows_core::Result<f32>;
    fn RequestedSize(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn ShouldApplyRasterizationScale(&self) -> windows_core::Result<bool>;
    fn SetShouldApplyRasterizationScale(&self, value: bool) -> windows_core::Result<()>;
    fn View(&self) -> windows_core::Result<ContentSiteView>;
    fn GetIslandStateChangeDeferral(&self) -> windows_core::Result<ContentDeferral>;
    fn RequestedStateChanged(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                ContentSite,
                ContentSiteRequestedStateChangedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveRequestedStateChanged(&self, token: i64) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Dispatching")]
impl IContentSite_Vtbl {
    pub const fn new<Identity: IContentSite_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ActualSize<Identity: IContentSite_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::ActualSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetActualSize<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite_Impl::SetActualSize(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn ClientSize<Identity: IContentSite_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Graphics::SizeInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::ClientSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetClientSize<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows::Graphics::SizeInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite_Impl::SetClientSize(this, core::mem::transmute(&value)).into()
            }
        }
        unsafe extern "system" fn CoordinateConverter<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::CoordinateConverter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DispatcherQueue<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::DispatcherQueue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Environment<Identity: IContentSite_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::Environment(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsConnected<Identity: IContentSite_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::IsConnected(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsSiteEnabled<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::IsSiteEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsSiteEnabled<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite_Impl::SetIsSiteEnabled(this, value).into()
            }
        }
        unsafe extern "system" fn IsSiteVisible<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::IsSiteVisible(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetIsSiteVisible<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite_Impl::SetIsSiteVisible(this, value).into()
            }
        }
        unsafe extern "system" fn LayoutDirection<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut ContentLayoutDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::LayoutDirection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLayoutDirection<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: ContentLayoutDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite_Impl::SetLayoutDirection(this, value).into()
            }
        }
        unsafe extern "system" fn OverrideScale<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::OverrideScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOverrideScale<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite_Impl::SetOverrideScale(this, value).into()
            }
        }
        unsafe extern "system" fn ParentScale<Identity: IContentSite_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::ParentScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetParentScale<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite_Impl::SetParentScale(this, value).into()
            }
        }
        unsafe extern "system" fn RasterizationScale<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::RasterizationScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RequestedSize<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::RequestedSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ShouldApplyRasterizationScale<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::ShouldApplyRasterizationScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetShouldApplyRasterizationScale<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite_Impl::SetShouldApplyRasterizationScale(this, value).into()
            }
        }
        unsafe extern "system" fn View<Identity: IContentSite_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::View(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetIslandStateChangeDeferral<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::GetIslandStateChangeDeferral(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RequestedStateChanged<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite_Impl::RequestedStateChanged(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveRequestedStateChanged<
            Identity: IContentSite_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite_Impl::RemoveRequestedStateChanged(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentSite, OFFSET>(),
            ActualSize: ActualSize::<Identity, OFFSET>,
            SetActualSize: SetActualSize::<Identity, OFFSET>,
            ClientSize: ClientSize::<Identity, OFFSET>,
            SetClientSize: SetClientSize::<Identity, OFFSET>,
            CoordinateConverter: CoordinateConverter::<Identity, OFFSET>,
            DispatcherQueue: DispatcherQueue::<Identity, OFFSET>,
            Environment: Environment::<Identity, OFFSET>,
            IsConnected: IsConnected::<Identity, OFFSET>,
            IsSiteEnabled: IsSiteEnabled::<Identity, OFFSET>,
            SetIsSiteEnabled: SetIsSiteEnabled::<Identity, OFFSET>,
            IsSiteVisible: IsSiteVisible::<Identity, OFFSET>,
            SetIsSiteVisible: SetIsSiteVisible::<Identity, OFFSET>,
            LayoutDirection: LayoutDirection::<Identity, OFFSET>,
            SetLayoutDirection: SetLayoutDirection::<Identity, OFFSET>,
            OverrideScale: OverrideScale::<Identity, OFFSET>,
            SetOverrideScale: SetOverrideScale::<Identity, OFFSET>,
            ParentScale: ParentScale::<Identity, OFFSET>,
            SetParentScale: SetParentScale::<Identity, OFFSET>,
            RasterizationScale: RasterizationScale::<Identity, OFFSET>,
            RequestedSize: RequestedSize::<Identity, OFFSET>,
            ShouldApplyRasterizationScale: ShouldApplyRasterizationScale::<Identity, OFFSET>,
            SetShouldApplyRasterizationScale: SetShouldApplyRasterizationScale::<Identity, OFFSET>,
            View: View::<Identity, OFFSET>,
            GetIslandStateChangeDeferral: GetIslandStateChangeDeferral::<Identity, OFFSET>,
            RequestedStateChanged: RequestedStateChanged::<Identity, OFFSET>,
            RemoveRequestedStateChanged: RemoveRequestedStateChanged::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSite as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSite_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ActualSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub SetActualSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub ClientSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Graphics::SizeInt32,
    ) -> windows_core::HRESULT,
    pub SetClientSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::SizeInt32,
    ) -> windows_core::HRESULT,
    pub CoordinateConverter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    DispatcherQueue: usize,
    pub Environment: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsConnected:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsSiteEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsSiteEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub IsSiteVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetIsSiteVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub LayoutDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut ContentLayoutDirection,
    ) -> windows_core::HRESULT,
    pub SetLayoutDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        ContentLayoutDirection,
    ) -> windows_core::HRESULT,
    pub OverrideScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetOverrideScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub ParentScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetParentScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
    pub RasterizationScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub RequestedSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub ShouldApplyRasterizationScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetShouldApplyRasterizationScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub View: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetIslandStateChangeDeferral: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RequestedStateChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveRequestedStateChanged:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSite2,
    IContentSite2_Vtbl,
    0xc3f0149e_3f8c_5961_9d04_cd6c8a7f6026
);
impl windows_core::RuntimeType for IContentSite2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSite2 {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSite2";
}
pub trait IContentSite2_Impl: windows_core::IUnknownImpl {
    fn LocalToClientTransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4>;
    fn LocalToParentTransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4>;
    fn SetLocalToParentTransformMatrix(
        &self,
        value: &windows_numerics::Matrix4x4,
    ) -> windows_core::Result<()>;
    fn ProcessesKeyboardInput(&self) -> windows_core::Result<bool>;
    fn SetProcessesKeyboardInput(&self, value: bool) -> windows_core::Result<()>;
    fn ProcessesPointerInput(&self) -> windows_core::Result<bool>;
    fn SetProcessesPointerInput(&self, value: bool) -> windows_core::Result<()>;
}
impl IContentSite2_Vtbl {
    pub const fn new<Identity: IContentSite2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn LocalToClientTransformMatrix<
            Identity: IContentSite2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite2_Impl::LocalToClientTransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LocalToParentTransformMatrix<
            Identity: IContentSite2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite2_Impl::LocalToParentTransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLocalToParentTransformMatrix<
            Identity: IContentSite2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite2_Impl::SetLocalToParentTransformMatrix(
                    this,
                    core::mem::transmute(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn ProcessesKeyboardInput<
            Identity: IContentSite2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite2_Impl::ProcessesKeyboardInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetProcessesKeyboardInput<
            Identity: IContentSite2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite2_Impl::SetProcessesKeyboardInput(this, value).into()
            }
        }
        unsafe extern "system" fn ProcessesPointerInput<
            Identity: IContentSite2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSite2_Impl::ProcessesPointerInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetProcessesPointerInput<
            Identity: IContentSite2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSite2_Impl::SetProcessesPointerInput(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentSite2, OFFSET>(),
            LocalToClientTransformMatrix: LocalToClientTransformMatrix::<Identity, OFFSET>,
            LocalToParentTransformMatrix: LocalToParentTransformMatrix::<Identity, OFFSET>,
            SetLocalToParentTransformMatrix: SetLocalToParentTransformMatrix::<Identity, OFFSET>,
            ProcessesKeyboardInput: ProcessesKeyboardInput::<Identity, OFFSET>,
            SetProcessesKeyboardInput: SetProcessesKeyboardInput::<Identity, OFFSET>,
            ProcessesPointerInput: ProcessesPointerInput::<Identity, OFFSET>,
            SetProcessesPointerInput: SetProcessesPointerInput::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSite2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSite2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub LocalToClientTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub LocalToParentTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub SetLocalToParentTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub ProcessesKeyboardInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetProcessesKeyboardInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub ProcessesPointerInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetProcessesPointerInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteAutomation,
    IContentSiteAutomation_Vtbl,
    0xdb4f4683_cd76_50d0_9ae1_044ceb3d3c7a
);
impl windows_core::RuntimeType for IContentSiteAutomation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IContentSiteAutomation,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IContentSiteAutomation {
    pub fn AutomationOption(&self) -> windows_core::Result<ContentAutomationOptions> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationOption)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetAutomationOption(&self, value: ContentAutomationOptions) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetAutomationOption)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).AutomationProvider)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn FragmentRootAutomationProviderRequested<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).FragmentRootAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveFragmentRootAutomationProviderRequested(
        &self,
        token: i64,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveFragmentRootAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn NextSiblingAutomationProviderRequested<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).NextSiblingAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveNextSiblingAutomationProviderRequested(
        &self,
        token: i64,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveNextSiblingAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn ParentAutomationProviderRequested<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ParentAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveParentAutomationProviderRequested(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveParentAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn PreviousSiblingAutomationProviderRequested<P0>(
        &self,
        handler: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PreviousSiblingAutomationProviderRequested)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemovePreviousSiblingAutomationProviderRequested(
        &self,
        token: i64,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            ( windows_core::Interface::vtable ( this ) . RemovePreviousSiblingAutomationProviderRequested ) ( windows_core::Interface::as_raw ( this ) , token , ) . ok ( )
        }
    }
}
impl windows_core::RuntimeName for IContentSiteAutomation {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteAutomation";
}
pub trait IContentSiteAutomation_Impl: windows_core::IUnknownImpl {
    fn AutomationOption(&self) -> windows_core::Result<ContentAutomationOptions>;
    fn SetAutomationOption(&self, value: ContentAutomationOptions) -> windows_core::Result<()>;
    fn AutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn FragmentRootAutomationProviderRequested(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveFragmentRootAutomationProviderRequested(&self, token: i64)
        -> windows_core::Result<()>;
    fn NextSiblingAutomationProviderRequested(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveNextSiblingAutomationProviderRequested(&self, token: i64) -> windows_core::Result<()>;
    fn ParentAutomationProviderRequested(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveParentAutomationProviderRequested(&self, token: i64) -> windows_core::Result<()>;
    fn PreviousSiblingAutomationProviderRequested(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<
                IContentSiteAutomation,
                ContentSiteAutomationProviderRequestedEventArgs,
            >,
        >,
    ) -> windows_core::Result<i64>;
    fn RemovePreviousSiblingAutomationProviderRequested(
        &self,
        token: i64,
    ) -> windows_core::Result<()>;
}
impl IContentSiteAutomation_Vtbl {
    pub const fn new<Identity: IContentSiteAutomation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AutomationOption<
            Identity: IContentSiteAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut ContentAutomationOptions,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteAutomation_Impl::AutomationOption(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAutomationOption<
            Identity: IContentSiteAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: ContentAutomationOptions,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteAutomation_Impl::SetAutomationOption(this, value).into()
            }
        }
        unsafe extern "system" fn AutomationProvider<
            Identity: IContentSiteAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteAutomation_Impl::AutomationProvider(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn FragmentRootAutomationProviderRequested<
            Identity: IContentSiteAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteAutomation_Impl::FragmentRootAutomationProviderRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveFragmentRootAutomationProviderRequested<
            Identity: IContentSiteAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteAutomation_Impl::RemoveFragmentRootAutomationProviderRequested(
                    this, token,
                )
                .into()
            }
        }
        unsafe extern "system" fn NextSiblingAutomationProviderRequested<
            Identity: IContentSiteAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteAutomation_Impl::NextSiblingAutomationProviderRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveNextSiblingAutomationProviderRequested<
            Identity: IContentSiteAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteAutomation_Impl::RemoveNextSiblingAutomationProviderRequested(
                    this, token,
                )
                .into()
            }
        }
        unsafe extern "system" fn ParentAutomationProviderRequested<
            Identity: IContentSiteAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteAutomation_Impl::ParentAutomationProviderRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveParentAutomationProviderRequested<
            Identity: IContentSiteAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteAutomation_Impl::RemoveParentAutomationProviderRequested(this, token)
                    .into()
            }
        }
        unsafe extern "system" fn PreviousSiblingAutomationProviderRequested<
            Identity: IContentSiteAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteAutomation_Impl::PreviousSiblingAutomationProviderRequested(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemovePreviousSiblingAutomationProviderRequested<
            Identity: IContentSiteAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteAutomation_Impl::RemovePreviousSiblingAutomationProviderRequested(
                    this, token,
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentSiteAutomation, OFFSET>(
            ),
            AutomationOption: AutomationOption::<Identity, OFFSET>,
            SetAutomationOption: SetAutomationOption::<Identity, OFFSET>,
            AutomationProvider: AutomationProvider::<Identity, OFFSET>,
            FragmentRootAutomationProviderRequested: FragmentRootAutomationProviderRequested::<
                Identity,
                OFFSET,
            >,
            RemoveFragmentRootAutomationProviderRequested:
                RemoveFragmentRootAutomationProviderRequested::<Identity, OFFSET>,
            NextSiblingAutomationProviderRequested: NextSiblingAutomationProviderRequested::<
                Identity,
                OFFSET,
            >,
            RemoveNextSiblingAutomationProviderRequested:
                RemoveNextSiblingAutomationProviderRequested::<Identity, OFFSET>,
            ParentAutomationProviderRequested: ParentAutomationProviderRequested::<Identity, OFFSET>,
            RemoveParentAutomationProviderRequested: RemoveParentAutomationProviderRequested::<
                Identity,
                OFFSET,
            >,
            PreviousSiblingAutomationProviderRequested: PreviousSiblingAutomationProviderRequested::<
                Identity,
                OFFSET,
            >,
            RemovePreviousSiblingAutomationProviderRequested:
                RemovePreviousSiblingAutomationProviderRequested::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteAutomation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteAutomation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AutomationOption: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut ContentAutomationOptions,
    ) -> windows_core::HRESULT,
    pub SetAutomationOption: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        ContentAutomationOptions,
    ) -> windows_core::HRESULT,
    pub AutomationProvider: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub FragmentRootAutomationProviderRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    )
        -> windows_core::HRESULT,
    pub RemoveFragmentRootAutomationProviderRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub NextSiblingAutomationProviderRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    )
        -> windows_core::HRESULT,
    pub RemoveNextSiblingAutomationProviderRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub ParentAutomationProviderRequested: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveParentAutomationProviderRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub PreviousSiblingAutomationProviderRequested:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut i64,
        ) -> windows_core::HRESULT,
    pub RemovePreviousSiblingAutomationProviderRequested:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteAutomationProviderRequestedEventArgs,
    IContentSiteAutomationProviderRequestedEventArgs_Vtbl,
    0x73a093b9_55d4_5598_b70e_6250b732f821
);
impl windows_core::RuntimeType for IContentSiteAutomationProviderRequestedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteAutomationProviderRequestedEventArgs {
    const NAME: &'static str =
        "Microsoft.UI.Content.IContentSiteAutomationProviderRequestedEventArgs";
}
pub trait IContentSiteAutomationProviderRequestedEventArgs_Impl:
    windows_core::IUnknownImpl
{
    fn AutomationProvider(&self) -> windows_core::Result<windows_core::IInspectable>;
    fn SetAutomationProvider(
        &self,
        value: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn Handled(&self) -> windows_core::Result<bool>;
    fn SetHandled(&self, value: bool) -> windows_core::Result<()>;
}
impl IContentSiteAutomationProviderRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: IContentSiteAutomationProviderRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn AutomationProvider<
            Identity: IContentSiteAutomationProviderRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteAutomationProviderRequestedEventArgs_Impl::AutomationProvider(
                    this,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAutomationProvider<
            Identity: IContentSiteAutomationProviderRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteAutomationProviderRequestedEventArgs_Impl::SetAutomationProvider(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn Handled<
            Identity: IContentSiteAutomationProviderRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteAutomationProviderRequestedEventArgs_Impl::Handled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: IContentSiteAutomationProviderRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteAutomationProviderRequestedEventArgs_Impl::SetHandled(this, value)
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentSiteAutomationProviderRequestedEventArgs,
                OFFSET,
            >(),
            AutomationProvider: AutomationProvider::<Identity, OFFSET>,
            SetAutomationProvider: SetAutomationProvider::<Identity, OFFSET>,
            Handled: Handled::<Identity, OFFSET>,
            SetHandled: SetHandled::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteAutomationProviderRequestedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteAutomationProviderRequestedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AutomationProvider: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetAutomationProvider: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Handled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetHandled:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteBridge,
    IContentSiteBridge_Vtbl,
    0xfaaab99e_a42b_549c_92df_3b6d6e1e368b
);
impl windows_core::RuntimeType for IContentSiteBridge {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IContentSiteBridge,
    windows_core::IUnknown,
    windows_core::IInspectable
);
windows_core::imp::required_hierarchy!(IContentSiteBridge, windows::Foundation::IClosable);
impl IContentSiteBridge {
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DispatcherQueue)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn LayoutDirectionOverride(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<ContentLayoutDirection>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutDirectionOverride)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn SetLayoutDirectionOverride<P0>(&self, value: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows::Foundation::IReference<ContentLayoutDirection>>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetLayoutDirectionOverride)(
                windows_core::Interface::as_raw(this),
                value.param().abi(),
            )
            .ok()
        }
    }
    pub fn OverrideScale(&self) -> windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).OverrideScale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetOverrideScale(&self, value: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetOverrideScale)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Close(&self) -> windows_core::Result<()> {
        let this = &windows_core::Interface::cast::<windows::Foundation::IClosable>(self)?;
        unsafe {
            (windows_core::Interface::vtable(this).Close)(windows_core::Interface::as_raw(this))
                .ok()
        }
    }
}
#[cfg(feature = "UI_Dispatching")]
impl windows_core::RuntimeName for IContentSiteBridge {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteBridge";
}
#[cfg(feature = "UI_Dispatching")]
pub trait IContentSiteBridge_Impl: windows::Foundation::IClosable_Impl {
    fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue>;
    fn LayoutDirectionOverride(
        &self,
    ) -> windows_core::Result<windows::Foundation::IReference<ContentLayoutDirection>>;
    fn SetLayoutDirectionOverride(
        &self,
        value: windows_core::Ref<'_, windows::Foundation::IReference<ContentLayoutDirection>>,
    ) -> windows_core::Result<()>;
    fn OverrideScale(&self) -> windows_core::Result<f32>;
    fn SetOverrideScale(&self, value: f32) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Dispatching")]
impl IContentSiteBridge_Vtbl {
    pub const fn new<Identity: IContentSiteBridge_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DispatcherQueue<
            Identity: IContentSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteBridge_Impl::DispatcherQueue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LayoutDirectionOverride<
            Identity: IContentSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteBridge_Impl::LayoutDirectionOverride(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetLayoutDirectionOverride<
            Identity: IContentSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteBridge_Impl::SetLayoutDirectionOverride(
                    this,
                    core::mem::transmute_copy(&value),
                )
                .into()
            }
        }
        unsafe extern "system" fn OverrideScale<
            Identity: IContentSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteBridge_Impl::OverrideScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetOverrideScale<
            Identity: IContentSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteBridge_Impl::SetOverrideScale(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentSiteBridge, OFFSET>(),
            DispatcherQueue: DispatcherQueue::<Identity, OFFSET>,
            LayoutDirectionOverride: LayoutDirectionOverride::<Identity, OFFSET>,
            SetLayoutDirectionOverride: SetLayoutDirectionOverride::<Identity, OFFSET>,
            OverrideScale: OverrideScale::<Identity, OFFSET>,
            SetOverrideScale: SetOverrideScale::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteBridge as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteBridge_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    DispatcherQueue: usize,
    pub LayoutDirectionOverride: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetLayoutDirectionOverride: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OverrideScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetOverrideScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteEnvironment,
    IContentSiteEnvironment_Vtbl,
    0x685d085d_be53_55d1_aec4_ba2273d5468b
);
impl windows_core::RuntimeType for IContentSiteEnvironment {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteEnvironment {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteEnvironment";
}
pub trait IContentSiteEnvironment_Impl: windows_core::IUnknownImpl {
    fn AppWindowId(&self) -> windows_core::Result<super::WindowId>;
    fn SetAppWindowId(&self, value: &super::WindowId) -> windows_core::Result<()>;
    fn DisplayId(&self) -> windows_core::Result<super::DisplayId>;
    fn SetDisplayId(&self, value: &super::DisplayId) -> windows_core::Result<()>;
    fn View(&self) -> windows_core::Result<ContentSiteEnvironmentView>;
    fn NotifySettingChanged(&self, setting: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IContentSiteEnvironment_Vtbl {
    pub const fn new<Identity: IContentSiteEnvironment_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AppWindowId<
            Identity: IContentSiteEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::WindowId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteEnvironment_Impl::AppWindowId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetAppWindowId<
            Identity: IContentSiteEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::WindowId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteEnvironment_Impl::SetAppWindowId(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn DisplayId<
            Identity: IContentSiteEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::DisplayId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteEnvironment_Impl::DisplayId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDisplayId<
            Identity: IContentSiteEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: super::DisplayId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteEnvironment_Impl::SetDisplayId(this, core::mem::transmute(&value))
                    .into()
            }
        }
        unsafe extern "system" fn View<
            Identity: IContentSiteEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteEnvironment_Impl::View(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn NotifySettingChanged<
            Identity: IContentSiteEnvironment_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            setting: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteEnvironment_Impl::NotifySettingChanged(
                    this,
                    core::mem::transmute(&setting),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentSiteEnvironment, OFFSET>(
            ),
            AppWindowId: AppWindowId::<Identity, OFFSET>,
            SetAppWindowId: SetAppWindowId::<Identity, OFFSET>,
            DisplayId: DisplayId::<Identity, OFFSET>,
            SetDisplayId: SetDisplayId::<Identity, OFFSET>,
            View: View::<Identity, OFFSET>,
            NotifySettingChanged: NotifySettingChanged::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteEnvironment as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteEnvironment_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AppWindowId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::WindowId,
    ) -> windows_core::HRESULT,
    pub SetAppWindowId:
        unsafe extern "system" fn(*mut core::ffi::c_void, super::WindowId) -> windows_core::HRESULT,
    pub DisplayId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::DisplayId,
    ) -> windows_core::HRESULT,
    pub SetDisplayId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::DisplayId,
    ) -> windows_core::HRESULT,
    pub View: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub NotifySettingChanged: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteEnvironment2,
    IContentSiteEnvironment2_Vtbl,
    0x381ae3cd_c780_5a69_ba6a_0ead8560a31f
);
impl windows_core::RuntimeType for IContentSiteEnvironment2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteEnvironment2 {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteEnvironment2";
}
pub trait IContentSiteEnvironment2_Impl: windows_core::IUnknownImpl {
    fn DisplayScale(&self) -> windows_core::Result<f32>;
    fn SetDisplayScale(&self, value: f32) -> windows_core::Result<()>;
}
impl IContentSiteEnvironment2_Vtbl {
    pub const fn new<Identity: IContentSiteEnvironment2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DisplayScale<
            Identity: IContentSiteEnvironment2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteEnvironment2_Impl::DisplayScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetDisplayScale<
            Identity: IContentSiteEnvironment2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteEnvironment2_Impl::SetDisplayScale(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentSiteEnvironment2,
                OFFSET,
            >(),
            DisplayScale: DisplayScale::<Identity, OFFSET>,
            SetDisplayScale: SetDisplayScale::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteEnvironment2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteEnvironment2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DisplayScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub SetDisplayScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteEnvironmentFactory,
    IContentSiteEnvironmentFactory_Vtbl,
    0x0befa998_cb15_5f16_a4a5_c0ed1674e186
);
impl windows_core::RuntimeType for IContentSiteEnvironmentFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteEnvironmentFactory {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteEnvironmentFactory";
}
pub trait IContentSiteEnvironmentFactory_Impl: windows_core::IUnknownImpl {}
impl IContentSiteEnvironmentFactory_Vtbl {
    pub const fn new<Identity: IContentSiteEnvironmentFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentSiteEnvironmentFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteEnvironmentFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteEnvironmentFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IContentSiteEnvironmentView,
    IContentSiteEnvironmentView_Vtbl,
    0x5b6fe420_0bb3_54dd_8589_786cf02e38f1
);
impl windows_core::RuntimeType for IContentSiteEnvironmentView {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteEnvironmentView {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteEnvironmentView";
}
pub trait IContentSiteEnvironmentView_Impl: windows_core::IUnknownImpl {
    fn AppWindowId(&self) -> windows_core::Result<super::WindowId>;
    fn DisplayId(&self) -> windows_core::Result<super::DisplayId>;
}
impl IContentSiteEnvironmentView_Vtbl {
    pub const fn new<Identity: IContentSiteEnvironmentView_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AppWindowId<
            Identity: IContentSiteEnvironmentView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::WindowId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteEnvironmentView_Impl::AppWindowId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DisplayId<
            Identity: IContentSiteEnvironmentView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::DisplayId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteEnvironmentView_Impl::DisplayId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentSiteEnvironmentView,
                OFFSET,
            >(),
            AppWindowId: AppWindowId::<Identity, OFFSET>,
            DisplayId: DisplayId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteEnvironmentView as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteEnvironmentView_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AppWindowId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::WindowId,
    ) -> windows_core::HRESULT,
    pub DisplayId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::DisplayId,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteEnvironmentView2,
    IContentSiteEnvironmentView2_Vtbl,
    0x0b43c89a_9196_5a64_a078_eb150acae527
);
impl windows_core::RuntimeType for IContentSiteEnvironmentView2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteEnvironmentView2 {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteEnvironmentView2";
}
pub trait IContentSiteEnvironmentView2_Impl: windows_core::IUnknownImpl {
    fn DisplayScale(&self) -> windows_core::Result<f32>;
}
impl IContentSiteEnvironmentView2_Vtbl {
    pub const fn new<Identity: IContentSiteEnvironmentView2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn DisplayScale<
            Identity: IContentSiteEnvironmentView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteEnvironmentView2_Impl::DisplayScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentSiteEnvironmentView2,
                OFFSET,
            >(),
            DisplayScale: DisplayScale::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteEnvironmentView2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteEnvironmentView2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DisplayScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteEnvironmentViewFactory,
    IContentSiteEnvironmentViewFactory_Vtbl,
    0xc901edf2_f184_5a64_8d58_8cf8efa8b678
);
impl windows_core::RuntimeType for IContentSiteEnvironmentViewFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteEnvironmentViewFactory {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteEnvironmentViewFactory";
}
pub trait IContentSiteEnvironmentViewFactory_Impl: windows_core::IUnknownImpl {}
impl IContentSiteEnvironmentViewFactory_Vtbl {
    pub const fn new<Identity: IContentSiteEnvironmentViewFactory_Impl, const OFFSET: isize>(
    ) -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentSiteEnvironmentViewFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteEnvironmentViewFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteEnvironmentViewFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IContentSiteFactory,
    IContentSiteFactory_Vtbl,
    0x72fb98d5_b28a_57f1_91fa_24c014a342c1
);
impl windows_core::RuntimeType for IContentSiteFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteFactory {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteFactory";
}
pub trait IContentSiteFactory_Impl: windows_core::IUnknownImpl {}
impl IContentSiteFactory_Vtbl {
    pub const fn new<Identity: IContentSiteFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentSiteFactory, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IContentSiteInput,
    IContentSiteInput_Vtbl,
    0x0ead8189_10d3_550d_b747_8847bd7c9d21
);
impl windows_core::RuntimeType for IContentSiteInput {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IContentSiteInput,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IContentSiteInput {
    pub fn ProcessesKeyboardInput(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesKeyboardInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetProcessesKeyboardInput(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetProcessesKeyboardInput)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ProcessesPointerInput(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ProcessesPointerInput)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn SetProcessesPointerInput(&self, value: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetProcessesPointerInput)(
                windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for IContentSiteInput {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteInput";
}
pub trait IContentSiteInput_Impl: windows_core::IUnknownImpl {
    fn ProcessesKeyboardInput(&self) -> windows_core::Result<bool>;
    fn SetProcessesKeyboardInput(&self, value: bool) -> windows_core::Result<()>;
    fn ProcessesPointerInput(&self) -> windows_core::Result<bool>;
    fn SetProcessesPointerInput(&self, value: bool) -> windows_core::Result<()>;
}
impl IContentSiteInput_Vtbl {
    pub const fn new<Identity: IContentSiteInput_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ProcessesKeyboardInput<
            Identity: IContentSiteInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteInput_Impl::ProcessesKeyboardInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetProcessesKeyboardInput<
            Identity: IContentSiteInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteInput_Impl::SetProcessesKeyboardInput(this, value).into()
            }
        }
        unsafe extern "system" fn ProcessesPointerInput<
            Identity: IContentSiteInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteInput_Impl::ProcessesPointerInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetProcessesPointerInput<
            Identity: IContentSiteInput_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IContentSiteInput_Impl::SetProcessesPointerInput(this, value).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentSiteInput, OFFSET>(),
            ProcessesKeyboardInput: ProcessesKeyboardInput::<Identity, OFFSET>,
            SetProcessesKeyboardInput: SetProcessesKeyboardInput::<Identity, OFFSET>,
            ProcessesPointerInput: ProcessesPointerInput::<Identity, OFFSET>,
            SetProcessesPointerInput: SetProcessesPointerInput::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteInput as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteInput_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ProcessesKeyboardInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetProcessesKeyboardInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub ProcessesPointerInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SetProcessesPointerInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteLink,
    IContentSiteLink_Vtbl,
    0xd9247341_f5d0_5084_af66_f5df5f314fc0
);
impl windows_core::RuntimeType for IContentSiteLink {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IContentSiteLink,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IContentSiteLink {
    #[cfg(feature = "UI_Composition")]
    pub fn Parent(&self) -> windows_core::Result<ContentIsland> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Parent)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IContentSiteLink {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteLink";
}
#[cfg(feature = "UI_Composition")]
pub trait IContentSiteLink_Impl: windows_core::IUnknownImpl {
    fn Parent(&self) -> windows_core::Result<ContentIsland>;
}
#[cfg(feature = "UI_Composition")]
impl IContentSiteLink_Vtbl {
    pub const fn new<Identity: IContentSiteLink_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Parent<Identity: IContentSiteLink_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteLink_Impl::Parent(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentSiteLink, OFFSET>(),
            Parent: Parent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteLink as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteLink_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub Parent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Parent: usize,
}
windows_core::imp::define_interface!(
    IContentSiteRequestedStateChangedEventArgs,
    IContentSiteRequestedStateChangedEventArgs_Vtbl,
    0x1b55fd1d_7292_562b_b4a1_d4de7972e684
);
impl windows_core::RuntimeType for IContentSiteRequestedStateChangedEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteRequestedStateChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteRequestedStateChangedEventArgs";
}
pub trait IContentSiteRequestedStateChangedEventArgs_Impl: windows_core::IUnknownImpl {
    fn DidRequestedSizeChange(&self) -> windows_core::Result<bool>;
}
impl IContentSiteRequestedStateChangedEventArgs_Vtbl {
    pub const fn new<
        Identity: IContentSiteRequestedStateChangedEventArgs_Impl,
        const OFFSET: isize,
    >() -> Self {
        unsafe extern "system" fn DidRequestedSizeChange<
            Identity: IContentSiteRequestedStateChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteRequestedStateChangedEventArgs_Impl::DidRequestedSizeChange(this)
                {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentSiteRequestedStateChangedEventArgs,
                OFFSET,
            >(),
            DidRequestedSizeChange: DidRequestedSizeChange::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteRequestedStateChangedEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteRequestedStateChangedEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub DidRequestedSizeChange:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteView,
    IContentSiteView_Vtbl,
    0x2d5d8dd5_358e_5b05_993b_b2666d1786b3
);
impl windows_core::RuntimeType for IContentSiteView {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Dispatching")]
impl windows_core::RuntimeName for IContentSiteView {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteView";
}
#[cfg(feature = "UI_Dispatching")]
pub trait IContentSiteView_Impl: windows_core::IUnknownImpl {
    fn ActualSize(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn ClientSize(&self) -> windows_core::Result<windows::Graphics::SizeInt32>;
    fn CoordinateConverter(&self) -> windows_core::Result<ContentCoordinateConverter>;
    fn DispatcherQueue(&self) -> windows_core::Result<super::Dispatching::DispatcherQueue>;
    fn EnvironmentView(&self) -> windows_core::Result<ContentSiteEnvironmentView>;
    fn IsConnected(&self) -> windows_core::Result<bool>;
    fn IsSiteEnabled(&self) -> windows_core::Result<bool>;
    fn IsSiteVisible(&self) -> windows_core::Result<bool>;
    fn LayoutDirection(&self) -> windows_core::Result<ContentLayoutDirection>;
    fn OverrideScale(&self) -> windows_core::Result<f32>;
    fn ParentScale(&self) -> windows_core::Result<f32>;
    fn RasterizationScale(&self) -> windows_core::Result<f32>;
    fn RequestedSize(&self) -> windows_core::Result<windows_numerics::Vector2>;
    fn ShouldApplyRasterizationScale(&self) -> windows_core::Result<bool>;
}
#[cfg(feature = "UI_Dispatching")]
impl IContentSiteView_Vtbl {
    pub const fn new<Identity: IContentSiteView_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ActualSize<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::ActualSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ClientSize<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows::Graphics::SizeInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::ClientSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CoordinateConverter<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::CoordinateConverter(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DispatcherQueue<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::DispatcherQueue(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn EnvironmentView<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::EnvironmentView(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsConnected<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::IsConnected(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsSiteEnabled<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::IsSiteEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsSiteVisible<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::IsSiteVisible(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LayoutDirection<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut ContentLayoutDirection,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::LayoutDirection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn OverrideScale<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::OverrideScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ParentScale<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::ParentScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RasterizationScale<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::RasterizationScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RequestedSize<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Vector2,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::RequestedSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ShouldApplyRasterizationScale<
            Identity: IContentSiteView_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView_Impl::ShouldApplyRasterizationScale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentSiteView, OFFSET>(),
            ActualSize: ActualSize::<Identity, OFFSET>,
            ClientSize: ClientSize::<Identity, OFFSET>,
            CoordinateConverter: CoordinateConverter::<Identity, OFFSET>,
            DispatcherQueue: DispatcherQueue::<Identity, OFFSET>,
            EnvironmentView: EnvironmentView::<Identity, OFFSET>,
            IsConnected: IsConnected::<Identity, OFFSET>,
            IsSiteEnabled: IsSiteEnabled::<Identity, OFFSET>,
            IsSiteVisible: IsSiteVisible::<Identity, OFFSET>,
            LayoutDirection: LayoutDirection::<Identity, OFFSET>,
            OverrideScale: OverrideScale::<Identity, OFFSET>,
            ParentScale: ParentScale::<Identity, OFFSET>,
            RasterizationScale: RasterizationScale::<Identity, OFFSET>,
            RequestedSize: RequestedSize::<Identity, OFFSET>,
            ShouldApplyRasterizationScale: ShouldApplyRasterizationScale::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteView as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteView_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ActualSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub ClientSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows::Graphics::SizeInt32,
    ) -> windows_core::HRESULT,
    pub CoordinateConverter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    DispatcherQueue: usize,
    pub EnvironmentView: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub IsConnected:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsSiteEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsSiteVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub LayoutDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut ContentLayoutDirection,
    ) -> windows_core::HRESULT,
    pub OverrideScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub ParentScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub RasterizationScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f32) -> windows_core::HRESULT,
    pub RequestedSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Vector2,
    ) -> windows_core::HRESULT,
    pub ShouldApplyRasterizationScale:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteView2,
    IContentSiteView2_Vtbl,
    0x628adce3_820f_57de_bdc8_3720ff73014b
);
impl windows_core::RuntimeType for IContentSiteView2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteView2 {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteView2";
}
pub trait IContentSiteView2_Impl: windows_core::IUnknownImpl {
    fn LocalToClientTransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4>;
    fn LocalToParentTransformMatrix(&self) -> windows_core::Result<windows_numerics::Matrix4x4>;
    fn ProcessesKeyboardInput(&self) -> windows_core::Result<bool>;
    fn ProcessesPointerInput(&self) -> windows_core::Result<bool>;
}
impl IContentSiteView2_Vtbl {
    pub const fn new<Identity: IContentSiteView2_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn LocalToClientTransformMatrix<
            Identity: IContentSiteView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView2_Impl::LocalToClientTransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LocalToParentTransformMatrix<
            Identity: IContentSiteView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut windows_numerics::Matrix4x4,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView2_Impl::LocalToParentTransformMatrix(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ProcessesKeyboardInput<
            Identity: IContentSiteView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView2_Impl::ProcessesKeyboardInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ProcessesPointerInput<
            Identity: IContentSiteView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteView2_Impl::ProcessesPointerInput(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentSiteView2, OFFSET>(),
            LocalToClientTransformMatrix: LocalToClientTransformMatrix::<Identity, OFFSET>,
            LocalToParentTransformMatrix: LocalToParentTransformMatrix::<Identity, OFFSET>,
            ProcessesKeyboardInput: ProcessesKeyboardInput::<Identity, OFFSET>,
            ProcessesPointerInput: ProcessesPointerInput::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteView2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteView2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub LocalToClientTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub LocalToParentTransformMatrix: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_numerics::Matrix4x4,
    ) -> windows_core::HRESULT,
    pub ProcessesKeyboardInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub ProcessesPointerInput:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteViewAutomation,
    IContentSiteViewAutomation_Vtbl,
    0xf9d1d5ff_9669_5553_a875_aee03e11edd8
);
impl windows_core::RuntimeType for IContentSiteViewAutomation {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteViewAutomation {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteViewAutomation";
}
pub trait IContentSiteViewAutomation_Impl: windows_core::IUnknownImpl {
    fn AutomationOption(&self) -> windows_core::Result<ContentAutomationOptions>;
}
impl IContentSiteViewAutomation_Vtbl {
    pub const fn new<Identity: IContentSiteViewAutomation_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AutomationOption<
            Identity: IContentSiteViewAutomation_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut ContentAutomationOptions,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IContentSiteViewAutomation_Impl::AutomationOption(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IContentSiteViewAutomation,
                OFFSET,
            >(),
            AutomationOption: AutomationOption::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteViewAutomation as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteViewAutomation_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AutomationOption: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut ContentAutomationOptions,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IContentSiteViewFactory,
    IContentSiteViewFactory_Vtbl,
    0x9efd72f0_63ef_5b6a_a50c_5685bd8100f1
);
impl windows_core::RuntimeType for IContentSiteViewFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IContentSiteViewFactory {
    const NAME: &'static str = "Microsoft.UI.Content.IContentSiteViewFactory";
}
pub trait IContentSiteViewFactory_Impl: windows_core::IUnknownImpl {}
impl IContentSiteViewFactory_Vtbl {
    pub const fn new<Identity: IContentSiteViewFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IContentSiteViewFactory, OFFSET>(
            ),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IContentSiteViewFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentSiteViewFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDesktopAttachedSiteBridge,
    IDesktopAttachedSiteBridge_Vtbl,
    0xc8ad3758_c8d3_5ea5_a274_ce12d9cf6845
);
impl windows_core::RuntimeType for IDesktopAttachedSiteBridge {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IDesktopAttachedSiteBridge {
    const NAME: &'static str = "Microsoft.UI.Content.IDesktopAttachedSiteBridge";
}
#[cfg(feature = "UI_Composition")]
pub trait IDesktopAttachedSiteBridge_Impl: windows_core::IUnknownImpl {
    fn SiteView(&self) -> windows_core::Result<ContentSiteView>;
    fn WindowId(&self) -> windows_core::Result<super::WindowId>;
    fn Connect(&self, content: windows_core::Ref<'_, ContentIsland>) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IDesktopAttachedSiteBridge_Vtbl {
    pub const fn new<Identity: IDesktopAttachedSiteBridge_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SiteView<
            Identity: IDesktopAttachedSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopAttachedSiteBridge_Impl::SiteView(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WindowId<
            Identity: IDesktopAttachedSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::WindowId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopAttachedSiteBridge_Impl::WindowId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Connect<
            Identity: IDesktopAttachedSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            content: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopAttachedSiteBridge_Impl::Connect(this, core::mem::transmute_copy(&content))
                    .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopAttachedSiteBridge,
                OFFSET,
            >(),
            SiteView: SiteView::<Identity, OFFSET>,
            WindowId: WindowId::<Identity, OFFSET>,
            Connect: Connect::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopAttachedSiteBridge as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopAttachedSiteBridge_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SiteView: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub WindowId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::WindowId,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub Connect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Connect: usize,
}
windows_core::imp::define_interface!(
    IDesktopAttachedSiteBridgeStatics,
    IDesktopAttachedSiteBridgeStatics_Vtbl,
    0x41f6930f_310e_5680_812c_6dac16dfff44
);
impl windows_core::RuntimeType for IDesktopAttachedSiteBridgeStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Dispatching")]
impl windows_core::RuntimeName for IDesktopAttachedSiteBridgeStatics {
    const NAME: &'static str = "Microsoft.UI.Content.IDesktopAttachedSiteBridgeStatics";
}
#[cfg(feature = "UI_Dispatching")]
pub trait IDesktopAttachedSiteBridgeStatics_Impl: windows_core::IUnknownImpl {
    fn CreateFromWindowId(
        &self,
        queue: windows_core::Ref<'_, super::Dispatching::DispatcherQueue>,
        windowId: &super::WindowId,
    ) -> windows_core::Result<DesktopAttachedSiteBridge>;
}
#[cfg(feature = "UI_Dispatching")]
impl IDesktopAttachedSiteBridgeStatics_Vtbl {
    pub const fn new<Identity: IDesktopAttachedSiteBridgeStatics_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CreateFromWindowId<
            Identity: IDesktopAttachedSiteBridgeStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            queue: *mut core::ffi::c_void,
            windowid: super::WindowId,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopAttachedSiteBridgeStatics_Impl::CreateFromWindowId(
                    this,
                    core::mem::transmute_copy(&queue),
                    core::mem::transmute(&windowid),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopAttachedSiteBridgeStatics,
                OFFSET,
            >(),
            CreateFromWindowId: CreateFromWindowId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopAttachedSiteBridgeStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopAttachedSiteBridgeStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Dispatching")]
    pub CreateFromWindowId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        super::WindowId,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    CreateFromWindowId: usize,
}
windows_core::imp::define_interface!(
    IDesktopChildSiteBridge,
    IDesktopChildSiteBridge_Vtbl,
    0xb2f2ff7b_1825_51b0_b80b_7599889c569f
);
impl windows_core::RuntimeType for IDesktopChildSiteBridge {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDesktopChildSiteBridge {
    const NAME: &'static str = "Microsoft.UI.Content.IDesktopChildSiteBridge";
}
pub trait IDesktopChildSiteBridge_Impl: windows_core::IUnknownImpl {
    fn ResizePolicy(&self) -> windows_core::Result<ContentSizePolicy>;
    fn SetResizePolicy(&self, value: ContentSizePolicy) -> windows_core::Result<()>;
    fn SiteView(&self) -> windows_core::Result<ContentSiteView>;
}
impl IDesktopChildSiteBridge_Vtbl {
    pub const fn new<Identity: IDesktopChildSiteBridge_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ResizePolicy<
            Identity: IDesktopChildSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut ContentSizePolicy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopChildSiteBridge_Impl::ResizePolicy(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetResizePolicy<
            Identity: IDesktopChildSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: ContentSizePolicy,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopChildSiteBridge_Impl::SetResizePolicy(this, value).into()
            }
        }
        unsafe extern "system" fn SiteView<
            Identity: IDesktopChildSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopChildSiteBridge_Impl::SiteView(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDesktopChildSiteBridge, OFFSET>(
            ),
            ResizePolicy: ResizePolicy::<Identity, OFFSET>,
            SetResizePolicy: SetResizePolicy::<Identity, OFFSET>,
            SiteView: SiteView::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopChildSiteBridge as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopChildSiteBridge_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ResizePolicy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut ContentSizePolicy,
    ) -> windows_core::HRESULT,
    pub SetResizePolicy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        ContentSizePolicy,
    ) -> windows_core::HRESULT,
    pub SiteView: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDesktopChildSiteBridgeStatics,
    IDesktopChildSiteBridgeStatics_Vtbl,
    0xab6b82de_6a47_5de3_a860_613c8db679ab
);
impl windows_core::RuntimeType for IDesktopChildSiteBridgeStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IDesktopChildSiteBridgeStatics {
    const NAME: &'static str = "Microsoft.UI.Content.IDesktopChildSiteBridgeStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait IDesktopChildSiteBridgeStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        compositor: windows_core::Ref<'_, super::Composition::Compositor>,
        parentWindowId: &super::WindowId,
    ) -> windows_core::Result<DesktopChildSiteBridge>;
}
#[cfg(feature = "UI_Composition")]
impl IDesktopChildSiteBridgeStatics_Vtbl {
    pub const fn new<Identity: IDesktopChildSiteBridgeStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Create<
            Identity: IDesktopChildSiteBridgeStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            compositor: *mut core::ffi::c_void,
            parentwindowid: super::WindowId,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopChildSiteBridgeStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&compositor),
                    core::mem::transmute(&parentwindowid),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopChildSiteBridgeStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopChildSiteBridgeStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopChildSiteBridgeStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        super::WindowId,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Create: usize,
}
windows_core::imp::define_interface!(
    IDesktopChildSiteBridgeStatics2,
    IDesktopChildSiteBridgeStatics2_Vtbl,
    0xaae99407_e378_5c53_9aff_5a3b53e194a8
);
impl windows_core::RuntimeType for IDesktopChildSiteBridgeStatics2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Dispatching")]
impl windows_core::RuntimeName for IDesktopChildSiteBridgeStatics2 {
    const NAME: &'static str = "Microsoft.UI.Content.IDesktopChildSiteBridgeStatics2";
}
#[cfg(feature = "UI_Dispatching")]
pub trait IDesktopChildSiteBridgeStatics2_Impl: windows_core::IUnknownImpl {
    fn CreateWithDispatcherQueue(
        &self,
        queue: windows_core::Ref<'_, super::Dispatching::DispatcherQueue>,
        parentWindowId: &super::WindowId,
    ) -> windows_core::Result<DesktopChildSiteBridge>;
}
#[cfg(feature = "UI_Dispatching")]
impl IDesktopChildSiteBridgeStatics2_Vtbl {
    pub const fn new<Identity: IDesktopChildSiteBridgeStatics2_Impl, const OFFSET: isize>() -> Self
    {
        unsafe extern "system" fn CreateWithDispatcherQueue<
            Identity: IDesktopChildSiteBridgeStatics2_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            queue: *mut core::ffi::c_void,
            parentwindowid: super::WindowId,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopChildSiteBridgeStatics2_Impl::CreateWithDispatcherQueue(
                    this,
                    core::mem::transmute_copy(&queue),
                    core::mem::transmute(&parentwindowid),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopChildSiteBridgeStatics2,
                OFFSET,
            >(),
            CreateWithDispatcherQueue: CreateWithDispatcherQueue::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopChildSiteBridgeStatics2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopChildSiteBridgeStatics2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Dispatching")]
    pub CreateWithDispatcherQueue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        super::WindowId,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    CreateWithDispatcherQueue: usize,
}
windows_core::imp::define_interface!(
    IDesktopPopupSiteBridge,
    IDesktopPopupSiteBridge_Vtbl,
    0x84eaab23_f716_5ad8_ac00_3d77c01d42cc
);
impl windows_core::RuntimeType for IDesktopPopupSiteBridge {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IDesktopPopupSiteBridge {
    const NAME: &'static str = "Microsoft.UI.Content.IDesktopPopupSiteBridge";
}
#[cfg(feature = "UI_Composition")]
pub trait IDesktopPopupSiteBridge_Impl: windows_core::IUnknownImpl {
    fn IsEnabled(&self) -> windows_core::Result<bool>;
    fn IsVisible(&self) -> windows_core::Result<bool>;
    fn SiteView(&self) -> windows_core::Result<ContentSiteView>;
    fn WindowId(&self) -> windows_core::Result<super::WindowId>;
    fn Connect(&self, content: windows_core::Ref<'_, ContentIsland>) -> windows_core::Result<()>;
    fn Disable(&self) -> windows_core::Result<()>;
    fn Enable(&self) -> windows_core::Result<()>;
    fn Hide(&self) -> windows_core::Result<()>;
    fn MoveAndResize(&self, rect: &windows::Graphics::RectInt32) -> windows_core::Result<()>;
    fn MoveInZOrderAtBottom(&self) -> windows_core::Result<()>;
    fn MoveInZOrderAtTop(&self) -> windows_core::Result<()>;
    fn MoveInZOrderBelow(&self, windowId: &super::WindowId) -> windows_core::Result<()>;
    fn Show(&self) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IDesktopPopupSiteBridge_Vtbl {
    pub const fn new<Identity: IDesktopPopupSiteBridge_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsEnabled<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopPopupSiteBridge_Impl::IsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsVisible<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopPopupSiteBridge_Impl::IsVisible(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SiteView<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopPopupSiteBridge_Impl::SiteView(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WindowId<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::WindowId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopPopupSiteBridge_Impl::WindowId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Connect<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            content: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopPopupSiteBridge_Impl::Connect(this, core::mem::transmute_copy(&content))
                    .into()
            }
        }
        unsafe extern "system" fn Disable<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopPopupSiteBridge_Impl::Disable(this).into()
            }
        }
        unsafe extern "system" fn Enable<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopPopupSiteBridge_Impl::Enable(this).into()
            }
        }
        unsafe extern "system" fn Hide<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopPopupSiteBridge_Impl::Hide(this).into()
            }
        }
        unsafe extern "system" fn MoveAndResize<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            rect: windows::Graphics::RectInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopPopupSiteBridge_Impl::MoveAndResize(this, core::mem::transmute(&rect))
                    .into()
            }
        }
        unsafe extern "system" fn MoveInZOrderAtBottom<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopPopupSiteBridge_Impl::MoveInZOrderAtBottom(this).into()
            }
        }
        unsafe extern "system" fn MoveInZOrderAtTop<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopPopupSiteBridge_Impl::MoveInZOrderAtTop(this).into()
            }
        }
        unsafe extern "system" fn MoveInZOrderBelow<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            windowid: super::WindowId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopPopupSiteBridge_Impl::MoveInZOrderBelow(
                    this,
                    core::mem::transmute(&windowid),
                )
                .into()
            }
        }
        unsafe extern "system" fn Show<
            Identity: IDesktopPopupSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopPopupSiteBridge_Impl::Show(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDesktopPopupSiteBridge, OFFSET>(
            ),
            IsEnabled: IsEnabled::<Identity, OFFSET>,
            IsVisible: IsVisible::<Identity, OFFSET>,
            SiteView: SiteView::<Identity, OFFSET>,
            WindowId: WindowId::<Identity, OFFSET>,
            Connect: Connect::<Identity, OFFSET>,
            Disable: Disable::<Identity, OFFSET>,
            Enable: Enable::<Identity, OFFSET>,
            Hide: Hide::<Identity, OFFSET>,
            MoveAndResize: MoveAndResize::<Identity, OFFSET>,
            MoveInZOrderAtBottom: MoveInZOrderAtBottom::<Identity, OFFSET>,
            MoveInZOrderAtTop: MoveInZOrderAtTop::<Identity, OFFSET>,
            MoveInZOrderBelow: MoveInZOrderBelow::<Identity, OFFSET>,
            Show: Show::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopPopupSiteBridge as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopPopupSiteBridge_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub SiteView: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub WindowId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::WindowId,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub Connect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Connect: usize,
    pub Disable: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Enable: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Hide: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub MoveAndResize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::RectInt32,
    ) -> windows_core::HRESULT,
    pub MoveInZOrderAtBottom:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub MoveInZOrderAtTop:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub MoveInZOrderBelow:
        unsafe extern "system" fn(*mut core::ffi::c_void, super::WindowId) -> windows_core::HRESULT,
    pub Show: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDesktopPopupSiteBridgeStatics,
    IDesktopPopupSiteBridgeStatics_Vtbl,
    0x4ea2b77b_3177_5e5b_8d0d_a76e15c6d080
);
impl windows_core::RuntimeType for IDesktopPopupSiteBridgeStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IDesktopPopupSiteBridgeStatics {
    const NAME: &'static str = "Microsoft.UI.Content.IDesktopPopupSiteBridgeStatics";
}
#[cfg(feature = "UI_Composition")]
pub trait IDesktopPopupSiteBridgeStatics_Impl: windows_core::IUnknownImpl {
    fn Create(
        &self,
        parent: windows_core::Ref<'_, ContentIsland>,
    ) -> windows_core::Result<DesktopPopupSiteBridge>;
}
#[cfg(feature = "UI_Composition")]
impl IDesktopPopupSiteBridgeStatics_Vtbl {
    pub const fn new<Identity: IDesktopPopupSiteBridgeStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Create<
            Identity: IDesktopPopupSiteBridgeStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            parent: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopPopupSiteBridgeStatics_Impl::Create(
                    this,
                    core::mem::transmute_copy(&parent),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopPopupSiteBridgeStatics,
                OFFSET,
            >(),
            Create: Create::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopPopupSiteBridgeStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopPopupSiteBridgeStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Composition")]
    pub Create: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Create: usize,
}
windows_core::imp::define_interface!(
    IDesktopSiteBridge,
    IDesktopSiteBridge_Vtbl,
    0xf0ae8750_905c_50a2_8a12_4545c6245bb4
);
impl windows_core::RuntimeType for IDesktopSiteBridge {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "UI_Composition")]
impl windows_core::RuntimeName for IDesktopSiteBridge {
    const NAME: &'static str = "Microsoft.UI.Content.IDesktopSiteBridge";
}
#[cfg(feature = "UI_Composition")]
pub trait IDesktopSiteBridge_Impl: windows_core::IUnknownImpl {
    fn IsEnabled(&self) -> windows_core::Result<bool>;
    fn IsVisible(&self) -> windows_core::Result<bool>;
    fn WindowId(&self) -> windows_core::Result<super::WindowId>;
    fn Connect(&self, content: windows_core::Ref<'_, ContentIsland>) -> windows_core::Result<()>;
    fn Disable(&self) -> windows_core::Result<()>;
    fn Enable(&self) -> windows_core::Result<()>;
    fn Hide(&self) -> windows_core::Result<()>;
    fn MoveAndResize(&self, rect: &windows::Graphics::RectInt32) -> windows_core::Result<()>;
    fn MoveInZOrderAtBottom(&self) -> windows_core::Result<()>;
    fn MoveInZOrderAtTop(&self) -> windows_core::Result<()>;
    fn MoveInZOrderBelow(&self, windowId: &super::WindowId) -> windows_core::Result<()>;
    fn Show(&self) -> windows_core::Result<()>;
}
#[cfg(feature = "UI_Composition")]
impl IDesktopSiteBridge_Vtbl {
    pub const fn new<Identity: IDesktopSiteBridge_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsEnabled<
            Identity: IDesktopSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopSiteBridge_Impl::IsEnabled(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn IsVisible<
            Identity: IDesktopSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopSiteBridge_Impl::IsVisible(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WindowId<
            Identity: IDesktopSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut super::WindowId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopSiteBridge_Impl::WindowId(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Connect<
            Identity: IDesktopSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            content: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopSiteBridge_Impl::Connect(this, core::mem::transmute_copy(&content)).into()
            }
        }
        unsafe extern "system" fn Disable<
            Identity: IDesktopSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopSiteBridge_Impl::Disable(this).into()
            }
        }
        unsafe extern "system" fn Enable<Identity: IDesktopSiteBridge_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopSiteBridge_Impl::Enable(this).into()
            }
        }
        unsafe extern "system" fn Hide<Identity: IDesktopSiteBridge_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopSiteBridge_Impl::Hide(this).into()
            }
        }
        unsafe extern "system" fn MoveAndResize<
            Identity: IDesktopSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            rect: windows::Graphics::RectInt32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopSiteBridge_Impl::MoveAndResize(this, core::mem::transmute(&rect)).into()
            }
        }
        unsafe extern "system" fn MoveInZOrderAtBottom<
            Identity: IDesktopSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopSiteBridge_Impl::MoveInZOrderAtBottom(this).into()
            }
        }
        unsafe extern "system" fn MoveInZOrderAtTop<
            Identity: IDesktopSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopSiteBridge_Impl::MoveInZOrderAtTop(this).into()
            }
        }
        unsafe extern "system" fn MoveInZOrderBelow<
            Identity: IDesktopSiteBridge_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            windowid: super::WindowId,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopSiteBridge_Impl::MoveInZOrderBelow(this, core::mem::transmute(&windowid))
                    .into()
            }
        }
        unsafe extern "system" fn Show<Identity: IDesktopSiteBridge_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IDesktopSiteBridge_Impl::Show(this).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IDesktopSiteBridge, OFFSET>(),
            IsEnabled: IsEnabled::<Identity, OFFSET>,
            IsVisible: IsVisible::<Identity, OFFSET>,
            WindowId: WindowId::<Identity, OFFSET>,
            Connect: Connect::<Identity, OFFSET>,
            Disable: Disable::<Identity, OFFSET>,
            Enable: Enable::<Identity, OFFSET>,
            Hide: Hide::<Identity, OFFSET>,
            MoveAndResize: MoveAndResize::<Identity, OFFSET>,
            MoveInZOrderAtBottom: MoveInZOrderAtBottom::<Identity, OFFSET>,
            MoveInZOrderAtTop: MoveInZOrderAtTop::<Identity, OFFSET>,
            MoveInZOrderBelow: MoveInZOrderBelow::<Identity, OFFSET>,
            Show: Show::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopSiteBridge as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopSiteBridge_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsEnabled:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub IsVisible:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub WindowId: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::WindowId,
    ) -> windows_core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub Connect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    Connect: usize,
    pub Disable: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Enable: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub Hide: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub MoveAndResize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows::Graphics::RectInt32,
    ) -> windows_core::HRESULT,
    pub MoveInZOrderAtBottom:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub MoveInZOrderAtTop:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub MoveInZOrderBelow:
        unsafe extern "system" fn(*mut core::ffi::c_void, super::WindowId) -> windows_core::HRESULT,
    pub Show: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IDesktopSiteBridgeFactory,
    IDesktopSiteBridgeFactory_Vtbl,
    0xd94ee1ff_3af1_54d0_9311_652b29c57c5b
);
impl windows_core::RuntimeType for IDesktopSiteBridgeFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDesktopSiteBridgeFactory {
    const NAME: &'static str = "Microsoft.UI.Content.IDesktopSiteBridgeFactory";
}
pub trait IDesktopSiteBridgeFactory_Impl: windows_core::IUnknownImpl {}
impl IDesktopSiteBridgeFactory_Vtbl {
    pub const fn new<Identity: IDesktopSiteBridgeFactory_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopSiteBridgeFactory,
                OFFSET,
            >(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopSiteBridgeFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopSiteBridgeFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IDesktopSiteBridgeStatics,
    IDesktopSiteBridgeStatics_Vtbl,
    0xe0b38daf_9cd4_50c5_83ee_c76e3cf34eba
);
impl windows_core::RuntimeType for IDesktopSiteBridgeStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IDesktopSiteBridgeStatics {
    const NAME: &'static str = "Microsoft.UI.Content.IDesktopSiteBridgeStatics";
}
pub trait IDesktopSiteBridgeStatics_Impl: windows_core::IUnknownImpl {
    fn IsSupported(&self) -> windows_core::Result<bool>;
}
impl IDesktopSiteBridgeStatics_Vtbl {
    pub const fn new<Identity: IDesktopSiteBridgeStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn IsSupported<
            Identity: IDesktopSiteBridgeStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IDesktopSiteBridgeStatics_Impl::IsSupported(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IDesktopSiteBridgeStatics,
                OFFSET,
            >(),
            IsSupported: IsSupported::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IDesktopSiteBridgeStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopSiteBridgeStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub IsSupported:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
