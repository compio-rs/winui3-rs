// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

windows_core::imp::define_interface!(
    IKnownResourceQualifierNameStatics,
    IKnownResourceQualifierNameStatics_Vtbl,
    0xdd6cdedc_559b_50c8_ac53_82fe21f915f3
);
impl windows_core::RuntimeType for IKnownResourceQualifierNameStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IKnownResourceQualifierNameStatics {
    const NAME: &'static str =
        "Microsoft.Windows.ApplicationModel.Resources.IKnownResourceQualifierNameStatics";
}
pub trait IKnownResourceQualifierNameStatics_Impl: windows_core::IUnknownImpl {
    fn Contrast(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Custom(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn DeviceFamily(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn HomeRegion(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Language(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn LayoutDirection(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Scale(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn TargetSize(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn Theme(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl IKnownResourceQualifierNameStatics_Vtbl {
    pub const fn new<Identity: IKnownResourceQualifierNameStatics_Impl, const OFFSET: isize>(
    ) -> Self {
        unsafe extern "system" fn Contrast<
            Identity: IKnownResourceQualifierNameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKnownResourceQualifierNameStatics_Impl::Contrast(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Custom<
            Identity: IKnownResourceQualifierNameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKnownResourceQualifierNameStatics_Impl::Custom(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn DeviceFamily<
            Identity: IKnownResourceQualifierNameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKnownResourceQualifierNameStatics_Impl::DeviceFamily(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn HomeRegion<
            Identity: IKnownResourceQualifierNameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKnownResourceQualifierNameStatics_Impl::HomeRegion(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Language<
            Identity: IKnownResourceQualifierNameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKnownResourceQualifierNameStatics_Impl::Language(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn LayoutDirection<
            Identity: IKnownResourceQualifierNameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKnownResourceQualifierNameStatics_Impl::LayoutDirection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Scale<
            Identity: IKnownResourceQualifierNameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKnownResourceQualifierNameStatics_Impl::Scale(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TargetSize<
            Identity: IKnownResourceQualifierNameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKnownResourceQualifierNameStatics_Impl::TargetSize(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Theme<
            Identity: IKnownResourceQualifierNameStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IKnownResourceQualifierNameStatics_Impl::Theme(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IKnownResourceQualifierNameStatics,
                OFFSET,
            >(),
            Contrast: Contrast::<Identity, OFFSET>,
            Custom: Custom::<Identity, OFFSET>,
            DeviceFamily: DeviceFamily::<Identity, OFFSET>,
            HomeRegion: HomeRegion::<Identity, OFFSET>,
            Language: Language::<Identity, OFFSET>,
            LayoutDirection: LayoutDirection::<Identity, OFFSET>,
            Scale: Scale::<Identity, OFFSET>,
            TargetSize: TargetSize::<Identity, OFFSET>,
            Theme: Theme::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IKnownResourceQualifierNameStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IKnownResourceQualifierNameStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Contrast: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Custom: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub DeviceFamily: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HomeRegion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Language: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub LayoutDirection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TargetSize: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Theme: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IResourceCandidate,
    IResourceCandidate_Vtbl,
    0x6c54bc0c_ef1e_57b8_b478_34fece737356
);
impl windows_core::RuntimeType for IResourceCandidate {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IResourceCandidate {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.IResourceCandidate";
}
pub trait IResourceCandidate_Impl: windows_core::IUnknownImpl {
    fn ValueAsString(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn ValueAsBytes(&self) -> windows_core::Result<windows_core::Array<u8>>;
    fn Kind(&self) -> windows_core::Result<ResourceCandidateKind>;
    fn QualifierValues(
        &self,
    ) -> windows_core::Result<
        windows_collections::IMapView<windows_core::HSTRING, windows_core::HSTRING>,
    >;
}
impl IResourceCandidate_Vtbl {
    pub const fn new<Identity: IResourceCandidate_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ValueAsString<
            Identity: IResourceCandidate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceCandidate_Impl::ValueAsString(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ValueAsBytes<
            Identity: IResourceCandidate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result_size__: *mut u32,
            result__: *mut *mut u8,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceCandidate_Impl::ValueAsBytes(this) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Kind<Identity: IResourceCandidate_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut ResourceCandidateKind,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceCandidate_Impl::Kind(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn QualifierValues<
            Identity: IResourceCandidate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceCandidate_Impl::QualifierValues(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IResourceCandidate, OFFSET>(),
            ValueAsString: ValueAsString::<Identity, OFFSET>,
            ValueAsBytes: ValueAsBytes::<Identity, OFFSET>,
            Kind: Kind::<Identity, OFFSET>,
            QualifierValues: QualifierValues::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceCandidate as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceCandidate_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ValueAsString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ValueAsBytes: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut u8,
    ) -> windows_core::HRESULT,
    pub Kind: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut ResourceCandidateKind,
    ) -> windows_core::HRESULT,
    pub QualifierValues: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IResourceCandidateFactory,
    IResourceCandidateFactory_Vtbl,
    0xbb2b30f8_c19b_5f43_88d9_69ad728a32f4
);
impl windows_core::RuntimeType for IResourceCandidateFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IResourceCandidateFactory {
    const NAME: &'static str =
        "Microsoft.Windows.ApplicationModel.Resources.IResourceCandidateFactory";
}
pub trait IResourceCandidateFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        kind: ResourceCandidateKind,
        data: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceCandidate>;
    fn CreateInstance2(&self, data: &[u8]) -> windows_core::Result<ResourceCandidate>;
}
impl IResourceCandidateFactory_Vtbl {
    pub const fn new<Identity: IResourceCandidateFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IResourceCandidateFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            kind: ResourceCandidateKind,
            data: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceCandidateFactory_Impl::CreateInstance(
                    this,
                    kind,
                    core::mem::transmute(&data),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateInstance2<
            Identity: IResourceCandidateFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            data_array_size: u32,
            data: *const u8,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceCandidateFactory_Impl::CreateInstance2(
                    this,
                    core::slice::from_raw_parts(
                        core::mem::transmute_copy(&data),
                        data_array_size as usize,
                    ),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IResourceCandidateFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
            CreateInstance2: CreateInstance2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceCandidateFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceCandidateFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        ResourceCandidateKind,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateInstance2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const u8,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IResourceContext,
    IResourceContext_Vtbl,
    0x96fb48dc_f77d_55ff_af12_34861e3d4939
);
impl windows_core::RuntimeType for IResourceContext {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IResourceContext,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IResourceContext {
    pub fn QualifierValues(
        &self,
    ) -> windows_core::Result<windows_collections::IMap<windows_core::HSTRING, windows_core::HSTRING>>
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).QualifierValues)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeName for IResourceContext {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.IResourceContext";
}
pub trait IResourceContext_Impl: windows_core::IUnknownImpl {
    fn QualifierValues(
        &self,
    ) -> windows_core::Result<windows_collections::IMap<windows_core::HSTRING, windows_core::HSTRING>>;
}
impl IResourceContext_Vtbl {
    pub const fn new<Identity: IResourceContext_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn QualifierValues<
            Identity: IResourceContext_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceContext_Impl::QualifierValues(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IResourceContext, OFFSET>(),
            QualifierValues: QualifierValues::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceContext as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceContext_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub QualifierValues: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IResourceContext2,
    IResourceContext2_Vtbl,
    0x7a3b1158_798c_5949_969d_03510b9ce6ca
);
impl windows_core::RuntimeType for IResourceContext2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IResourceContext2 {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.IResourceContext2";
}
pub trait IResourceContext2_Impl: windows_core::IUnknownImpl {}
impl IResourceContext2_Vtbl {
    pub const fn new<Identity: IResourceContext2_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IResourceContext2, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceContext2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceContext2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IResourceLoader,
    IResourceLoader_Vtbl,
    0xbc3f76bf_da46_54cd_8715_8b8aaf16eaac
);
impl windows_core::RuntimeType for IResourceLoader {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IResourceLoader {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.IResourceLoader";
}
pub trait IResourceLoader_Impl: windows_core::IUnknownImpl {
    fn GetString(
        &self,
        resourceId: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::HSTRING>;
    fn GetStringForUri(
        &self,
        resourceUri: windows_core::Ref<'_, windows::Foundation::Uri>,
    ) -> windows_core::Result<windows_core::HSTRING>;
}
impl IResourceLoader_Vtbl {
    pub const fn new<Identity: IResourceLoader_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetString<Identity: IResourceLoader_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            resourceid: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceLoader_Impl::GetString(this, core::mem::transmute(&resourceid)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetStringForUri<
            Identity: IResourceLoader_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            resourceuri: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceLoader_Impl::GetStringForUri(
                    this,
                    core::mem::transmute_copy(&resourceuri),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IResourceLoader, OFFSET>(),
            GetString: GetString::<Identity, OFFSET>,
            GetStringForUri: GetStringForUri::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceLoader as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceLoader_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetStringForUri: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IResourceLoaderFactory,
    IResourceLoaderFactory_Vtbl,
    0x871f83aa_fb34_50d6_b9b9_2c35f3ffc004
);
impl windows_core::RuntimeType for IResourceLoaderFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IResourceLoaderFactory {
    const NAME: &'static str =
        "Microsoft.Windows.ApplicationModel.Resources.IResourceLoaderFactory";
}
pub trait IResourceLoaderFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        fileName: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceLoader>;
    fn CreateInstance2(
        &self,
        fileName: &windows_core::HSTRING,
        resourceMap: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceLoader>;
}
impl IResourceLoaderFactory_Vtbl {
    pub const fn new<Identity: IResourceLoaderFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IResourceLoaderFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            filename: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceLoaderFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute(&filename),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateInstance2<
            Identity: IResourceLoaderFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            filename: *mut core::ffi::c_void,
            resourcemap: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceLoaderFactory_Impl::CreateInstance2(
                    this,
                    core::mem::transmute(&filename),
                    core::mem::transmute(&resourcemap),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IResourceLoaderFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
            CreateInstance2: CreateInstance2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceLoaderFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceLoaderFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateInstance2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IResourceLoaderStatics,
    IResourceLoaderStatics_Vtbl,
    0xec9c894a_1466_5f2f_8eee_a70cbd2b51bb
);
impl windows_core::RuntimeType for IResourceLoaderStatics {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IResourceLoaderStatics {
    const NAME: &'static str =
        "Microsoft.Windows.ApplicationModel.Resources.IResourceLoaderStatics";
}
pub trait IResourceLoaderStatics_Impl: windows_core::IUnknownImpl {
    fn GetDefaultResourceFilePath(&self) -> windows_core::Result<windows_core::HSTRING>;
}
impl IResourceLoaderStatics_Vtbl {
    pub const fn new<Identity: IResourceLoaderStatics_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetDefaultResourceFilePath<
            Identity: IResourceLoaderStatics_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceLoaderStatics_Impl::GetDefaultResourceFilePath(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IResourceLoaderStatics, OFFSET>(
            ),
            GetDefaultResourceFilePath: GetDefaultResourceFilePath::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceLoaderStatics as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceLoaderStatics_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetDefaultResourceFilePath: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IResourceManager,
    IResourceManager_Vtbl,
    0xac2291ef_81be_5c99_a0ae_bcee0180b8a8
);
impl windows_core::RuntimeType for IResourceManager {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    IResourceManager,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl IResourceManager {
    pub fn MainResourceMap(&self) -> windows_core::Result<ResourceMap> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MainResourceMap)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateResourceContext(&self) -> windows_core::Result<ResourceContext> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateResourceContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ResourceNotFound<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<ResourceManager, ResourceNotFoundEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ResourceNotFound)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveResourceNotFound(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveResourceNotFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for IResourceManager {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.IResourceManager";
}
pub trait IResourceManager_Impl: windows_core::IUnknownImpl {
    fn MainResourceMap(&self) -> windows_core::Result<ResourceMap>;
    fn CreateResourceContext(&self) -> windows_core::Result<ResourceContext>;
    fn ResourceNotFound(
        &self,
        handler: windows_core::Ref<
            '_,
            windows::Foundation::TypedEventHandler<ResourceManager, ResourceNotFoundEventArgs>,
        >,
    ) -> windows_core::Result<i64>;
    fn RemoveResourceNotFound(&self, token: i64) -> windows_core::Result<()>;
}
impl IResourceManager_Vtbl {
    pub const fn new<Identity: IResourceManager_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn MainResourceMap<
            Identity: IResourceManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceManager_Impl::MainResourceMap(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn CreateResourceContext<
            Identity: IResourceManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceManager_Impl::CreateResourceContext(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ResourceNotFound<
            Identity: IResourceManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            handler: *mut core::ffi::c_void,
            result__: *mut i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceManager_Impl::ResourceNotFound(
                    this,
                    core::mem::transmute_copy(&handler),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn RemoveResourceNotFound<
            Identity: IResourceManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            token: i64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IResourceManager_Impl::RemoveResourceNotFound(this, token).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IResourceManager, OFFSET>(),
            MainResourceMap: MainResourceMap::<Identity, OFFSET>,
            CreateResourceContext: CreateResourceContext::<Identity, OFFSET>,
            ResourceNotFound: ResourceNotFound::<Identity, OFFSET>,
            RemoveResourceNotFound: RemoveResourceNotFound::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceManager as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceManager_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub MainResourceMap: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateResourceContext: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ResourceNotFound: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub RemoveResourceNotFound:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IResourceManager2,
    IResourceManager2_Vtbl,
    0x7ec10160_a154_5c42_8268_30e306b1f585
);
impl windows_core::RuntimeType for IResourceManager2 {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IResourceManager2 {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.IResourceManager2";
}
pub trait IResourceManager2_Impl: windows_core::IUnknownImpl {}
impl IResourceManager2_Vtbl {
    pub const fn new<Identity: IResourceManager2_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IResourceManager2, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceManager2 as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceManager2_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
}
windows_core::imp::define_interface!(
    IResourceManagerFactory,
    IResourceManagerFactory_Vtbl,
    0xd6acf18f_458a_535b_a5c4_ac2dc4e49099
);
impl windows_core::RuntimeType for IResourceManagerFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IResourceManagerFactory {
    const NAME: &'static str =
        "Microsoft.Windows.ApplicationModel.Resources.IResourceManagerFactory";
}
pub trait IResourceManagerFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        fileName: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceManager>;
}
impl IResourceManagerFactory_Vtbl {
    pub const fn new<Identity: IResourceManagerFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IResourceManagerFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            filename: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceManagerFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute(&filename),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IResourceManagerFactory, OFFSET>(
            ),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceManagerFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceManagerFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IResourceMap,
    IResourceMap_Vtbl,
    0x4abbd9bc_df4e_5c7b_812c_7e7bb0c22377
);
impl windows_core::RuntimeType for IResourceMap {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IResourceMap {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.IResourceMap";
}
pub trait IResourceMap_Impl: windows_core::IUnknownImpl {
    fn ResourceCount(&self) -> windows_core::Result<u32>;
    fn GetSubtree(&self, reference: &windows_core::HSTRING) -> windows_core::Result<ResourceMap>;
    fn TryGetSubtree(&self, reference: &windows_core::HSTRING)
        -> windows_core::Result<ResourceMap>;
    fn GetValue(&self, resource: &windows_core::HSTRING)
        -> windows_core::Result<ResourceCandidate>;
    fn GetValueWithContext(
        &self,
        resource: &windows_core::HSTRING,
        context: windows_core::Ref<'_, ResourceContext>,
    ) -> windows_core::Result<ResourceCandidate>;
    fn GetValueByIndex(
        &self,
        index: u32,
    ) -> windows_core::Result<
        windows_collections::IKeyValuePair<windows_core::HSTRING, ResourceCandidate>,
    >;
    fn GetValueByIndexWithContext(
        &self,
        index: u32,
        context: windows_core::Ref<'_, ResourceContext>,
    ) -> windows_core::Result<
        windows_collections::IKeyValuePair<windows_core::HSTRING, ResourceCandidate>,
    >;
    fn TryGetValue(
        &self,
        resource: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceCandidate>;
    fn TryGetValueWithContext(
        &self,
        resource: &windows_core::HSTRING,
        context: windows_core::Ref<'_, ResourceContext>,
    ) -> windows_core::Result<ResourceCandidate>;
}
impl IResourceMap_Vtbl {
    pub const fn new<Identity: IResourceMap_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ResourceCount<
            Identity: IResourceMap_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceMap_Impl::ResourceCount(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetSubtree<Identity: IResourceMap_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            reference: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceMap_Impl::GetSubtree(this, core::mem::transmute(&reference)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryGetSubtree<
            Identity: IResourceMap_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            reference: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceMap_Impl::TryGetSubtree(this, core::mem::transmute(&reference)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetValue<Identity: IResourceMap_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            resource: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceMap_Impl::GetValue(this, core::mem::transmute(&resource)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetValueWithContext<
            Identity: IResourceMap_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            resource: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceMap_Impl::GetValueWithContext(
                    this,
                    core::mem::transmute(&resource),
                    core::mem::transmute_copy(&context),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetValueByIndex<
            Identity: IResourceMap_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            index: u32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceMap_Impl::GetValueByIndex(this, index) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetValueByIndexWithContext<
            Identity: IResourceMap_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            index: u32,
            context: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceMap_Impl::GetValueByIndexWithContext(
                    this,
                    index,
                    core::mem::transmute_copy(&context),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryGetValue<Identity: IResourceMap_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            resource: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceMap_Impl::TryGetValue(this, core::mem::transmute(&resource)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn TryGetValueWithContext<
            Identity: IResourceMap_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            resource: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceMap_Impl::TryGetValueWithContext(
                    this,
                    core::mem::transmute(&resource),
                    core::mem::transmute_copy(&context),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IResourceMap, OFFSET>(),
            ResourceCount: ResourceCount::<Identity, OFFSET>,
            GetSubtree: GetSubtree::<Identity, OFFSET>,
            TryGetSubtree: TryGetSubtree::<Identity, OFFSET>,
            GetValue: GetValue::<Identity, OFFSET>,
            GetValueWithContext: GetValueWithContext::<Identity, OFFSET>,
            GetValueByIndex: GetValueByIndex::<Identity, OFFSET>,
            GetValueByIndexWithContext: GetValueByIndexWithContext::<Identity, OFFSET>,
            TryGetValue: TryGetValue::<Identity, OFFSET>,
            TryGetValueWithContext: TryGetValueWithContext::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceMap as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceMap_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub ResourceCount:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u32) -> windows_core::HRESULT,
    pub GetSubtree: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TryGetSubtree: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetValueWithContext: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetValueByIndex: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetValueByIndexWithContext: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TryGetValue: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TryGetValueWithContext: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IResourceNotFoundEventArgs,
    IResourceNotFoundEventArgs_Vtbl,
    0x64abb08b_e77d_5b26_830f_15941e0e8200
);
impl windows_core::RuntimeType for IResourceNotFoundEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IResourceNotFoundEventArgs {
    const NAME: &'static str =
        "Microsoft.Windows.ApplicationModel.Resources.IResourceNotFoundEventArgs";
}
pub trait IResourceNotFoundEventArgs_Impl: windows_core::IUnknownImpl {
    fn Context(&self) -> windows_core::Result<ResourceContext>;
    fn Name(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetResolvedCandidate(
        &self,
        candidate: windows_core::Ref<'_, ResourceCandidate>,
    ) -> windows_core::Result<()>;
}
impl IResourceNotFoundEventArgs_Vtbl {
    pub const fn new<Identity: IResourceNotFoundEventArgs_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Context<
            Identity: IResourceNotFoundEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceNotFoundEventArgs_Impl::Context(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Name<
            Identity: IResourceNotFoundEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IResourceNotFoundEventArgs_Impl::Name(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetResolvedCandidate<
            Identity: IResourceNotFoundEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            candidate: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IResourceNotFoundEventArgs_Impl::SetResolvedCandidate(
                    this,
                    core::mem::transmute_copy(&candidate),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IResourceNotFoundEventArgs,
                OFFSET,
            >(),
            Context: Context::<Identity, OFFSET>,
            Name: Name::<Identity, OFFSET>,
            SetResolvedCandidate: SetResolvedCandidate::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IResourceNotFoundEventArgs as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceNotFoundEventArgs_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Context: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Name: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetResolvedCandidate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
pub struct KnownResourceQualifierName;
impl KnownResourceQualifierName {
    pub fn Contrast() -> windows_core::Result<windows_core::HSTRING> {
        Self::IKnownResourceQualifierNameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Contrast)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn Custom() -> windows_core::Result<windows_core::HSTRING> {
        Self::IKnownResourceQualifierNameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Custom)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn DeviceFamily() -> windows_core::Result<windows_core::HSTRING> {
        Self::IKnownResourceQualifierNameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).DeviceFamily)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn HomeRegion() -> windows_core::Result<windows_core::HSTRING> {
        Self::IKnownResourceQualifierNameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).HomeRegion)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn Language() -> windows_core::Result<windows_core::HSTRING> {
        Self::IKnownResourceQualifierNameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Language)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn LayoutDirection() -> windows_core::Result<windows_core::HSTRING> {
        Self::IKnownResourceQualifierNameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).LayoutDirection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn Scale() -> windows_core::Result<windows_core::HSTRING> {
        Self::IKnownResourceQualifierNameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Scale)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn TargetSize() -> windows_core::Result<windows_core::HSTRING> {
        Self::IKnownResourceQualifierNameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TargetSize)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    pub fn Theme() -> windows_core::Result<windows_core::HSTRING> {
        Self::IKnownResourceQualifierNameStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Theme)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    fn IKnownResourceQualifierNameStatics<
        R,
        F: FnOnce(&IKnownResourceQualifierNameStatics) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            KnownResourceQualifierName,
            IKnownResourceQualifierNameStatics,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeName for KnownResourceQualifierName {
    const NAME: &'static str =
        "Microsoft.Windows.ApplicationModel.Resources.KnownResourceQualifierName";
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ResourceCandidate(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ResourceCandidate,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ResourceCandidate {
    pub fn ValueAsString(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ValueAsString)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn ValueAsBytes(&self) -> windows_core::Result<windows_core::Array<u8>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).ValueAsBytes)(
                windows_core::Interface::as_raw(this),
                windows_core::Array::<u8>::set_abi_len(core::mem::transmute(&mut result__)),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn Kind(&self) -> windows_core::Result<ResourceCandidateKind> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Kind)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn QualifierValues(
        &self,
    ) -> windows_core::Result<
        windows_collections::IMapView<windows_core::HSTRING, windows_core::HSTRING>,
    > {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).QualifierValues)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateInstance(
        kind: ResourceCandidateKind,
        data: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceCandidate> {
        Self::IResourceCandidateFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                kind,
                core::mem::transmute_copy(data),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateInstance2(data: &[u8]) -> windows_core::Result<ResourceCandidate> {
        Self::IResourceCandidateFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance2)(
                windows_core::Interface::as_raw(this),
                data.len().try_into().unwrap(),
                data.as_ptr(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IResourceCandidateFactory<
        R,
        F: FnOnce(&IResourceCandidateFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ResourceCandidate,
            IResourceCandidateFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ResourceCandidate {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IResourceCandidate>();
}
unsafe impl windows_core::Interface for ResourceCandidate {
    type Vtable = <IResourceCandidate as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IResourceCandidate as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ResourceCandidate {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.ResourceCandidate";
}
unsafe impl Send for ResourceCandidate {}
unsafe impl Sync for ResourceCandidate {}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct ResourceCandidateKind(pub i32);
impl ResourceCandidateKind {
    pub const Unknown: Self = Self(0i32);
    pub const String: Self = Self(1i32);
    pub const FilePath: Self = Self(2i32);
    pub const EmbeddedData: Self = Self(3i32);
}
impl windows_core::TypeKind for ResourceCandidateKind {
    type TypeKind = windows_core::CopyType;
}
impl windows_core::RuntimeType for ResourceCandidateKind {
    const SIGNATURE: windows_core::imp::ConstBuffer = windows_core::imp::ConstBuffer::from_slice(
        b"enum(Microsoft.Windows.ApplicationModel.Resources.ResourceCandidateKind;i4)",
    );
}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ResourceContext(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ResourceContext,
    windows_core::IUnknown,
    windows_core::IInspectable,
    IResourceContext
);
impl ResourceContext {
    pub fn QualifierValues(
        &self,
    ) -> windows_core::Result<windows_collections::IMap<windows_core::HSTRING, windows_core::HSTRING>>
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).QualifierValues)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for ResourceContext {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IResourceContext>();
}
unsafe impl windows_core::Interface for ResourceContext {
    type Vtable = <IResourceContext as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IResourceContext as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ResourceContext {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.ResourceContext";
}
unsafe impl Send for ResourceContext {}
unsafe impl Sync for ResourceContext {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ResourceLoader(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ResourceLoader,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ResourceLoader {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ResourceLoader,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetString(
        &self,
        resourceid: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetString)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(resourceid),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn GetStringForUri<P0>(
        &self,
        resourceuri: P0,
    ) -> windows_core::Result<windows_core::HSTRING>
    where
        P0: windows_core::Param<windows::Foundation::Uri>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetStringForUri)(
                windows_core::Interface::as_raw(this),
                resourceuri.param().abi(),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn CreateInstance(
        filename: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceLoader> {
        Self::IResourceLoaderFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(filename),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn CreateInstance2(
        filename: &windows_core::HSTRING,
        resourcemap: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceLoader> {
        Self::IResourceLoaderFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance2)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(filename),
                core::mem::transmute_copy(resourcemap),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    pub fn GetDefaultResourceFilePath() -> windows_core::Result<windows_core::HSTRING> {
        Self::IResourceLoaderStatics(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetDefaultResourceFilePath)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        })
    }
    fn IResourceLoaderFactory<R, F: FnOnce(&IResourceLoaderFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ResourceLoader, IResourceLoaderFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    fn IResourceLoaderStatics<R, F: FnOnce(&IResourceLoaderStatics) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ResourceLoader, IResourceLoaderStatics> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ResourceLoader {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IResourceLoader>();
}
unsafe impl windows_core::Interface for ResourceLoader {
    type Vtable = <IResourceLoader as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IResourceLoader as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ResourceLoader {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.ResourceLoader";
}
unsafe impl Send for ResourceLoader {}
unsafe impl Sync for ResourceLoader {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ResourceManager(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ResourceManager,
    windows_core::IUnknown,
    windows_core::IInspectable,
    IResourceManager
);
impl ResourceManager {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            ResourceManager,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn MainResourceMap(&self) -> windows_core::Result<ResourceMap> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).MainResourceMap)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn CreateResourceContext(&self) -> windows_core::Result<ResourceContext> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateResourceContext)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn ResourceNotFound<P0>(&self, handler: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<
            windows::Foundation::TypedEventHandler<ResourceManager, ResourceNotFoundEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ResourceNotFound)(
                windows_core::Interface::as_raw(this),
                handler.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn RemoveResourceNotFound(&self, token: i64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RemoveResourceNotFound)(
                windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn CreateInstance(
        filename: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceManager> {
        Self::IResourceManagerFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(filename),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IResourceManagerFactory<
        R,
        F: FnOnce(&IResourceManagerFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<ResourceManager, IResourceManagerFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for ResourceManager {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IResourceManager>();
}
unsafe impl windows_core::Interface for ResourceManager {
    type Vtable = <IResourceManager as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IResourceManager as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ResourceManager {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.ResourceManager";
}
unsafe impl Send for ResourceManager {}
unsafe impl Sync for ResourceManager {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ResourceMap(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ResourceMap,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ResourceMap {
    pub fn ResourceCount(&self) -> windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).ResourceCount)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn GetSubtree(
        &self,
        reference: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceMap> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetSubtree)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(reference),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetSubtree(
        &self,
        reference: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceMap> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetSubtree)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(reference),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetValue(
        &self,
        resource: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceCandidate> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValue)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(resource),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetValueWithContext<P1>(
        &self,
        resource: &windows_core::HSTRING,
        context: P1,
    ) -> windows_core::Result<ResourceCandidate>
    where
        P1: windows_core::Param<ResourceContext>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValueWithContext)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(resource),
                context.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetValueByIndex(
        &self,
        index: u32,
    ) -> windows_core::Result<
        windows_collections::IKeyValuePair<windows_core::HSTRING, ResourceCandidate>,
    > {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValueByIndex)(
                windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn GetValueByIndexWithContext<P1>(
        &self,
        index: u32,
        context: P1,
    ) -> windows_core::Result<
        windows_collections::IKeyValuePair<windows_core::HSTRING, ResourceCandidate>,
    >
    where
        P1: windows_core::Param<ResourceContext>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).GetValueByIndexWithContext)(
                windows_core::Interface::as_raw(this),
                index,
                context.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetValue(
        &self,
        resource: &windows_core::HSTRING,
    ) -> windows_core::Result<ResourceCandidate> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetValue)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(resource),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn TryGetValueWithContext<P1>(
        &self,
        resource: &windows_core::HSTRING,
        context: P1,
    ) -> windows_core::Result<ResourceCandidate>
    where
        P1: windows_core::Param<ResourceContext>,
    {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TryGetValueWithContext)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(resource),
                context.param().abi(),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
}
impl windows_core::RuntimeType for ResourceMap {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IResourceMap>();
}
unsafe impl windows_core::Interface for ResourceMap {
    type Vtable = <IResourceMap as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IResourceMap as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ResourceMap {
    const NAME: &'static str = "Microsoft.Windows.ApplicationModel.Resources.ResourceMap";
}
unsafe impl Send for ResourceMap {}
unsafe impl Sync for ResourceMap {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct ResourceNotFoundEventArgs(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ResourceNotFoundEventArgs,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ResourceNotFoundEventArgs {
    pub fn Context(&self) -> windows_core::Result<ResourceContext> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Context)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub fn Name(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Name)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetResolvedCandidate<P0>(&self, candidate: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<ResourceCandidate>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetResolvedCandidate)(
                windows_core::Interface::as_raw(this),
                candidate.param().abi(),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeType for ResourceNotFoundEventArgs {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IResourceNotFoundEventArgs>();
}
unsafe impl windows_core::Interface for ResourceNotFoundEventArgs {
    type Vtable = <IResourceNotFoundEventArgs as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IResourceNotFoundEventArgs as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ResourceNotFoundEventArgs {
    const NAME: &'static str =
        "Microsoft.Windows.ApplicationModel.Resources.ResourceNotFoundEventArgs";
}
unsafe impl Send for ResourceNotFoundEventArgs {}
unsafe impl Sync for ResourceNotFoundEventArgs {}
